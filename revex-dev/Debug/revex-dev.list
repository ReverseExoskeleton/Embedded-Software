
revex-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a0  080060a0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080060a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000038  080060e0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080060e0  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ae0  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003090  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00037bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a75  00000000  00000000  00039cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001570d  00000000  00000000  0005074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861d3  00000000  00000000  00065e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec02d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  000ec080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006010 	.word	0x08006010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08006010 	.word	0x08006010

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 fada 	bl	8000a5c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 fad5 	bl	8000a5c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fadd>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	4646      	mov	r6, r8
 8000620:	46d6      	mov	lr, sl
 8000622:	464f      	mov	r7, r9
 8000624:	024d      	lsls	r5, r1, #9
 8000626:	0242      	lsls	r2, r0, #9
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a52      	lsrs	r2, r2, #9
 800062c:	0a6e      	lsrs	r6, r5, #9
 800062e:	0047      	lsls	r7, r0, #1
 8000630:	46b0      	mov	r8, r6
 8000632:	0e3f      	lsrs	r7, r7, #24
 8000634:	004e      	lsls	r6, r1, #1
 8000636:	0fc4      	lsrs	r4, r0, #31
 8000638:	00d0      	lsls	r0, r2, #3
 800063a:	4694      	mov	ip, r2
 800063c:	003b      	movs	r3, r7
 800063e:	4682      	mov	sl, r0
 8000640:	0e36      	lsrs	r6, r6, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	09ad      	lsrs	r5, r5, #6
 8000646:	428c      	cmp	r4, r1
 8000648:	d06d      	beq.n	8000726 <__aeabi_fadd+0x10a>
 800064a:	1bb8      	subs	r0, r7, r6
 800064c:	4681      	mov	r9, r0
 800064e:	2800      	cmp	r0, #0
 8000650:	dd4d      	ble.n	80006ee <__aeabi_fadd+0xd2>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x3c>
 8000656:	e088      	b.n	800076a <__aeabi_fadd+0x14e>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d05a      	beq.n	8000712 <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	464b      	mov	r3, r9
 8000664:	2201      	movs	r2, #1
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dc0a      	bgt.n	8000680 <__aeabi_fadd+0x64>
 800066a:	002b      	movs	r3, r5
 800066c:	464a      	mov	r2, r9
 800066e:	4649      	mov	r1, r9
 8000670:	40d3      	lsrs	r3, r2
 8000672:	2220      	movs	r2, #32
 8000674:	1a52      	subs	r2, r2, r1
 8000676:	4095      	lsls	r5, r2
 8000678:	002a      	movs	r2, r5
 800067a:	1e55      	subs	r5, r2, #1
 800067c:	41aa      	sbcs	r2, r5
 800067e:	431a      	orrs	r2, r3
 8000680:	4653      	mov	r3, sl
 8000682:	1a9a      	subs	r2, r3, r2
 8000684:	0153      	lsls	r3, r2, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x6e>
 8000688:	e0b9      	b.n	80007fe <__aeabi_fadd+0x1e2>
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	0996      	lsrs	r6, r2, #6
 800068e:	0030      	movs	r0, r6
 8000690:	f000 f9c6 	bl	8000a20 <__clzsi2>
 8000694:	3805      	subs	r0, #5
 8000696:	4086      	lsls	r6, r0
 8000698:	4287      	cmp	r7, r0
 800069a:	dd00      	ble.n	800069e <__aeabi_fadd+0x82>
 800069c:	e0d4      	b.n	8000848 <__aeabi_fadd+0x22c>
 800069e:	0033      	movs	r3, r6
 80006a0:	1bc7      	subs	r7, r0, r7
 80006a2:	2020      	movs	r0, #32
 80006a4:	3701      	adds	r7, #1
 80006a6:	40fb      	lsrs	r3, r7
 80006a8:	1bc7      	subs	r7, r0, r7
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1e56      	subs	r6, r2, #1
 80006b0:	41b2      	sbcs	r2, r6
 80006b2:	2700      	movs	r7, #0
 80006b4:	431a      	orrs	r2, r3
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0xae>
 80006c8:	e09c      	b.n	8000804 <__aeabi_fadd+0x1e8>
 80006ca:	1c7b      	adds	r3, r7, #1
 80006cc:	2ffe      	cmp	r7, #254	; 0xfe
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0xb6>
 80006d0:	e09a      	b.n	8000808 <__aeabi_fadd+0x1ec>
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	0a52      	lsrs	r2, r2, #9
 80006d6:	4694      	mov	ip, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	05d8      	lsls	r0, r3, #23
 80006dc:	4663      	mov	r3, ip
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4320      	orrs	r0, r4
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d049      	beq.n	8000786 <__aeabi_fadd+0x16a>
 80006f2:	1bf3      	subs	r3, r6, r7
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xde>
 80006f8:	e0b6      	b.n	8000868 <__aeabi_fadd+0x24c>
 80006fa:	4652      	mov	r2, sl
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d060      	beq.n	80007c2 <__aeabi_fadd+0x1a6>
 8000700:	3b01      	subs	r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0xec>
 8000706:	e0fc      	b.n	8000902 <__aeabi_fadd+0x2e6>
 8000708:	2eff      	cmp	r6, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xf2>
 800070c:	e0b4      	b.n	8000878 <__aeabi_fadd+0x25c>
 800070e:	000c      	movs	r4, r1
 8000710:	4642      	mov	r2, r8
 8000712:	2a00      	cmp	r2, #0
 8000714:	d078      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 8000716:	2080      	movs	r0, #128	; 0x80
 8000718:	03c0      	lsls	r0, r0, #15
 800071a:	4310      	orrs	r0, r2
 800071c:	0242      	lsls	r2, r0, #9
 800071e:	0a53      	lsrs	r3, r2, #9
 8000720:	469c      	mov	ip, r3
 8000722:	23ff      	movs	r3, #255	; 0xff
 8000724:	e7d9      	b.n	80006da <__aeabi_fadd+0xbe>
 8000726:	1bb9      	subs	r1, r7, r6
 8000728:	2900      	cmp	r1, #0
 800072a:	dd71      	ble.n	8000810 <__aeabi_fadd+0x1f4>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d03f      	beq.n	80007b0 <__aeabi_fadd+0x194>
 8000730:	2fff      	cmp	r7, #255	; 0xff
 8000732:	d0ee      	beq.n	8000712 <__aeabi_fadd+0xf6>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431d      	orrs	r5, r3
 800073a:	2201      	movs	r2, #1
 800073c:	291b      	cmp	r1, #27
 800073e:	dc07      	bgt.n	8000750 <__aeabi_fadd+0x134>
 8000740:	002a      	movs	r2, r5
 8000742:	2320      	movs	r3, #32
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a59      	subs	r1, r3, r1
 8000748:	408d      	lsls	r5, r1
 800074a:	1e6b      	subs	r3, r5, #1
 800074c:	419d      	sbcs	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	4452      	add	r2, sl
 8000752:	0153      	lsls	r3, r2, #5
 8000754:	d553      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 8000756:	3701      	adds	r7, #1
 8000758:	2fff      	cmp	r7, #255	; 0xff
 800075a:	d055      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 800075c:	2301      	movs	r3, #1
 800075e:	497b      	ldr	r1, [pc, #492]	; (800094c <__aeabi_fadd+0x330>)
 8000760:	4013      	ands	r3, r2
 8000762:	0852      	lsrs	r2, r2, #1
 8000764:	400a      	ands	r2, r1
 8000766:	431a      	orrs	r2, r3
 8000768:	e7a5      	b.n	80006b6 <__aeabi_fadd+0x9a>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d02c      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	469c      	mov	ip, r3
 8000774:	44e1      	add	r9, ip
 8000776:	464b      	mov	r3, r9
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x162>
 800077c:	e0ad      	b.n	80008da <__aeabi_fadd+0x2be>
 800077e:	2fff      	cmp	r7, #255	; 0xff
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x168>
 8000782:	e76e      	b.n	8000662 <__aeabi_fadd+0x46>
 8000784:	e7c5      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000786:	20fe      	movs	r0, #254	; 0xfe
 8000788:	1c7e      	adds	r6, r7, #1
 800078a:	4230      	tst	r0, r6
 800078c:	d160      	bne.n	8000850 <__aeabi_fadd+0x234>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fadd+0x178>
 8000792:	e093      	b.n	80008bc <__aeabi_fadd+0x2a0>
 8000794:	4652      	mov	r2, sl
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x180>
 800079a:	e0b6      	b.n	800090a <__aeabi_fadd+0x2ee>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d09c      	beq.n	80006da <__aeabi_fadd+0xbe>
 80007a0:	1b52      	subs	r2, r2, r5
 80007a2:	0150      	lsls	r0, r2, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x18c>
 80007a6:	e0c3      	b.n	8000930 <__aeabi_fadd+0x314>
 80007a8:	4653      	mov	r3, sl
 80007aa:	000c      	movs	r4, r1
 80007ac:	1aea      	subs	r2, r5, r3
 80007ae:	e782      	b.n	80006b6 <__aeabi_fadd+0x9a>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d009      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 80007b4:	3901      	subs	r1, #1
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x1a0>
 80007ba:	e08b      	b.n	80008d4 <__aeabi_fadd+0x2b8>
 80007bc:	2fff      	cmp	r7, #255	; 0xff
 80007be:	d1bc      	bne.n	800073a <__aeabi_fadd+0x11e>
 80007c0:	e7a7      	b.n	8000712 <__aeabi_fadd+0xf6>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	0037      	movs	r7, r6
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d0a2      	beq.n	8000712 <__aeabi_fadd+0xf6>
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	0a53      	lsrs	r3, r2, #9
 80007d0:	469c      	mov	ip, r3
 80007d2:	b2fb      	uxtb	r3, r7
 80007d4:	e781      	b.n	80006da <__aeabi_fadd+0xbe>
 80007d6:	21fe      	movs	r1, #254	; 0xfe
 80007d8:	3701      	adds	r7, #1
 80007da:	4239      	tst	r1, r7
 80007dc:	d165      	bne.n	80008aa <__aeabi_fadd+0x28e>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d17e      	bne.n	80008e0 <__aeabi_fadd+0x2c4>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x1cc>
 80007e6:	e0aa      	b.n	800093e <__aeabi_fadd+0x322>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x1d2>
 80007ec:	e775      	b.n	80006da <__aeabi_fadd+0xbe>
 80007ee:	002a      	movs	r2, r5
 80007f0:	4452      	add	r2, sl
 80007f2:	2700      	movs	r7, #0
 80007f4:	0153      	lsls	r3, r2, #5
 80007f6:	d502      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <__aeabi_fadd+0x334>)
 80007fa:	3701      	adds	r7, #1
 80007fc:	401a      	ands	r2, r3
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x1e8>
 8000802:	e75a      	b.n	80006ba <__aeabi_fadd+0x9e>
 8000804:	08d2      	lsrs	r2, r2, #3
 8000806:	e7df      	b.n	80007c8 <__aeabi_fadd+0x1ac>
 8000808:	2200      	movs	r2, #0
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	4694      	mov	ip, r2
 800080e:	e764      	b.n	80006da <__aeabi_fadd+0xbe>
 8000810:	2900      	cmp	r1, #0
 8000812:	d0e0      	beq.n	80007d6 <__aeabi_fadd+0x1ba>
 8000814:	1bf3      	subs	r3, r6, r7
 8000816:	2f00      	cmp	r7, #0
 8000818:	d03e      	beq.n	8000898 <__aeabi_fadd+0x27c>
 800081a:	2eff      	cmp	r6, #255	; 0xff
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x204>
 800081e:	e777      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0001      	movs	r1, r0
 8000824:	04d2      	lsls	r2, r2, #19
 8000826:	4311      	orrs	r1, r2
 8000828:	468a      	mov	sl, r1
 800082a:	2201      	movs	r2, #1
 800082c:	2b1b      	cmp	r3, #27
 800082e:	dc08      	bgt.n	8000842 <__aeabi_fadd+0x226>
 8000830:	4652      	mov	r2, sl
 8000832:	2120      	movs	r1, #32
 8000834:	4650      	mov	r0, sl
 8000836:	40da      	lsrs	r2, r3
 8000838:	1acb      	subs	r3, r1, r3
 800083a:	4098      	lsls	r0, r3
 800083c:	1e43      	subs	r3, r0, #1
 800083e:	4198      	sbcs	r0, r3
 8000840:	4302      	orrs	r2, r0
 8000842:	0037      	movs	r7, r6
 8000844:	1952      	adds	r2, r2, r5
 8000846:	e784      	b.n	8000752 <__aeabi_fadd+0x136>
 8000848:	4a41      	ldr	r2, [pc, #260]	; (8000950 <__aeabi_fadd+0x334>)
 800084a:	1a3f      	subs	r7, r7, r0
 800084c:	4032      	ands	r2, r6
 800084e:	e732      	b.n	80006b6 <__aeabi_fadd+0x9a>
 8000850:	4653      	mov	r3, sl
 8000852:	1b5e      	subs	r6, r3, r5
 8000854:	0173      	lsls	r3, r6, #5
 8000856:	d42d      	bmi.n	80008b4 <__aeabi_fadd+0x298>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x242>
 800085c:	e717      	b.n	800068e <__aeabi_fadd+0x72>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	2300      	movs	r3, #0
 8000864:	4694      	mov	ip, r2
 8000866:	e738      	b.n	80006da <__aeabi_fadd+0xbe>
 8000868:	2eff      	cmp	r6, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fadd+0x252>
 800086c:	e74f      	b.n	800070e <__aeabi_fadd+0xf2>
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	4650      	mov	r0, sl
 8000872:	04d2      	lsls	r2, r2, #19
 8000874:	4310      	orrs	r0, r2
 8000876:	4682      	mov	sl, r0
 8000878:	2201      	movs	r2, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x274>
 800087e:	4652      	mov	r2, sl
 8000880:	2420      	movs	r4, #32
 8000882:	4650      	mov	r0, sl
 8000884:	40da      	lsrs	r2, r3
 8000886:	1ae3      	subs	r3, r4, r3
 8000888:	4098      	lsls	r0, r3
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4198      	sbcs	r0, r3
 800088e:	4302      	orrs	r2, r0
 8000890:	000c      	movs	r4, r1
 8000892:	0037      	movs	r7, r6
 8000894:	1aaa      	subs	r2, r5, r2
 8000896:	e6f5      	b.n	8000684 <__aeabi_fadd+0x68>
 8000898:	2800      	cmp	r0, #0
 800089a:	d093      	beq.n	80007c4 <__aeabi_fadd+0x1a8>
 800089c:	3b01      	subs	r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d04f      	beq.n	8000942 <__aeabi_fadd+0x326>
 80008a2:	2eff      	cmp	r6, #255	; 0xff
 80008a4:	d1c1      	bne.n	800082a <__aeabi_fadd+0x20e>
 80008a6:	4642      	mov	r2, r8
 80008a8:	e733      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d0ac      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 80008ae:	4455      	add	r5, sl
 80008b0:	086a      	lsrs	r2, r5, #1
 80008b2:	e7a4      	b.n	80007fe <__aeabi_fadd+0x1e2>
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	1aee      	subs	r6, r5, r3
 80008ba:	e6e8      	b.n	800068e <__aeabi_fadd+0x72>
 80008bc:	4653      	mov	r3, sl
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d128      	bne.n	8000914 <__aeabi_fadd+0x2f8>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x2ac>
 80008c6:	e722      	b.n	800070e <__aeabi_fadd+0xf2>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	469c      	mov	ip, r3
 80008ce:	2400      	movs	r4, #0
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	e702      	b.n	80006da <__aeabi_fadd+0xbe>
 80008d4:	002a      	movs	r2, r5
 80008d6:	4452      	add	r2, sl
 80008d8:	e73b      	b.n	8000752 <__aeabi_fadd+0x136>
 80008da:	4653      	mov	r3, sl
 80008dc:	1b5a      	subs	r2, r3, r5
 80008de:	e6d1      	b.n	8000684 <__aeabi_fadd+0x68>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2ca>
 80008e4:	e714      	b.n	8000710 <__aeabi_fadd+0xf4>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2d0>
 80008ea:	e712      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	03db      	lsls	r3, r3, #15
 80008f0:	421a      	tst	r2, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2da>
 80008f4:	e70d      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008f6:	4641      	mov	r1, r8
 80008f8:	4219      	tst	r1, r3
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x2e2>
 80008fc:	e709      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008fe:	4642      	mov	r2, r8
 8000900:	e707      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000902:	000c      	movs	r4, r1
 8000904:	0037      	movs	r7, r6
 8000906:	1aaa      	subs	r2, r5, r2
 8000908:	e6bc      	b.n	8000684 <__aeabi_fadd+0x68>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d013      	beq.n	8000936 <__aeabi_fadd+0x31a>
 800090e:	000c      	movs	r4, r1
 8000910:	46c4      	mov	ip, r8
 8000912:	e6e2      	b.n	80006da <__aeabi_fadd+0xbe>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x2fe>
 8000918:	e6fb      	b.n	8000712 <__aeabi_fadd+0xf6>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	03db      	lsls	r3, r3, #15
 800091e:	421a      	tst	r2, r3
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x308>
 8000922:	e6f6      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000924:	4640      	mov	r0, r8
 8000926:	4218      	tst	r0, r3
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x310>
 800092a:	e6f2      	b.n	8000712 <__aeabi_fadd+0xf6>
 800092c:	000c      	movs	r4, r1
 800092e:	e6ef      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000930:	2a00      	cmp	r2, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x31a>
 8000934:	e763      	b.n	80007fe <__aeabi_fadd+0x1e2>
 8000936:	2200      	movs	r2, #0
 8000938:	2400      	movs	r4, #0
 800093a:	4694      	mov	ip, r2
 800093c:	e6cd      	b.n	80006da <__aeabi_fadd+0xbe>
 800093e:	46c4      	mov	ip, r8
 8000940:	e6cb      	b.n	80006da <__aeabi_fadd+0xbe>
 8000942:	002a      	movs	r2, r5
 8000944:	0037      	movs	r7, r6
 8000946:	4452      	add	r2, sl
 8000948:	e703      	b.n	8000752 <__aeabi_fadd+0x136>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	7dffffff 	.word	0x7dffffff
 8000950:	fbffffff 	.word	0xfbffffff

08000954 <__aeabi_f2iz>:
 8000954:	0241      	lsls	r1, r0, #9
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0fc3      	lsrs	r3, r0, #31
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	2000      	movs	r0, #0
 800095e:	0e12      	lsrs	r2, r2, #24
 8000960:	2a7e      	cmp	r2, #126	; 0x7e
 8000962:	d903      	bls.n	800096c <__aeabi_f2iz+0x18>
 8000964:	2a9d      	cmp	r2, #157	; 0x9d
 8000966:	d902      	bls.n	800096e <__aeabi_f2iz+0x1a>
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <__aeabi_f2iz+0x3c>)
 800096a:	1898      	adds	r0, r3, r2
 800096c:	4770      	bx	lr
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	0400      	lsls	r0, r0, #16
 8000972:	4301      	orrs	r1, r0
 8000974:	2a95      	cmp	r2, #149	; 0x95
 8000976:	dc07      	bgt.n	8000988 <__aeabi_f2iz+0x34>
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	40d1      	lsrs	r1, r2
 800097e:	4248      	negs	r0, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <__aeabi_f2iz+0x18>
 8000984:	0008      	movs	r0, r1
 8000986:	e7f1      	b.n	800096c <__aeabi_f2iz+0x18>
 8000988:	3a96      	subs	r2, #150	; 0x96
 800098a:	4091      	lsls	r1, r2
 800098c:	e7f7      	b.n	800097e <__aeabi_f2iz+0x2a>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	7fffffff 	.word	0x7fffffff

08000994 <__aeabi_i2f>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2800      	cmp	r0, #0
 8000998:	d013      	beq.n	80009c2 <__aeabi_i2f+0x2e>
 800099a:	17c3      	asrs	r3, r0, #31
 800099c:	18c5      	adds	r5, r0, r3
 800099e:	405d      	eors	r5, r3
 80009a0:	0fc4      	lsrs	r4, r0, #31
 80009a2:	0028      	movs	r0, r5
 80009a4:	f000 f83c 	bl	8000a20 <__clzsi2>
 80009a8:	239e      	movs	r3, #158	; 0x9e
 80009aa:	0001      	movs	r1, r0
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2b96      	cmp	r3, #150	; 0x96
 80009b0:	dc0f      	bgt.n	80009d2 <__aeabi_i2f+0x3e>
 80009b2:	2808      	cmp	r0, #8
 80009b4:	dd01      	ble.n	80009ba <__aeabi_i2f+0x26>
 80009b6:	3908      	subs	r1, #8
 80009b8:	408d      	lsls	r5, r1
 80009ba:	026d      	lsls	r5, r5, #9
 80009bc:	0a6d      	lsrs	r5, r5, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e002      	b.n	80009c8 <__aeabi_i2f+0x34>
 80009c2:	2400      	movs	r4, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	2500      	movs	r5, #0
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4328      	orrs	r0, r5
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
 80009d2:	2b99      	cmp	r3, #153	; 0x99
 80009d4:	dd0b      	ble.n	80009ee <__aeabi_i2f+0x5a>
 80009d6:	2205      	movs	r2, #5
 80009d8:	002e      	movs	r6, r5
 80009da:	1a12      	subs	r2, r2, r0
 80009dc:	40d6      	lsrs	r6, r2
 80009de:	0002      	movs	r2, r0
 80009e0:	321b      	adds	r2, #27
 80009e2:	4095      	lsls	r5, r2
 80009e4:	0028      	movs	r0, r5
 80009e6:	1e45      	subs	r5, r0, #1
 80009e8:	41a8      	sbcs	r0, r5
 80009ea:	0035      	movs	r5, r6
 80009ec:	4305      	orrs	r5, r0
 80009ee:	2905      	cmp	r1, #5
 80009f0:	dd01      	ble.n	80009f6 <__aeabi_i2f+0x62>
 80009f2:	1f4a      	subs	r2, r1, #5
 80009f4:	4095      	lsls	r5, r2
 80009f6:	002a      	movs	r2, r5
 80009f8:	4e08      	ldr	r6, [pc, #32]	; (8000a1c <__aeabi_i2f+0x88>)
 80009fa:	4032      	ands	r2, r6
 80009fc:	0768      	lsls	r0, r5, #29
 80009fe:	d009      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a00:	200f      	movs	r0, #15
 8000a02:	4028      	ands	r0, r5
 8000a04:	2804      	cmp	r0, #4
 8000a06:	d005      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a08:	3204      	adds	r2, #4
 8000a0a:	0150      	lsls	r0, r2, #5
 8000a0c:	d502      	bpl.n	8000a14 <__aeabi_i2f+0x80>
 8000a0e:	239f      	movs	r3, #159	; 0x9f
 8000a10:	4032      	ands	r2, r6
 8000a12:	1a5b      	subs	r3, r3, r1
 8000a14:	0192      	lsls	r2, r2, #6
 8000a16:	0a55      	lsrs	r5, r2, #9
 8000a18:	b2d8      	uxtb	r0, r3
 8000a1a:	e7d5      	b.n	80009c8 <__aeabi_i2f+0x34>
 8000a1c:	fbffffff 	.word	0xfbffffff

08000a20 <__clzsi2>:
 8000a20:	211c      	movs	r1, #28
 8000a22:	2301      	movs	r3, #1
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d301      	bcc.n	8000a2e <__clzsi2+0xe>
 8000a2a:	0c00      	lsrs	r0, r0, #16
 8000a2c:	3910      	subs	r1, #16
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	4298      	cmp	r0, r3
 8000a32:	d301      	bcc.n	8000a38 <__clzsi2+0x18>
 8000a34:	0a00      	lsrs	r0, r0, #8
 8000a36:	3908      	subs	r1, #8
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d301      	bcc.n	8000a42 <__clzsi2+0x22>
 8000a3e:	0900      	lsrs	r0, r0, #4
 8000a40:	3904      	subs	r1, #4
 8000a42:	a202      	add	r2, pc, #8	; (adr r2, 8000a4c <__clzsi2+0x2c>)
 8000a44:	5c10      	ldrb	r0, [r2, r0]
 8000a46:	1840      	adds	r0, r0, r1
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	02020304 	.word	0x02020304
 8000a50:	01010101 	.word	0x01010101
	...

08000a5c <__clzdi2>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d103      	bne.n	8000a6a <__clzdi2+0xe>
 8000a62:	f7ff ffdd 	bl	8000a20 <__clzsi2>
 8000a66:	3020      	adds	r0, #32
 8000a68:	e002      	b.n	8000a70 <__clzdi2+0x14>
 8000a6a:	1c08      	adds	r0, r1, #0
 8000a6c:	f7ff ffd8 	bl	8000a20 <__clzsi2>
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2308      	movs	r3, #8
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f005 fabc 	bl	8006000 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_ADC_Init+0xc4>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	05d2      	lsls	r2, r2, #23
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000acc:	22c2      	movs	r2, #194	; 0xc2
 8000ace:	32ff      	adds	r2, #255	; 0xff
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ad4:	222c      	movs	r2, #44	; 0x2c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fc24 	bl	8002348 <HAL_ADC_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000b04:	f001 f92a 	bl	8001d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MX_ADC_Init+0xc8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0152      	lsls	r2, r2, #5
 8000b14:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b16:	003a      	movs	r2, r7
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 fd87 	bl	8002630 <HAL_ADC_ConfigChannel>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000b26:	f001 f919 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	200000b0 	.word	0x200000b0
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	20000100 	.word	0x20000100

08000b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f005 fa54 	bl	8006000 <memset>
  if(adcHandle->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <HAL_ADC_MspInit+0xc4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d14c      	bne.n	8000bfc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <HAL_ADC_MspInit+0xc8>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <HAL_ADC_MspInit+0xc8>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0089      	lsls	r1, r1, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <HAL_ADC_MspInit+0xc8>)
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_ADC_MspInit+0xc8>)
 8000b76:	2102      	movs	r1, #2
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_ADC_MspInit+0xc8>)
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2202      	movs	r2, #2
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2203      	movs	r2, #3
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f002 f8a7 	bl	8002cf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000ba8:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <HAL_ADC_MspInit+0xd4>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 ff60 	bl	8002aa8 <HAL_DMA_Init>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000bec:	f001 f8b6 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bf4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b009      	add	sp, #36	; 0x24
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40012400 	.word	0x40012400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	50000400 	.word	0x50000400
 8000c10:	20000068 	.word	0x20000068
 8000c14:	40020008 	.word	0x40020008

08000c18 <BLE_Init>:
char name[10] = "S-,RevEx\r\n";
char reboot[5] = "R,1\r\n";
char MLDP[3] = "I\r\n";

void BLE_Init()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000c1c:	f001 fa30 	bl	8002080 <MX_USART1_UART_Init>
	HAL_Delay(2000);
 8000c20:	23fa      	movs	r3, #250	; 0xfa
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 fb6b 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000c2a:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <BLE_Init+0x9c>)
 8000c2c:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <BLE_Init+0xa0>)
 8000c2e:	230a      	movs	r3, #10
 8000c30:	2205      	movs	r2, #5
 8000c32:	f004 fcb9 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c36:	23fa      	movs	r3, #250	; 0xfa
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 fb60 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset, 6, 10);
 8000c40:	491e      	ldr	r1, [pc, #120]	; (8000cbc <BLE_Init+0xa4>)
 8000c42:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <BLE_Init+0xa0>)
 8000c44:	230a      	movs	r3, #10
 8000c46:	2206      	movs	r2, #6
 8000c48:	f004 fcae 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c4c:	23fa      	movs	r3, #250	; 0xfa
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 fb55 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000c56:	4917      	ldr	r1, [pc, #92]	; (8000cb4 <BLE_Init+0x9c>)
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <BLE_Init+0xa0>)
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	f004 fca3 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c62:	23fa      	movs	r3, #250	; 0xfa
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fb4a 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config, 13, 10);
 8000c6c:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <BLE_Init+0xa8>)
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <BLE_Init+0xa0>)
 8000c70:	230a      	movs	r3, #10
 8000c72:	220d      	movs	r2, #13
 8000c74:	f004 fc98 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c78:	23fa      	movs	r3, #250	; 0xfa
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 fb3f 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)name, 10, 10);
 8000c82:	4910      	ldr	r1, [pc, #64]	; (8000cc4 <BLE_Init+0xac>)
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <BLE_Init+0xa0>)
 8000c86:	230a      	movs	r3, #10
 8000c88:	220a      	movs	r2, #10
 8000c8a:	f004 fc8d 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fb34 	bl	8002300 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <BLE_Init+0x9c>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <BLE_Init+0xa0>)
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	f004 fc82 	bl	80055a8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000ca4:	23fa      	movs	r3, #250	; 0xfa
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fb29 	bl	8002300 <HAL_Delay>
	//HAL_UART_Transmit(&huart1, (uint8_t*)MLDP, 3, 10);
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000024 	.word	0x20000024
 8000cb8:	200001b0 	.word	0x200001b0
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000018 	.word	0x20000018

08000cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_DMA_Init+0x38>)
 8000cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_DMA_Init+0x38>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_DMA_Init+0x38>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2009      	movs	r0, #9
 8000cec:	f001 feaa 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cf0:	2009      	movs	r0, #9
 8000cf2:	f001 febc 	bl	8002a6e <HAL_NVIC_EnableIRQ>

}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	240c      	movs	r4, #12
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2314      	movs	r3, #20
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f005 f973 	bl	8006000 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	430a      	orrs	r2, r1
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d38:	2102      	movs	r1, #2
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x88>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	2202      	movs	r2, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|CS_Pin, GPIO_PIN_RESET);
 8000d4a:	2381      	movs	r3, #129	; 0x81
 8000d4c:	0219      	lsls	r1, r3, #8
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	2200      	movs	r2, #0
 8000d54:	0018      	movs	r0, r3
 8000d56:	f002 f943 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|CS_Pin;
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2281      	movs	r2, #129	; 0x81
 8000d5e:	0212      	lsls	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2201      	movs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	193a      	adds	r2, r7, r4
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 ffb9 	bl	8002cf4 <HAL_GPIO_Init>

}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b009      	add	sp, #36	; 0x24
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <icm20948_gyro_read_raw>:
static uint8_t  read_single_ak09916_reg(uint8_t reg);
static void     write_single_ak09916_reg(uint8_t reg, uint8_t val);
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);

void icm20948_gyro_read_raw(uint8_t *** data)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	**data = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681c      	ldr	r4, [r3, #0]
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	2133      	movs	r1, #51	; 0x33
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 fdcd 	bl	8001940 <read_multiple_icm20948_reg>
 8000da6:	0003      	movs	r3, r0
 8000da8:	6023      	str	r3, [r4, #0]
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b003      	add	sp, #12
 8000db0:	bd90      	pop	{r4, r7, pc}

08000db2 <icm20948_accel_read_raw>:

void icm20948_accel_read_raw(uint8_t *** data)
{
 8000db2:	b590      	push	{r4, r7, lr}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	**data = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681c      	ldr	r4, [r3, #0]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	212d      	movs	r1, #45	; 0x2d
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 fdbc 	bl	8001940 <read_multiple_icm20948_reg>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	6023      	str	r3, [r4, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b003      	add	sp, #12
 8000dd2:	bd90      	pop	{r4, r7, pc}

08000dd4 <ak09916_mag_read_raw>:

bool ak09916_mag_read_raw(uint8_t *** data)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f000 fe1d 	bl	8001a1c <read_single_ak09916_reg>
 8000de2:	0003      	movs	r3, r0
 8000de4:	0019      	movs	r1, r3
 8000de6:	200f      	movs	r0, #15
 8000de8:	183b      	adds	r3, r7, r0
 8000dea:	2201      	movs	r2, #1
 8000dec:	400a      	ands	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
	if(!drdy)	return false;
 8000df0:	183b      	adds	r3, r7, r0
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <ak09916_mag_read_raw+0x28>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e018      	b.n	8000e2e <ak09916_mag_read_raw+0x5a>

	**data = read_multiple_ak09916_reg(MAG_HXL, 6);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681c      	ldr	r4, [r3, #0]
 8000e00:	2106      	movs	r1, #6
 8000e02:	2011      	movs	r0, #17
 8000e04:	f000 fe52 	bl	8001aac <read_multiple_ak09916_reg>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	6023      	str	r3, [r4, #0]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8000e0c:	2018      	movs	r0, #24
 8000e0e:	f000 fe05 	bl	8001a1c <read_single_ak09916_reg>
 8000e12:	0003      	movs	r3, r0
 8000e14:	0019      	movs	r1, r3
 8000e16:	200e      	movs	r0, #14
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]
	if(hofl)	return false;
 8000e20:	183b      	adds	r3, r7, r0
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <ak09916_mag_read_raw+0x58>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e000      	b.n	8000e2e <ak09916_mag_read_raw+0x5a>

	return true;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b005      	add	sp, #20
 8000e34:	bd90      	pop	{r4, r7, pc}

08000e36 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000e3e:	2206      	movs	r2, #6
 8000e40:	2133      	movs	r1, #51	; 0x33
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 fd7c 	bl	8001940 <read_multiple_icm20948_reg>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fd97 	bl	8000994 <__aeabi_i2f>
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fd86 	bl	8000994 <__aeabi_i2f>
 8000e88:	1c02      	adds	r2, r0, #0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3304      	adds	r3, #4
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3305      	adds	r3, #5
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fd75 	bl	8000994 <__aeabi_i2f>
 8000eaa:	1c02      	adds	r2, r0, #0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	212d      	movs	r1, #45	; 0x2d
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 fd3b 	bl	8001940 <read_multiple_icm20948_reg>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fd56 	bl	8000994 <__aeabi_i2f>
 8000ee8:	1c02      	adds	r2, r0, #0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3303      	adds	r3, #3
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff fd45 	bl	8000994 <__aeabi_i2f>
 8000f0a:	1c02      	adds	r2, r0, #0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3304      	adds	r3, #4
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3305      	adds	r3, #5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fd34 	bl	8000994 <__aeabi_i2f>
 8000f2c:	1c02      	adds	r2, r0, #0
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <icm20948_accel_read+0x94>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1c19      	adds	r1, r3, #0
 8000f34:	1c10      	adds	r0, r2, #0
 8000f36:	f7ff fb71 	bl	800061c <__aeabi_fadd>
 8000f3a:	1c03      	adds	r3, r0, #0
 8000f3c:	1c1a      	adds	r2, r3, #0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000058 	.word	0x20000058

08000f50 <icm20948_who_am_i>:
	return true;
}


bool icm20948_who_am_i()
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000f56:	1dfc      	adds	r4, r7, #7
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fc90 	bl	8001880 <read_single_icm20948_reg>
 8000f60:	0003      	movs	r3, r0
 8000f62:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2bea      	cmp	r3, #234	; 0xea
 8000f6a:	d101      	bne.n	8000f70 <icm20948_who_am_i+0x20>
		return true;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <icm20948_who_am_i+0x22>
	else
		return false;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b003      	add	sp, #12
 8000f78:	bd90      	pop	{r4, r7, pc}

08000f7a <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000f80:	1dfc      	adds	r4, r7, #7
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 fd4a 	bl	8001a1c <read_single_ak09916_reg>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d101      	bne.n	8000f98 <ak09916_who_am_i+0x1e>
		return true;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <ak09916_who_am_i+0x20>
	else
		return false;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b003      	add	sp, #12
 8000fa0:	bd90      	pop	{r4, r7, pc}

08000fa2 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000fa6:	22c1      	movs	r2, #193	; 0xc1
 8000fa8:	2106      	movs	r1, #6
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 fc9a 	bl	80018e4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 f9a5 	bl	8002300 <HAL_Delay>
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f000 fd4d 	bl	8001a62 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f001 f999 	bl	8002300 <HAL_Delay>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000fda:	1dfc      	adds	r4, r7, #7
 8000fdc:	2106      	movs	r1, #6
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 fc4e 	bl	8001880 <read_single_icm20948_reg>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	1dfa      	adds	r2, r7, #7
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2106      	movs	r1, #6
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 fc71 	bl	80018e4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f001 f97c 	bl	8002300 <HAL_Delay>
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001016:	1dfc      	adds	r4, r7, #7
 8001018:	2103      	movs	r1, #3
 800101a:	2000      	movs	r0, #0
 800101c:	f000 fc30 	bl	8001880 <read_single_icm20948_reg>
 8001020:	0003      	movs	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	1dfa      	adds	r2, r7, #7
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	2110      	movs	r1, #16
 800102c:	430a      	orrs	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	2103      	movs	r1, #3
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fc53 	bl	80018e4 <write_single_icm20948_reg>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b003      	add	sp, #12
 8001044:	bd90      	pop	{r4, r7, pc}

08001046 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800104c:	1dfc      	adds	r4, r7, #7
 800104e:	2103      	movs	r1, #3
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fc15 	bl	8001880 <read_single_icm20948_reg>
 8001056:	0003      	movs	r3, r0
 8001058:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	1dfa      	adds	r2, r7, #7
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	2102      	movs	r1, #2
 8001062:	430a      	orrs	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	001a      	movs	r2, r3
 800106c:	2103      	movs	r1, #3
 800106e:	2000      	movs	r0, #0
 8001070:	f000 fc38 	bl	80018e4 <write_single_icm20948_reg>
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001082:	1dfc      	adds	r4, r7, #7
 8001084:	2103      	movs	r1, #3
 8001086:	2000      	movs	r0, #0
 8001088:	f000 fbfa 	bl	8001880 <read_single_icm20948_reg>
 800108c:	0003      	movs	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	1dfa      	adds	r2, r7, #7
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	2120      	movs	r1, #32
 8001098:	430a      	orrs	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	2103      	movs	r1, #3
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 fc1d 	bl	80018e4 <write_single_icm20948_reg>
	HAL_Delay(100);
 80010aa:	2064      	movs	r0, #100	; 0x64
 80010ac:	f001 f928 	bl	8002300 <HAL_Delay>
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b003      	add	sp, #12
 80010b6:	bd90      	pop	{r4, r7, pc}

080010b8 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80010c4:	250f      	movs	r5, #15
 80010c6:	197c      	adds	r4, r7, r5
 80010c8:	2101      	movs	r1, #1
 80010ca:	2030      	movs	r0, #48	; 0x30
 80010cc:	f000 fbd8 	bl	8001880 <read_single_icm20948_reg>
 80010d0:	0003      	movs	r3, r0
 80010d2:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 80010d4:	0028      	movs	r0, r5
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	1839      	adds	r1, r7, r0
 80010da:	1dfa      	adds	r2, r7, #7
 80010dc:	7809      	ldrb	r1, [r1, #0]
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	2101      	movs	r1, #1
 80010ec:	2030      	movs	r0, #48	; 0x30
 80010ee:	f000 fbf9 	bl	80018e4 <write_single_icm20948_reg>
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}

080010fa <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80010fa:	b5b0      	push	{r4, r5, r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	0002      	movs	r2, r0
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001106:	250f      	movs	r5, #15
 8001108:	197c      	adds	r4, r7, r5
 800110a:	2106      	movs	r1, #6
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fbb7 	bl	8001880 <read_single_icm20948_reg>
 8001112:	0003      	movs	r3, r0
 8001114:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8001116:	0028      	movs	r0, r5
 8001118:	183b      	adds	r3, r7, r0
 800111a:	1839      	adds	r1, r7, r0
 800111c:	1dfa      	adds	r2, r7, #7
 800111e:	7809      	ldrb	r1, [r1, #0]
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001126:	183b      	adds	r3, r7, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	001a      	movs	r2, r3
 800112c:	2106      	movs	r1, #6
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fbd8 	bl	80018e4 <write_single_icm20948_reg>
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001140:	2201      	movs	r2, #1
 8001142:	2109      	movs	r1, #9
 8001144:	2020      	movs	r0, #32
 8001146:	f000 fbcd 	bl	80018e4 <write_single_icm20948_reg>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	0002      	movs	r2, r0
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800115c:	250f      	movs	r5, #15
 800115e:	197c      	adds	r4, r7, r5
 8001160:	2101      	movs	r1, #1
 8001162:	2020      	movs	r0, #32
 8001164:	f000 fb8c 	bl	8001880 <read_single_icm20948_reg>
 8001168:	0003      	movs	r3, r0
 800116a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b25a      	sxtb	r2, r3
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	197b      	adds	r3, r7, r5
 8001180:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001182:	197b      	adds	r3, r7, r5
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001a      	movs	r2, r3
 8001188:	2101      	movs	r1, #1
 800118a:	2020      	movs	r0, #32
 800118c:	f000 fbaa 	bl	80018e4 <write_single_icm20948_reg>
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b004      	add	sp, #16
 8001196:	bdb0      	pop	{r4, r5, r7, pc}

08001198 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	0002      	movs	r2, r0
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80011a4:	250f      	movs	r5, #15
 80011a6:	197c      	adds	r4, r7, r5
 80011a8:	2114      	movs	r1, #20
 80011aa:	2020      	movs	r0, #32
 80011ac:	f000 fb68 	bl	8001880 <read_single_icm20948_reg>
 80011b0:	0003      	movs	r3, r0
 80011b2:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	197b      	adds	r3, r7, r5
 80011c8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80011ca:	197b      	adds	r3, r7, r5
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	2101      	movs	r1, #1
 80011d2:	2020      	movs	r0, #32
 80011d4:	f000 fb86 	bl	80018e4 <write_single_icm20948_reg>
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bdb0      	pop	{r4, r5, r7, pc}

080011e0 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	2020      	movs	r0, #32
 80011f6:	f000 fb75 	bl	80018e4 <write_single_icm20948_reg>
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	0002      	movs	r2, r0
 800120a:	1dbb      	adds	r3, r7, #6
 800120c:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29a      	uxth	r2, r3
 8001216:	200f      	movs	r0, #15
 8001218:	183b      	adds	r3, r7, r0
 800121a:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	240e      	movs	r4, #14
 8001224:	193b      	adds	r3, r7, r4
 8001226:	210f      	movs	r1, #15
 8001228:	400a      	ands	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800122c:	183b      	adds	r3, r7, r0
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	2110      	movs	r1, #16
 8001234:	2020      	movs	r0, #32
 8001236:	f000 fb55 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800123a:	193b      	adds	r3, r7, r4
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001a      	movs	r2, r3
 8001240:	2111      	movs	r1, #17
 8001242:	2020      	movs	r0, #32
 8001244:	f000 fb4e 	bl	80018e4 <write_single_icm20948_reg>
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b005      	add	sp, #20
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	0002      	movs	r2, r0
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	0019      	movs	r1, r3
 8001262:	2031      	movs	r0, #49	; 0x31
 8001264:	f000 fbfd 	bl	8001a62 <write_single_ak09916_reg>
	HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f001 f849 	bl	8002300 <HAL_Delay>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}

08001276 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8001276:	b5b0      	push	{r4, r5, r7, lr}
 8001278:	b08a      	sub	sp, #40	; 0x28
 800127a:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 800127c:	230c      	movs	r3, #12
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	0018      	movs	r0, r3
 8001282:	230c      	movs	r3, #12
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f004 feba 	bl	8006000 <memset>
	uint8_t gyro_offset[6] = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	e041      	b.n	8001320 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 800129c:	2518      	movs	r5, #24
 800129e:	197b      	adds	r3, r7, r5
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fdc8 	bl	8000e36 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80012a6:	240c      	movs	r4, #12
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff fb71 	bl	8000994 <__aeabi_i2f>
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	197b      	adds	r3, r7, r5
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1c19      	adds	r1, r3, #0
 80012ba:	1c10      	adds	r0, r2, #0
 80012bc:	f7ff f9ae 	bl	800061c <__aeabi_fadd>
 80012c0:	1c03      	adds	r3, r0, #0
 80012c2:	1c18      	adds	r0, r3, #0
 80012c4:	f7ff fb46 	bl	8000954 <__aeabi_f2iz>
 80012c8:	0002      	movs	r2, r0
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fb5e 	bl	8000994 <__aeabi_i2f>
 80012d8:	1c02      	adds	r2, r0, #0
 80012da:	197b      	adds	r3, r7, r5
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	1c19      	adds	r1, r3, #0
 80012e0:	1c10      	adds	r0, r2, #0
 80012e2:	f7ff f99b 	bl	800061c <__aeabi_fadd>
 80012e6:	1c03      	adds	r3, r0, #0
 80012e8:	1c18      	adds	r0, r3, #0
 80012ea:	f7ff fb33 	bl	8000954 <__aeabi_f2iz>
 80012ee:	0002      	movs	r2, r0
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fb4b 	bl	8000994 <__aeabi_i2f>
 80012fe:	1c02      	adds	r2, r0, #0
 8001300:	197b      	adds	r3, r7, r5
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	1c19      	adds	r1, r3, #0
 8001306:	1c10      	adds	r0, r2, #0
 8001308:	f7ff f988 	bl	800061c <__aeabi_fadd>
 800130c:	1c03      	adds	r3, r0, #0
 800130e:	1c18      	adds	r0, r3, #0
 8001310:	f7ff fb20 	bl	8000954 <__aeabi_f2iz>
 8001314:	0002      	movs	r2, r0
 8001316:	193b      	adds	r3, r7, r4
 8001318:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b63      	cmp	r3, #99	; 0x63
 8001324:	ddba      	ble.n	800129c <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 8001326:	240c      	movs	r4, #12
 8001328:	193b      	adds	r3, r7, r4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2164      	movs	r1, #100	; 0x64
 800132e:	0018      	movs	r0, r3
 8001330:	f7fe ff74 	bl	800021c <__divsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	193b      	adds	r3, r7, r4
 800133a:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2164      	movs	r1, #100	; 0x64
 8001342:	0018      	movs	r0, r3
 8001344:	f7fe ff6a 	bl	800021c <__divsi3>
 8001348:	0003      	movs	r3, r0
 800134a:	001a      	movs	r2, r3
 800134c:	193b      	adds	r3, r7, r4
 800134e:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2164      	movs	r1, #100	; 0x64
 8001356:	0018      	movs	r0, r3
 8001358:	f7fe ff60 	bl	800021c <__divsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	001a      	movs	r2, r3
 8001360:	193b      	adds	r3, r7, r4
 8001362:	609a      	str	r2, [r3, #8]

	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	425b      	negs	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	da00      	bge.n	8001370 <icm20948_gyro_calibration+0xfa>
 800136e:	3303      	adds	r3, #3
 8001370:	109b      	asrs	r3, r3, #2
 8001372:	121b      	asrs	r3, r3, #8
 8001374:	b2da      	uxtb	r2, r3
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 800137a:	230c      	movs	r3, #12
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	425b      	negs	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <icm20948_gyro_calibration+0x112>
 8001386:	3303      	adds	r3, #3
 8001388:	109b      	asrs	r3, r3, #2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001390:	230c      	movs	r3, #12
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	425b      	negs	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	da00      	bge.n	800139e <icm20948_gyro_calibration+0x128>
 800139c:	3303      	adds	r3, #3
 800139e:	109b      	asrs	r3, r3, #2
 80013a0:	121b      	asrs	r3, r3, #8
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80013a8:	230c      	movs	r3, #12
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	425b      	negs	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da00      	bge.n	80013b6 <icm20948_gyro_calibration+0x140>
 80013b4:	3303      	adds	r3, #3
 80013b6:	109b      	asrs	r3, r3, #2
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80013be:	230c      	movs	r3, #12
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	425b      	negs	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <icm20948_gyro_calibration+0x156>
 80013ca:	3303      	adds	r3, #3
 80013cc:	109b      	asrs	r3, r3, #2
 80013ce:	121b      	asrs	r3, r3, #8
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80013d6:	230c      	movs	r3, #12
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	425b      	negs	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da00      	bge.n	80013e4 <icm20948_gyro_calibration+0x16e>
 80013e2:	3303      	adds	r3, #3
 80013e4:	109b      	asrs	r3, r3, #2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80013ec:	1d3a      	adds	r2, r7, #4
 80013ee:	2306      	movs	r3, #6
 80013f0:	2103      	movs	r1, #3
 80013f2:	2020      	movs	r0, #32
 80013f4:	f000 fade 	bl	80019b4 <write_multiple_icm20948_reg>
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b00a      	add	sp, #40	; 0x28
 80013fe:	bdb0      	pop	{r4, r5, r7, pc}

08001400 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b090      	sub	sp, #64	; 0x40
 8001404:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8001406:	2318      	movs	r3, #24
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	0018      	movs	r0, r3
 800140c:	230c      	movs	r3, #12
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f004 fdf5 	bl	8006000 <memset>
	int32_t accel_bias_reg[3] = {0};
 8001416:	230c      	movs	r3, #12
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	0018      	movs	r0, r3
 800141c:	230c      	movs	r3, #12
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f004 fded 	bl	8006000 <memset>
	uint8_t accel_offset[6] = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001434:	e041      	b.n	80014ba <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 8001436:	2524      	movs	r5, #36	; 0x24
 8001438:	197b      	adds	r3, r7, r5
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fd3c 	bl	8000eb8 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001440:	2418      	movs	r4, #24
 8001442:	193b      	adds	r3, r7, r4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff faa4 	bl	8000994 <__aeabi_i2f>
 800144c:	1c02      	adds	r2, r0, #0
 800144e:	197b      	adds	r3, r7, r5
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c19      	adds	r1, r3, #0
 8001454:	1c10      	adds	r0, r2, #0
 8001456:	f7ff f8e1 	bl	800061c <__aeabi_fadd>
 800145a:	1c03      	adds	r3, r0, #0
 800145c:	1c18      	adds	r0, r3, #0
 800145e:	f7ff fa79 	bl	8000954 <__aeabi_f2iz>
 8001462:	0002      	movs	r2, r0
 8001464:	193b      	adds	r3, r7, r4
 8001466:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8001468:	193b      	adds	r3, r7, r4
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff fa91 	bl	8000994 <__aeabi_i2f>
 8001472:	1c02      	adds	r2, r0, #0
 8001474:	197b      	adds	r3, r7, r5
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	1c19      	adds	r1, r3, #0
 800147a:	1c10      	adds	r0, r2, #0
 800147c:	f7ff f8ce 	bl	800061c <__aeabi_fadd>
 8001480:	1c03      	adds	r3, r0, #0
 8001482:	1c18      	adds	r0, r3, #0
 8001484:	f7ff fa66 	bl	8000954 <__aeabi_f2iz>
 8001488:	0002      	movs	r2, r0
 800148a:	193b      	adds	r3, r7, r4
 800148c:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fa7e 	bl	8000994 <__aeabi_i2f>
 8001498:	1c02      	adds	r2, r0, #0
 800149a:	197b      	adds	r3, r7, r5
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	1c19      	adds	r1, r3, #0
 80014a0:	1c10      	adds	r0, r2, #0
 80014a2:	f7ff f8bb 	bl	800061c <__aeabi_fadd>
 80014a6:	1c03      	adds	r3, r0, #0
 80014a8:	1c18      	adds	r0, r3, #0
 80014aa:	f7ff fa53 	bl	8000954 <__aeabi_f2iz>
 80014ae:	0002      	movs	r2, r0
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80014b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b6:	3301      	adds	r3, #1
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014bc:	2b63      	cmp	r3, #99	; 0x63
 80014be:	ddba      	ble.n	8001436 <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 80014c0:	2418      	movs	r4, #24
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2164      	movs	r1, #100	; 0x64
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7fe fea7 	bl	800021c <__divsi3>
 80014ce:	0003      	movs	r3, r0
 80014d0:	001a      	movs	r2, r3
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2164      	movs	r1, #100	; 0x64
 80014dc:	0018      	movs	r0, r3
 80014de:	f7fe fe9d 	bl	800021c <__divsi3>
 80014e2:	0003      	movs	r3, r0
 80014e4:	001a      	movs	r2, r3
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2164      	movs	r1, #100	; 0x64
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7fe fe93 	bl	800021c <__divsi3>
 80014f6:	0003      	movs	r3, r0
 80014f8:	001a      	movs	r2, r3
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80014fe:	003b      	movs	r3, r7
 8001500:	4a68      	ldr	r2, [pc, #416]	; (80016a4 <icm20948_accel_calibration+0x2a4>)
 8001502:	8811      	ldrh	r1, [r2, #0]
 8001504:	8019      	strh	r1, [r3, #0]
 8001506:	7892      	ldrb	r2, [r2, #2]
 8001508:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800150a:	2202      	movs	r2, #2
 800150c:	2114      	movs	r1, #20
 800150e:	2010      	movs	r0, #16
 8001510:	f000 fa16 	bl	8001940 <read_multiple_icm20948_reg>
 8001514:	0003      	movs	r3, r0
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001520:	3201      	adds	r2, #1
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	431a      	orrs	r2, r3
 8001526:	250c      	movs	r5, #12
 8001528:	197b      	adds	r3, r7, r5
 800152a:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 800152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152e:	3301      	adds	r3, #1
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	b2da      	uxtb	r2, r3
 8001538:	003b      	movs	r3, r7
 800153a:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 800153c:	2202      	movs	r2, #2
 800153e:	2117      	movs	r1, #23
 8001540:	2010      	movs	r0, #16
 8001542:	f000 f9fd 	bl	8001940 <read_multiple_icm20948_reg>
 8001546:	0003      	movs	r3, r0
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001552:	3201      	adds	r2, #1
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	197b      	adds	r3, r7, r5
 800155a:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	3301      	adds	r3, #1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4013      	ands	r3, r2
 8001566:	b2da      	uxtb	r2, r3
 8001568:	003b      	movs	r3, r7
 800156a:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800156c:	2202      	movs	r2, #2
 800156e:	211a      	movs	r1, #26
 8001570:	2010      	movs	r0, #16
 8001572:	f000 f9e5 	bl	8001940 <read_multiple_icm20948_reg>
 8001576:	0003      	movs	r3, r0
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 800157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001582:	3201      	adds	r2, #1
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	197b      	adds	r3, r7, r5
 800158a:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	3301      	adds	r3, #1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	b2da      	uxtb	r2, r3
 8001598:	003b      	movs	r3, r7
 800159a:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 800159c:	197b      	adds	r3, r7, r5
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <icm20948_accel_calibration+0x1aa>
 80015a8:	3307      	adds	r3, #7
 80015aa:	10db      	asrs	r3, r3, #3
 80015ac:	425b      	negs	r3, r3
 80015ae:	18d2      	adds	r2, r2, r3
 80015b0:	210c      	movs	r1, #12
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2318      	movs	r3, #24
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da00      	bge.n	80015c6 <icm20948_accel_calibration+0x1c6>
 80015c4:	3307      	adds	r3, #7
 80015c6:	10db      	asrs	r3, r3, #3
 80015c8:	425b      	negs	r3, r3
 80015ca:	18d2      	adds	r2, r2, r3
 80015cc:	210c      	movs	r1, #12
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	2318      	movs	r3, #24
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <icm20948_accel_calibration+0x1e2>
 80015e0:	3307      	adds	r3, #7
 80015e2:	10db      	asrs	r3, r3, #3
 80015e4:	425b      	negs	r3, r3
 80015e6:	18d2      	adds	r2, r2, r3
 80015e8:	210c      	movs	r1, #12
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	121b      	asrs	r3, r3, #8
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2201      	movs	r2, #1
 8001602:	4393      	bics	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	785a      	ldrb	r2, [r3, #1]
 800160e:	003b      	movs	r3, r7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	121b      	asrs	r3, r3, #8
 8001620:	b2da      	uxtb	r2, r3
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2201      	movs	r2, #1
 800162e:	4393      	bics	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	78da      	ldrb	r2, [r3, #3]
 800163a:	003b      	movs	r3, r7
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	4313      	orrs	r3, r2
 8001640:	b2da      	uxtb	r2, r3
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	b2da      	uxtb	r2, r3
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2201      	movs	r2, #1
 800165a:	4393      	bics	r3, r2
 800165c:	b2da      	uxtb	r2, r3
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	795a      	ldrb	r2, [r3, #5]
 8001666:	003b      	movs	r3, r7
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	4313      	orrs	r3, r2
 800166c:	b2da      	uxtb	r2, r3
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	2302      	movs	r3, #2
 8001676:	2114      	movs	r1, #20
 8001678:	2010      	movs	r0, #16
 800167a:	f000 f99b 	bl	80019b4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	1c9a      	adds	r2, r3, #2
 8001682:	2302      	movs	r3, #2
 8001684:	2117      	movs	r1, #23
 8001686:	2010      	movs	r0, #16
 8001688:	f000 f994 	bl	80019b4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	2302      	movs	r3, #2
 8001692:	211a      	movs	r1, #26
 8001694:	2010      	movs	r0, #16
 8001696:	f000 f98d 	bl	80019b4 <write_multiple_icm20948_reg>
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b010      	add	sp, #64	; 0x40
 80016a0:	bdb0      	pop	{r4, r5, r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	08006028 	.word	0x08006028

080016a8 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	0002      	movs	r2, r0
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fc      	adds	r4, r7, r3
 80016b8:	2101      	movs	r1, #1
 80016ba:	2020      	movs	r0, #32
 80016bc:	f000 f8e0 	bl	8001880 <read_single_icm20948_reg>
 80016c0:	0003      	movs	r3, r0
 80016c2:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d027      	beq.n	800171c <icm20948_gyro_full_scale_select+0x74>
 80016cc:	dc31      	bgt.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d019      	beq.n	8001706 <icm20948_gyro_full_scale_select+0x5e>
 80016d2:	dc2e      	bgt.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <icm20948_gyro_full_scale_select+0x36>
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d009      	beq.n	80016f0 <icm20948_gyro_full_scale_select+0x48>
 80016dc:	e029      	b.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 80016de:	220f      	movs	r2, #15
 80016e0:	18bb      	adds	r3, r7, r2
 80016e2:	18ba      	adds	r2, r7, r2
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <icm20948_gyro_full_scale_select+0xa4>)
 80016ea:	4a19      	ldr	r2, [pc, #100]	; (8001750 <icm20948_gyro_full_scale_select+0xa8>)
 80016ec:	601a      	str	r2, [r3, #0]
			break;
 80016ee:	e020      	b.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 80016f0:	220f      	movs	r2, #15
 80016f2:	18bb      	adds	r3, r7, r2
 80016f4:	18ba      	adds	r2, r7, r2
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	2102      	movs	r1, #2
 80016fa:	430a      	orrs	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <icm20948_gyro_full_scale_select+0xa4>)
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <icm20948_gyro_full_scale_select+0xac>)
 8001702:	601a      	str	r2, [r3, #0]
			break;
 8001704:	e015      	b.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 8001706:	220f      	movs	r2, #15
 8001708:	18bb      	adds	r3, r7, r2
 800170a:	18ba      	adds	r2, r7, r2
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	2104      	movs	r1, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <icm20948_gyro_full_scale_select+0xa4>)
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <icm20948_gyro_full_scale_select+0xb0>)
 8001718:	601a      	str	r2, [r3, #0]
			break;
 800171a:	e00a      	b.n	8001732 <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 800171c:	220f      	movs	r2, #15
 800171e:	18bb      	adds	r3, r7, r2
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	2106      	movs	r1, #6
 8001726:	430a      	orrs	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <icm20948_gyro_full_scale_select+0xa4>)
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <icm20948_gyro_full_scale_select+0xb4>)
 800172e:	601a      	str	r2, [r3, #0]
			break;
 8001730:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001732:	230f      	movs	r3, #15
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	001a      	movs	r2, r3
 800173a:	2101      	movs	r1, #1
 800173c:	2020      	movs	r0, #32
 800173e:	f000 f8d1 	bl	80018e4 <write_single_icm20948_reg>
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b005      	add	sp, #20
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000054 	.word	0x20000054
 8001750:	43030000 	.word	0x43030000
 8001754:	42830000 	.word	0x42830000
 8001758:	42033333 	.word	0x42033333
 800175c:	41833333 	.word	0x41833333

08001760 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	0002      	movs	r2, r0
 8001768:	1dfb      	adds	r3, r7, #7
 800176a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800176c:	230f      	movs	r3, #15
 800176e:	18fc      	adds	r4, r7, r3
 8001770:	2114      	movs	r1, #20
 8001772:	2020      	movs	r0, #32
 8001774:	f000 f884 	bl	8001880 <read_single_icm20948_reg>
 8001778:	0003      	movs	r3, r0
 800177a:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d02a      	beq.n	80017da <icm20948_accel_full_scale_select+0x7a>
 8001784:	dc35      	bgt.n	80017f2 <icm20948_accel_full_scale_select+0x92>
 8001786:	2b02      	cmp	r3, #2
 8001788:	d01b      	beq.n	80017c2 <icm20948_accel_full_scale_select+0x62>
 800178a:	dc32      	bgt.n	80017f2 <icm20948_accel_full_scale_select+0x92>
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <icm20948_accel_full_scale_select+0x36>
 8001790:	2b01      	cmp	r3, #1
 8001792:	d00a      	beq.n	80017aa <icm20948_accel_full_scale_select+0x4a>
 8001794:	e02d      	b.n	80017f2 <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 8001796:	220f      	movs	r2, #15
 8001798:	18bb      	adds	r3, r7, r2
 800179a:	18ba      	adds	r2, r7, r2
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <icm20948_accel_full_scale_select+0xac>)
 80017a2:	228d      	movs	r2, #141	; 0x8d
 80017a4:	05d2      	lsls	r2, r2, #23
 80017a6:	601a      	str	r2, [r3, #0]
			break;
 80017a8:	e023      	b.n	80017f2 <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 80017aa:	220f      	movs	r2, #15
 80017ac:	18bb      	adds	r3, r7, r2
 80017ae:	18ba      	adds	r2, r7, r2
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	2102      	movs	r1, #2
 80017b4:	430a      	orrs	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <icm20948_accel_full_scale_select+0xac>)
 80017ba:	228c      	movs	r2, #140	; 0x8c
 80017bc:	05d2      	lsls	r2, r2, #23
 80017be:	601a      	str	r2, [r3, #0]
			break;
 80017c0:	e017      	b.n	80017f2 <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 80017c2:	220f      	movs	r2, #15
 80017c4:	18bb      	adds	r3, r7, r2
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	2104      	movs	r1, #4
 80017cc:	430a      	orrs	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <icm20948_accel_full_scale_select+0xac>)
 80017d2:	228b      	movs	r2, #139	; 0x8b
 80017d4:	05d2      	lsls	r2, r2, #23
 80017d6:	601a      	str	r2, [r3, #0]
			break;
 80017d8:	e00b      	b.n	80017f2 <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 80017da:	220f      	movs	r2, #15
 80017dc:	18bb      	adds	r3, r7, r2
 80017de:	18ba      	adds	r2, r7, r2
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	2106      	movs	r1, #6
 80017e4:	430a      	orrs	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <icm20948_accel_full_scale_select+0xac>)
 80017ea:	228a      	movs	r2, #138	; 0x8a
 80017ec:	05d2      	lsls	r2, r2, #23
 80017ee:	601a      	str	r2, [r3, #0]
			break;
 80017f0:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	001a      	movs	r2, r3
 80017fa:	2114      	movs	r1, #20
 80017fc:	2020      	movs	r0, #32
 80017fe:	f000 f871 	bl	80018e4 <write_single_icm20948_reg>
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b005      	add	sp, #20
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	20000058 	.word	0x20000058

08001810 <cs_high>:


static void cs_high()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	0219      	lsls	r1, r3, #8
 8001818:	23a0      	movs	r3, #160	; 0xa0
 800181a:	05db      	lsls	r3, r3, #23
 800181c:	2201      	movs	r2, #1
 800181e:	0018      	movs	r0, r3
 8001820:	f001 fbde 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <cs_low>:

static void cs_low()
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	0219      	lsls	r1, r3, #8
 8001832:	23a0      	movs	r3, #160	; 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2200      	movs	r2, #0
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fbd1 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	0002      	movs	r2, r0
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001850:	240c      	movs	r4, #12
 8001852:	193b      	adds	r3, r7, r4
 8001854:	227f      	movs	r2, #127	; 0x7f
 8001856:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8001858:	193b      	adds	r3, r7, r4
 800185a:	1dfa      	adds	r2, r7, #7
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	705a      	strb	r2, [r3, #1]

	cs_low();
 8001860:	f7ff ffe3 	bl	800182a <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001864:	1939      	adds	r1, r7, r4
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <select_user_bank+0x38>)
 8001868:	230a      	movs	r3, #10
 800186a:	2202      	movs	r2, #2
 800186c:	f002 fbb6 	bl	8003fdc <HAL_SPI_Transmit>
	cs_high();
 8001870:	f7ff ffce 	bl	8001810 <cs_high>
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b005      	add	sp, #20
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	20000118 	.word	0x20000118

08001880 <read_single_icm20948_reg>:

uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	0002      	movs	r2, r0
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	1c0a      	adds	r2, r1, #0
 8001890:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001892:	1dbb      	adds	r3, r7, #6
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	4252      	negs	r2, r2
 800189a:	4313      	orrs	r3, r2
 800189c:	b2da      	uxtb	r2, r3
 800189e:	240f      	movs	r4, #15
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ffcb 	bl	8001844 <select_user_bank>

	cs_low();
 80018ae:	f7ff ffbc 	bl	800182a <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80018b2:	23fa      	movs	r3, #250	; 0xfa
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	1939      	adds	r1, r7, r4
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <read_single_icm20948_reg+0x60>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	f002 fb8e 	bl	8003fdc <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80018c0:	23fa      	movs	r3, #250	; 0xfa
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	240e      	movs	r4, #14
 80018c6:	1939      	adds	r1, r7, r4
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <read_single_icm20948_reg+0x60>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	f002 fcdc 	bl	8004288 <HAL_SPI_Receive>
	cs_high();
 80018d0:	f7ff ff9e 	bl	8001810 <cs_high>

	return reg_val;
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b005      	add	sp, #20
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	20000118 	.word	0x20000118

080018e4 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	0004      	movs	r4, r0
 80018ec:	0008      	movs	r0, r1
 80018ee:	0011      	movs	r1, r2
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	1c22      	adds	r2, r4, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	1dbb      	adds	r3, r7, #6
 80018f8:	1c02      	adds	r2, r0, #0
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	1d7b      	adds	r3, r7, #5
 80018fe:	1c0a      	adds	r2, r1, #0
 8001900:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001902:	240c      	movs	r4, #12
 8001904:	193b      	adds	r3, r7, r4
 8001906:	1dba      	adds	r2, r7, #6
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 800190c:	193b      	adds	r3, r7, r4
 800190e:	1d7a      	adds	r2, r7, #5
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff93 	bl	8001844 <select_user_bank>

	cs_low();
 800191e:	f7ff ff84 	bl	800182a <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001922:	23fa      	movs	r3, #250	; 0xfa
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	1939      	adds	r1, r7, r4
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <write_single_icm20948_reg+0x58>)
 800192a:	2202      	movs	r2, #2
 800192c:	f002 fb56 	bl	8003fdc <HAL_SPI_Transmit>
	cs_high();
 8001930:	f7ff ff6e 	bl	8001810 <cs_high>
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b005      	add	sp, #20
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	20000118 	.word	0x20000118

08001940 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	0004      	movs	r4, r0
 8001948:	0008      	movs	r0, r1
 800194a:	0011      	movs	r1, r2
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	1c22      	adds	r2, r4, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	1c02      	adds	r2, r0, #0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	1d7b      	adds	r3, r7, #5
 800195a:	1c0a      	adds	r2, r1, #0
 800195c:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800195e:	1dbb      	adds	r3, r7, #6
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	4252      	negs	r2, r2
 8001966:	4313      	orrs	r3, r2
 8001968:	b2da      	uxtb	r2, r3
 800196a:	240f      	movs	r4, #15
 800196c:	193b      	adds	r3, r7, r4
 800196e:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ff65 	bl	8001844 <select_user_bank>

	cs_low();
 800197a:	f7ff ff56 	bl	800182a <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800197e:	23fa      	movs	r3, #250	; 0xfa
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	1939      	adds	r1, r7, r4
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <read_multiple_icm20948_reg+0x6c>)
 8001986:	2201      	movs	r2, #1
 8001988:	f002 fb28 	bl	8003fdc <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 800198c:	1d7b      	adds	r3, r7, #5
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b29a      	uxth	r2, r3
 8001992:	23fa      	movs	r3, #250	; 0xfa
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4906      	ldr	r1, [pc, #24]	; (80019b0 <read_multiple_icm20948_reg+0x70>)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <read_multiple_icm20948_reg+0x6c>)
 800199a:	f002 fc75 	bl	8004288 <HAL_SPI_Receive>
	cs_high();
 800199e:	f7ff ff37 	bl	8001810 <cs_high>

	return reg_val;
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <read_multiple_icm20948_reg+0x70>)
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b005      	add	sp, #20
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	20000118 	.word	0x20000118
 80019b0:	2000005c 	.word	0x2000005c

080019b4 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	0004      	movs	r4, r0
 80019bc:	0008      	movs	r0, r1
 80019be:	603a      	str	r2, [r7, #0]
 80019c0:	0019      	movs	r1, r3
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	1c22      	adds	r2, r4, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	1d7b      	adds	r3, r7, #5
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 80019d4:	240f      	movs	r4, #15
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	1dba      	adds	r2, r7, #6
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff ff2e 	bl	8001844 <select_user_bank>

	cs_low();
 80019e8:	f7ff ff1f 	bl	800182a <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80019ec:	23fa      	movs	r3, #250	; 0xfa
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	1939      	adds	r1, r7, r4
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <write_multiple_icm20948_reg+0x64>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	f002 faf1 	bl	8003fdc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80019fa:	1d7b      	adds	r3, r7, #5
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	23fa      	movs	r3, #250	; 0xfa
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <write_multiple_icm20948_reg+0x64>)
 8001a08:	f002 fae8 	bl	8003fdc <HAL_SPI_Transmit>
	cs_high();
 8001a0c:	f7ff ff00 	bl	8001810 <cs_high>
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b005      	add	sp, #20
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	20000118 	.word	0x20000118

08001a1c <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	0002      	movs	r2, r0
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001a28:	228c      	movs	r2, #140	; 0x8c
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	2030      	movs	r0, #48	; 0x30
 8001a2e:	f7ff ff59 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	001a      	movs	r2, r3
 8001a38:	2104      	movs	r1, #4
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	f7ff ff52 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001a40:	2281      	movs	r2, #129	; 0x81
 8001a42:	2105      	movs	r1, #5
 8001a44:	2030      	movs	r0, #48	; 0x30
 8001a46:	f7ff ff4d 	bl	80018e4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 fc58 	bl	8002300 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001a50:	213b      	movs	r1, #59	; 0x3b
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ff14 	bl	8001880 <read_single_icm20948_reg>
 8001a58:	0003      	movs	r3, r0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	0002      	movs	r2, r0
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	1c0a      	adds	r2, r1, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001a74:	220c      	movs	r2, #12
 8001a76:	2103      	movs	r1, #3
 8001a78:	2030      	movs	r0, #48	; 0x30
 8001a7a:	f7ff ff33 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	001a      	movs	r2, r3
 8001a84:	2104      	movs	r1, #4
 8001a86:	2030      	movs	r0, #48	; 0x30
 8001a88:	f7ff ff2c 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	001a      	movs	r2, r3
 8001a92:	2106      	movs	r1, #6
 8001a94:	2030      	movs	r0, #48	; 0x30
 8001a96:	f7ff ff25 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001a9a:	2281      	movs	r2, #129	; 0x81
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2030      	movs	r0, #48	; 0x30
 8001aa0:	f7ff ff20 	bl	80018e4 <write_single_icm20948_reg>
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	1dfb      	adds	r3, r7, #7
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	1c0a      	adds	r2, r1, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001abe:	228c      	movs	r2, #140	; 0x8c
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	2030      	movs	r0, #48	; 0x30
 8001ac4:	f7ff ff0e 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	2104      	movs	r1, #4
 8001ad0:	2030      	movs	r0, #48	; 0x30
 8001ad2:	f7ff ff07 	bl	80018e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4252      	negs	r2, r2
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2030      	movs	r0, #48	; 0x30
 8001ae8:	f7ff fefc 	bl	80018e4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f000 fc07 	bl	8002300 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	001a      	movs	r2, r3
 8001af8:	213b      	movs	r1, #59	; 0x3b
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff ff20 	bl	8001940 <read_multiple_icm20948_reg>
 8001b00:	0003      	movs	r3, r0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <icm20948_init>:

static void ak09916_init();
static void icm20948_init();

void icm20948_init()
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	f7ff fa1e 	bl	8000f50 <icm20948_who_am_i>
 8001b14:	0003      	movs	r3, r0
 8001b16:	001a      	movs	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4053      	eors	r3, r2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f6      	bne.n	8001b10 <icm20948_init+0x6>

	icm20948_device_reset();
 8001b22:	f7ff fa3e 	bl	8000fa2 <icm20948_device_reset>
	icm20948_wakeup();
 8001b26:	f7ff fa55 	bl	8000fd4 <icm20948_wakeup>

	icm20948_clock_source(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fae5 	bl	80010fa <icm20948_clock_source>
	icm20948_odr_align_enable();
 8001b30:	f7ff fb04 	bl	800113c <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8001b34:	f7ff fa6c 	bl	8001010 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fb09 	bl	8001150 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fb2a 	bl	8001198 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fb4b 	bl	80011e0 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fb59 	bl	8001202 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8001b50:	f7ff fb91 	bl	8001276 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8001b54:	f7ff fc54 	bl	8001400 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f7ff fda5 	bl	80016a8 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f7ff fdfe 	bl	8001760 <icm20948_accel_full_scale_select>
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ak09916_init>:

void ak09916_init()
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8001b6e:	f7ff fa6a 	bl	8001046 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8001b72:	f7ff fa83 	bl	800107c <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8001b76:	2007      	movs	r0, #7
 8001b78:	f7ff fa9e 	bl	80010b8 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	f7ff f9fc 	bl	8000f7a <ak09916_who_am_i>
 8001b82:	0003      	movs	r3, r0
 8001b84:	001a      	movs	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	4053      	eors	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f6      	bne.n	8001b7e <ak09916_init+0x14>

	ak09916_soft_reset();
 8001b90:	f7ff fa14 	bl	8000fbc <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8001b94:	2008      	movs	r0, #8
 8001b96:	f7ff fb5b 	bl	8001250 <ak09916_operation_mode_setting>
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <IMU_Init>:

void IMU_Init()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 8001ba4:	f000 f8e0 	bl	8001d68 <MX_SPI1_Init>
	icm20948_init();
 8001ba8:	f7ff ffaf 	bl	8001b0a <icm20948_init>
	ak09916_init();
 8001bac:	f7ff ffdd 	bl	8001b6a <ak09916_init>
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <IMU_read_all_raw>:

void IMU_read_all_raw(uint8_t ** buffer1, uint8_t ** buffer2, uint8_t ** buffer3)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	while(!ak09916_mag_read_raw(&buffer3))
 8001bc4:	e004      	b.n	8001bd0 <IMU_read_all_raw+0x18>
	{
		attempt++;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <IMU_read_all_raw+0x4c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <IMU_read_all_raw+0x4c>)
 8001bce:	601a      	str	r2, [r3, #0]
	while(!ak09916_mag_read_raw(&buffer3))
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f7ff f8fe 	bl	8000dd4 <ak09916_mag_read_raw>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	001a      	movs	r2, r3
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4053      	eors	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ef      	bne.n	8001bc6 <IMU_read_all_raw+0xe>
	}
	icm20948_gyro_read_raw(&buffer1);
 8001be6:	230c      	movs	r3, #12
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff f8d0 	bl	8000d90 <icm20948_gyro_read_raw>
	icm20948_accel_read_raw(&buffer2);
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff f8dc 	bl	8000db2 <icm20948_accel_read_raw>
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000064 	.word	0x20000064

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0c:	f000 fb08 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c10:	f000 f82e 	bl	8001c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c14:	f7ff f876 	bl	8000d04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c18:	f000 f960 	bl	8001edc <MX_TIM2_Init>
  MX_ADC_Init();
 8001c1c:	f7fe ff2a 	bl	8000a74 <MX_ADC_Init>
  MX_DMA_Init();
 8001c20:	f7ff f852 	bl	8000cc8 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <main+0x50>)
 8001c26:	2104      	movs	r1, #4
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f002 ffd5 	bl	8004bd8 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <main+0x54>)
 8001c30:	2100      	movs	r1, #0
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fdbc 	bl	80027b0 <HAL_ADCEx_Calibration_Start>
  IMU_Init();
 8001c38:	f7ff ffb2 	bl	8001ba0 <IMU_Init>
  BLE_Init();
 8001c3c:	f7fe ffec 	bl	8000c18 <BLE_Init>
  HAL_Delay(3000);
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <main+0x58>)
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fb5c 	bl	8002300 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//HAL_ADC_Start_DMA(&hadc, &AD_RES, 1);
	//HAL_Delay(1);
	IMU_read_all_raw(&gyro_buffer, &accel_buffer, &mag_buffer);
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <main+0x5c>)
 8001c4a:	4907      	ldr	r1, [pc, #28]	; (8001c68 <main+0x60>)
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <main+0x64>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff ffb2 	bl	8001bb8 <IMU_read_all_raw>
 8001c54:	e7f8      	b.n	8001c48 <main+0x40>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	20000170 	.word	0x20000170
 8001c5c:	200000b0 	.word	0x200000b0
 8001c60:	00000bb8 	.word	0x00000bb8
 8001c64:	20000114 	.word	0x20000114
 8001c68:	20000110 	.word	0x20000110
 8001c6c:	2000010c 	.word	0x2000010c

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b09d      	sub	sp, #116	; 0x74
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	2438      	movs	r4, #56	; 0x38
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	2338      	movs	r3, #56	; 0x38
 8001c7e:	001a      	movs	r2, r3
 8001c80:	2100      	movs	r1, #0
 8001c82:	f004 f9bd 	bl	8006000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c86:	2324      	movs	r3, #36	; 0x24
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	2314      	movs	r3, #20
 8001c8e:	001a      	movs	r2, r3
 8001c90:	2100      	movs	r1, #0
 8001c92:	f004 f9b5 	bl	8006000 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c96:	003b      	movs	r3, r7
 8001c98:	0018      	movs	r0, r3
 8001c9a:	2324      	movs	r3, #36	; 0x24
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f004 f9ae 	bl	8006000 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <SystemClock_Config+0xe4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <SystemClock_Config+0xe8>)
 8001caa:	401a      	ands	r2, r3
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <SystemClock_Config+0xe4>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0109      	lsls	r1, r1, #4
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb6:	0021      	movs	r1, r4
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2202      	movs	r2, #2
 8001cbc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2202      	movs	r2, #2
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0412      	lsls	r2, r2, #16
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 f998 	bl	800301c <HAL_RCC_OscConfig>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001cf0:	f000 f834 	bl	8001d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	2124      	movs	r1, #36	; 0x24
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	00d2      	lsls	r2, r2, #3
 8001d14:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2100      	movs	r1, #0
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f001 fd42 	bl	80037a4 <HAL_RCC_ClockConfig>
 8001d20:	1e03      	subs	r3, r0, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d24:	f000 f81a 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001d28:	003b      	movs	r3, r7
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d2e:	003b      	movs	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d34:	003b      	movs	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f001 ff55 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001d46:	f000 f809 	bl	8001d5c <Error_Handler>
  }
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b01d      	add	sp, #116	; 0x74
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40007000 	.word	0x40007000
 8001d58:	ffffe7ff 	.word	0xffffe7ff

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <MX_SPI1_Init+0x6c>)
 8001d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d74:	2282      	movs	r2, #130	; 0x82
 8001d76:	0052      	lsls	r2, r2, #1
 8001d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <MX_SPI1_Init+0x68>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f002 f87a 	bl	8003eb4 <HAL_SPI_Init>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dc4:	f7ff ffca 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000118 	.word	0x20000118
 8001dd4:	40013000 	.word	0x40013000

08001dd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	240c      	movs	r4, #12
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	0018      	movs	r0, r3
 8001de6:	2314      	movs	r3, #20
 8001de8:	001a      	movs	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	f004 f908 	bl	8006000 <memset>
  if(spiHandle->Instance==SPI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_SPI_MspInit+0x7c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d128      	bne.n	8001e4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0149      	lsls	r1, r1, #5
 8001e04:	430a      	orrs	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e0e:	2102      	movs	r1, #2
 8001e10:	430a      	orrs	r2, r1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_SPI_MspInit+0x80>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e20:	0021      	movs	r1, r4
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	2238      	movs	r2, #56	; 0x38
 8001e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2203      	movs	r2, #3
 8001e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_SPI_MspInit+0x84>)
 8001e44:	0019      	movs	r1, r3
 8001e46:	0010      	movs	r0, r2
 8001e48:	f000 ff54 	bl	8002cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b009      	add	sp, #36	; 0x24
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	40013000 	.word	0x40013000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	50000400 	.word	0x50000400

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_MspInit+0x24>)
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_MspInit+0x24>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_MspInit+0x24>)
 8001e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_MspInit+0x24>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0549      	lsls	r1, r1, #21
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <NMI_Handler+0x4>

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 fa0c 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <DMA1_Channel1_IRQHandler+0x14>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fe6a 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	20000068 	.word	0x20000068

08001ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	2318      	movs	r3, #24
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	2310      	movs	r3, #16
 8001eea:	001a      	movs	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	f004 f887 	bl	8006000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	2308      	movs	r3, #8
 8001efa:	001a      	movs	r2, r3
 8001efc:	2100      	movs	r1, #0
 8001efe:	f004 f87f 	bl	8006000 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	003b      	movs	r3, r7
 8001f04:	0018      	movs	r0, r3
 8001f06:	2310      	movs	r3, #16
 8001f08:	001a      	movs	r2, r3
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f004 f878 	bl	8006000 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	05d2      	lsls	r2, r2, #23
 8001f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f26:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <MX_TIM2_Init+0xfc>)
 8001f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f36:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f002 fdc5 	bl	8004ac8 <HAL_TIM_Base_Init>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f42:	f7ff ff0b 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f46:	2118      	movs	r1, #24
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0152      	lsls	r2, r2, #5
 8001f4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f50:	187a      	adds	r2, r7, r1
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f54:	0011      	movs	r1, r2
 8001f56:	0018      	movs	r0, r3
 8001f58:	f002 ff90 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001f60:	f7ff fefc 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f002 fdee 	bl	8004b48 <HAL_TIM_PWM_Init>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001f70:	f7ff fef4 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001f74:	2110      	movs	r1, #16
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2230      	movs	r2, #48	; 0x30
 8001f7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f82:	187a      	adds	r2, r7, r1
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f003 fa61 	bl	8005450 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001f92:	f7ff fee3 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	003b      	movs	r3, r7
 8001f98:	2260      	movs	r2, #96	; 0x60
 8001f9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f9c:	003b      	movs	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa2:	003b      	movs	r3, r7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	003b      	movs	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fae:	0039      	movs	r1, r7
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f002 fe9b 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001fbe:	f7ff fecd 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <MX_TIM2_Init+0xf8>)
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f81f 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b00a      	add	sp, #40	; 0x28
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	20000170 	.word	0x20000170
 8001fd8:	0000752f 	.word	0x0000752f

08001fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	05db      	lsls	r3, r3, #23
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d105      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_TIM_Base_MspInit+0x28>)
 8001ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_TIM_Base_MspInit+0x28>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	240c      	movs	r4, #12
 8002012:	193b      	adds	r3, r7, r4
 8002014:	0018      	movs	r0, r3
 8002016:	2314      	movs	r3, #20
 8002018:	001a      	movs	r2, r3
 800201a:	2100      	movs	r1, #0
 800201c:	f003 fff0 	bl	8006000 <memset>
  if(timHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	05db      	lsls	r3, r3, #23
 8002028:	429a      	cmp	r2, r3
 800202a:	d122      	bne.n	8002072 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_TIM_MspPostInit+0x74>)
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_TIM_MspPostInit+0x74>)
 8002032:	2101      	movs	r1, #1
 8002034:	430a      	orrs	r2, r1
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_TIM_MspPostInit+0x74>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2201      	movs	r2, #1
 800203e:	4013      	ands	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002044:	0021      	movs	r1, r4
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2202      	movs	r2, #2
 8002050:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800205e:	187b      	adds	r3, r7, r1
 8002060:	2202      	movs	r2, #2
 8002062:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	187a      	adds	r2, r7, r1
 8002066:	23a0      	movs	r3, #160	; 0xa0
 8002068:	05db      	lsls	r3, r3, #23
 800206a:	0011      	movs	r1, r2
 800206c:	0018      	movs	r0, r3
 800206e:	f000 fe41 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b009      	add	sp, #36	; 0x24
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000

08002080 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART1_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 800208c:	22e1      	movs	r2, #225	; 0xe1
 800208e:	0252      	lsls	r2, r2, #9
 8002090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <MX_USART1_UART_Init+0x58>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f003 fa1b 	bl	8005500 <HAL_UART_Init>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff fe45 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200001b0 	.word	0x200001b0
 80020dc:	40013800 	.word	0x40013800

080020e0 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	2414      	movs	r4, #20
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	0018      	movs	r0, r3
 80020ee:	2314      	movs	r3, #20
 80020f0:	001a      	movs	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	f003 ff84 	bl	8006000 <memset>
  if(uartHandle->Instance==USART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a30      	ldr	r2, [pc, #192]	; (80021c0 <HAL_UART_MspInit+0xe0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d12b      	bne.n	800215a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	01c9      	lsls	r1, r1, #7
 800210c:	430a      	orrs	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002116:	2101      	movs	r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002128:	193b      	adds	r3, r7, r4
 800212a:	22c0      	movs	r2, #192	; 0xc0
 800212c:	00d2      	lsls	r2, r2, #3
 800212e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	0021      	movs	r1, r4
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2202      	movs	r2, #2
 8002136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2203      	movs	r2, #3
 8002142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2204      	movs	r2, #4
 8002148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	187a      	adds	r2, r7, r1
 800214c:	23a0      	movs	r3, #160	; 0xa0
 800214e:	05db      	lsls	r3, r3, #23
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fdce 	bl	8002cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002158:	e02e      	b.n	80021b8 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_UART_MspInit+0xe8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d129      	bne.n	80021b8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0289      	lsls	r1, r1, #10
 800216e:	430a      	orrs	r2, r1
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_UART_MspInit+0xe4>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800218a:	2114      	movs	r1, #20
 800218c:	187b      	adds	r3, r7, r1
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	187b      	adds	r3, r7, r1
 8002194:	2202      	movs	r2, #2
 8002196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2203      	movs	r2, #3
 80021a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2204      	movs	r2, #4
 80021a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	187a      	adds	r2, r7, r1
 80021ac:	23a0      	movs	r3, #160	; 0xa0
 80021ae:	05db      	lsls	r3, r3, #23
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fd9e 	bl	8002cf4 <HAL_GPIO_Init>
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b00b      	add	sp, #44	; 0x2c
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40004400 	.word	0x40004400

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <LoopForever+0x6>)
  ldr r1, =_edata
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <LoopForever+0xe>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e8:	4c0b      	ldr	r4, [pc, #44]	; (8002218 <LoopForever+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021f6:	f7ff fe6b 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f003 fedd 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7ff fd03 	bl	8001c08 <main>

08002202 <LoopForever>:

LoopForever:
    b LoopForever
 8002202:	e7fe      	b.n	8002202 <LoopForever>
  ldr   r0, =_estack
 8002204:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002210:	080060a8 	.word	0x080060a8
  ldr r2, =_sbss
 8002214:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002218:	200002bc 	.word	0x200002bc

0800221c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC1_COMP_IRQHandler>
	...

08002220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x3c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Init+0x3c>)
 8002232:	2140      	movs	r1, #64	; 0x40
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002238:	2000      	movs	r0, #0
 800223a:	f000 f811 	bl	8002260 <HAL_InitTick>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d003      	beq.n	800224a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e001      	b.n	800224e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800224a:	f7ff fe09 	bl	8001e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40022000 	.word	0x40022000

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_InitTick+0x5c>)
 800226a:	681c      	ldr	r4, [r3, #0]
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_InitTick+0x60>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	0019      	movs	r1, r3
 8002272:	23fa      	movs	r3, #250	; 0xfa
 8002274:	0098      	lsls	r0, r3, #2
 8002276:	f7fd ff47 	bl	8000108 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	0019      	movs	r1, r3
 800227e:	0020      	movs	r0, r4
 8002280:	f7fd ff42 	bl	8000108 <__udivsi3>
 8002284:	0003      	movs	r3, r0
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fc01 	bl	8002a8e <HAL_SYSTICK_Config>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e00f      	b.n	80022b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d80b      	bhi.n	80022b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	2301      	movs	r3, #1
 800229e:	425b      	negs	r3, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fbce 	bl	8002a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_InitTick+0x64>)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b003      	add	sp, #12
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	2000002c 	.word	0x2000002c
 80022c0:	20000034 	.word	0x20000034
 80022c4:	20000030 	.word	0x20000030

080022c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x1c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x20>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	18d2      	adds	r2, r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_IncTick+0x20>)
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20000034 	.word	0x20000034
 80022e8:	200002b8 	.word	0x200002b8

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_GetTick+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	200002b8 	.word	0x200002b8

08002300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff fff0 	bl	80022ec <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3301      	adds	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_Delay+0x44>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	001a      	movs	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	189b      	adds	r3, r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	f7ff ffe0 	bl	80022ec <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f7      	bhi.n	8002328 <HAL_Delay+0x28>
  {
  }
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000034 	.word	0x20000034

08002348 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e159      	b.n	800260e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2250      	movs	r2, #80	; 0x50
 800236c:	2100      	movs	r1, #0
 800236e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f7fe fbe4 	bl	8000b40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	2210      	movs	r2, #16
 800237e:	4013      	ands	r3, r2
 8002380:	2b10      	cmp	r3, #16
 8002382:	d005      	beq.n	8002390 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800238e:	d00b      	beq.n	80023a8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	2210      	movs	r2, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2250      	movs	r2, #80	; 0x50
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e132      	b.n	800260e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	4a9a      	ldr	r2, [pc, #616]	; (8002618 <HAL_ADC_Init+0x2d0>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	2202      	movs	r2, #2
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2203      	movs	r2, #3
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_ADC_Init+0x90>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_Init+0x90>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_ADC_Init+0x92>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d149      	bne.n	8002472 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d00b      	beq.n	8002402 <HAL_ADC_Init+0xba>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d005      	beq.n	8002402 <HAL_ADC_Init+0xba>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	429a      	cmp	r2, r3
 8002400:	d111      	bne.n	8002426 <HAL_ADC_Init+0xde>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	0892      	lsrs	r2, r2, #2
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	611a      	str	r2, [r3, #16]
 8002424:	e014      	b.n	8002450 <HAL_ADC_Init+0x108>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	0892      	lsrs	r2, r2, #2
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	4b79      	ldr	r3, [pc, #484]	; (800261c <HAL_ADC_Init+0x2d4>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <HAL_ADC_Init+0x2d4>)
 800243c:	4978      	ldr	r1, [pc, #480]	; (8002620 <HAL_ADC_Init+0x2d8>)
 800243e:	400a      	ands	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_ADC_Init+0x2d4>)
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4b74      	ldr	r3, [pc, #464]	; (800261c <HAL_ADC_Init+0x2d4>)
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2118      	movs	r1, #24
 800245c:	438a      	bics	r2, r1
 800245e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002472:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_ADC_Init+0x2d4>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b69      	ldr	r3, [pc, #420]	; (800261c <HAL_ADC_Init+0x2d4>)
 8002478:	496a      	ldr	r1, [pc, #424]	; (8002624 <HAL_ADC_Init+0x2dc>)
 800247a:	400a      	ands	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_ADC_Init+0x2d4>)
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	065a      	lsls	r2, r3, #25
 8002488:	4b64      	ldr	r3, [pc, #400]	; (800261c <HAL_ADC_Init+0x2d4>)
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	055b      	lsls	r3, r3, #21
 8002498:	4013      	ands	r3, r2
 800249a:	d108      	bne.n	80024ae <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	0549      	lsls	r1, r1, #21
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	495b      	ldr	r1, [pc, #364]	; (8002628 <HAL_ADC_Init+0x2e0>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_Init+0x18c>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e000      	b.n	80024d6 <HAL_ADC_Init+0x18e>
 80024d4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80024d6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2020      	movs	r0, #32
 80024dc:	5c1b      	ldrb	r3, [r3, r0]
 80024de:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80024e0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	202c      	movs	r0, #44	; 0x2c
 80024e6:	5c1b      	ldrb	r3, [r3, r0]
 80024e8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024ea:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024f0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80024f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002500:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	23c2      	movs	r3, #194	; 0xc2
 8002510:	33ff      	adds	r3, #255	; 0xff
 8002512:	429a      	cmp	r2, r3
 8002514:	d00b      	beq.n	800252e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2221      	movs	r2, #33	; 0x21
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d11a      	bne.n	800256e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0249      	lsls	r1, r1, #9
 8002550:	430a      	orrs	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	e00b      	b.n	800256e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	2220      	movs	r2, #32
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	2201      	movs	r2, #1
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11f      	bne.n	80025b6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	492a      	ldr	r1, [pc, #168]	; (800262c <HAL_ADC_Init+0x2e4>)
 8002582:	400a      	ands	r2, r1
 8002584:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6919      	ldr	r1, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002594:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800259a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	e00e      	b.n	80025d4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2101      	movs	r1, #1
 80025d0:	438a      	bics	r2, r1
 80025d2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2107      	movs	r1, #7
 80025e0:	438a      	bics	r2, r1
 80025e2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6959      	ldr	r1, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	2203      	movs	r2, #3
 8002602:	4393      	bics	r3, r2
 8002604:	2201      	movs	r2, #1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	fffffefd 	.word	0xfffffefd
 800261c:	40012708 	.word	0x40012708
 8002620:	ffc3ffff 	.word	0xffc3ffff
 8002624:	fdffffff 	.word	0xfdffffff
 8002628:	fffe0219 	.word	0xfffe0219
 800262c:	fffffc03 	.word	0xfffffc03

08002630 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2250      	movs	r2, #80	; 0x50
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x18>
 8002644:	2302      	movs	r3, #2
 8002646:	e085      	b.n	8002754 <HAL_ADC_ConfigChannel+0x124>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2250      	movs	r2, #80	; 0x50
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2204      	movs	r2, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d00b      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2220      	movs	r2, #32
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2250      	movs	r2, #80	; 0x50
 800266c:	2100      	movs	r1, #0
 800266e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e06f      	b.n	8002754 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_ADC_ConfigChannel+0x12c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d035      	beq.n	80026ea <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	035b      	lsls	r3, r3, #13
 800268a:	0b5a      	lsrs	r2, r3, #13
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	02db      	lsls	r3, r3, #11
 800269c:	4013      	ands	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	0409      	lsls	r1, r1, #16
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80026ae:	200a      	movs	r0, #10
 80026b0:	f000 f85e 	bl	8002770 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	4013      	ands	r3, r2
 80026be:	d006      	beq.n	80026ce <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	03c9      	lsls	r1, r1, #15
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	4013      	ands	r3, r2
 80026d8:	d037      	beq.n	800274a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	0449      	lsls	r1, r1, #17
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e02f      	b.n	800274a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	035b      	lsls	r3, r3, #13
 80026f6:	0b5b      	lsrs	r3, r3, #13
 80026f8:	43d9      	mvns	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	02db      	lsls	r3, r3, #11
 800270a:	4013      	ands	r3, r2
 800270c:	d005      	beq.n	800271a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 8002714:	4913      	ldr	r1, [pc, #76]	; (8002764 <HAL_ADC_ConfigChannel+0x134>)
 8002716:	400a      	ands	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	4013      	ands	r3, r2
 8002724:	d005      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_ADC_ConfigChannel+0x138>)
 800272e:	400a      	ands	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	025b      	lsls	r3, r3, #9
 800273a:	4013      	ands	r3, r2
 800273c:	d005      	beq.n	800274a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_ADC_ConfigChannel+0x130>)
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <HAL_ADC_ConfigChannel+0x13c>)
 8002746:	400a      	ands	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2250      	movs	r2, #80	; 0x50
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}
 800275c:	00001001 	.word	0x00001001
 8002760:	40012708 	.word	0x40012708
 8002764:	ff7fffff 	.word	0xff7fffff
 8002768:	ffbfffff 	.word	0xffbfffff
 800276c:	feffffff 	.word	0xfeffffff

08002770 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <ADC_DelayMicroSecond+0x38>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <ADC_DelayMicroSecond+0x3c>)
 800277e:	0018      	movs	r0, r3
 8002780:	f7fd fcc2 	bl	8000108 <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4353      	muls	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800278e:	e002      	b.n	8002796 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b01      	subs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <ADC_DelayMicroSecond+0x20>
  } 
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	2000002c 	.word	0x2000002c
 80027ac:	000f4240 	.word	0x000f4240

080027b0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2317      	movs	r3, #23
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2250      	movs	r2, #80	; 0x50
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_ADCEx_Calibration_Start+0x28>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e083      	b.n	80028e0 <HAL_ADCEx_Calibration_Start+0x130>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2250      	movs	r2, #80	; 0x50
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_ADCEx_Calibration_Start+0x50>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADCEx_Calibration_Start+0x50>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_ADCEx_Calibration_Start+0x52>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d15b      	bne.n	80028be <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <HAL_ADCEx_Calibration_Start+0x138>)
 800280c:	4013      	ands	r3, r2
 800280e:	2202      	movs	r2, #2
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2203      	movs	r2, #3
 800281e:	4013      	ands	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2103      	movs	r1, #3
 800282e:	438a      	bics	r2, r1
 8002830:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0609      	lsls	r1, r1, #24
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002844:	f7ff fd52 	bl	80022ec <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800284c:	e01d      	b.n	800288a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800284e:	f7ff fd4d 	bl	80022ec <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b0a      	cmp	r3, #10
 800285a:	d916      	bls.n	800288a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0fdb      	lsrs	r3, r3, #31
 8002864:	07da      	lsls	r2, r3, #31
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	429a      	cmp	r2, r3
 800286c:	d10d      	bne.n	800288a <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	2212      	movs	r2, #18
 8002874:	4393      	bics	r3, r2
 8002876:	2210      	movs	r2, #16
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2250      	movs	r2, #80	; 0x50
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e02a      	b.n	80028e0 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	0fdb      	lsrs	r3, r3, #31
 8002892:	07da      	lsls	r2, r3, #31
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	429a      	cmp	r2, r3
 800289a:	d0d8      	beq.n	800284e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	2203      	movs	r2, #3
 80028b2:	4393      	bics	r3, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
 80028bc:	e009      	b.n	80028d2 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	2220      	movs	r2, #32
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80028ca:	2317      	movs	r3, #23
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2250      	movs	r2, #80	; 0x50
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80028da:	2317      	movs	r3, #23
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	781b      	ldrb	r3, [r3, #0]
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b006      	add	sp, #24
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fffffefd 	.word	0xfffffefd

080028ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	0002      	movs	r2, r0
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b7f      	cmp	r3, #127	; 0x7f
 80028fe:	d809      	bhi.n	8002914 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	001a      	movs	r2, r3
 8002906:	231f      	movs	r3, #31
 8002908:	401a      	ands	r2, r3
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_EnableIRQ+0x30>)
 800290c:	2101      	movs	r1, #1
 800290e:	4091      	lsls	r1, r2
 8002910:	000a      	movs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
  }
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	0002      	movs	r2, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b7f      	cmp	r3, #127	; 0x7f
 8002934:	d828      	bhi.n	8002988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002936:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <__NVIC_SetPriority+0xd4>)
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b25b      	sxtb	r3, r3
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	33c0      	adds	r3, #192	; 0xc0
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	589b      	ldr	r3, [r3, r2]
 8002946:	1dfa      	adds	r2, r7, #7
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	0011      	movs	r1, r2
 800294c:	2203      	movs	r2, #3
 800294e:	400a      	ands	r2, r1
 8002950:	00d2      	lsls	r2, r2, #3
 8002952:	21ff      	movs	r1, #255	; 0xff
 8002954:	4091      	lsls	r1, r2
 8002956:	000a      	movs	r2, r1
 8002958:	43d2      	mvns	r2, r2
 800295a:	401a      	ands	r2, r3
 800295c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	401a      	ands	r2, r3
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	0018      	movs	r0, r3
 800296c:	2303      	movs	r3, #3
 800296e:	4003      	ands	r3, r0
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002974:	481f      	ldr	r0, [pc, #124]	; (80029f4 <__NVIC_SetPriority+0xd4>)
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	430a      	orrs	r2, r1
 8002980:	33c0      	adds	r3, #192	; 0xc0
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002986:	e031      	b.n	80029ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <__NVIC_SetPriority+0xd8>)
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	0019      	movs	r1, r3
 8002990:	230f      	movs	r3, #15
 8002992:	400b      	ands	r3, r1
 8002994:	3b08      	subs	r3, #8
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3306      	adds	r3, #6
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	18d3      	adds	r3, r2, r3
 800299e:	3304      	adds	r3, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1dfa      	adds	r2, r7, #7
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	0011      	movs	r1, r2
 80029a8:	2203      	movs	r2, #3
 80029aa:	400a      	ands	r2, r1
 80029ac:	00d2      	lsls	r2, r2, #3
 80029ae:	21ff      	movs	r1, #255	; 0xff
 80029b0:	4091      	lsls	r1, r2
 80029b2:	000a      	movs	r2, r1
 80029b4:	43d2      	mvns	r2, r2
 80029b6:	401a      	ands	r2, r3
 80029b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	401a      	ands	r2, r3
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	0018      	movs	r0, r3
 80029c8:	2303      	movs	r3, #3
 80029ca:	4003      	ands	r3, r0
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <__NVIC_SetPriority+0xd8>)
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	001c      	movs	r4, r3
 80029d8:	230f      	movs	r3, #15
 80029da:	4023      	ands	r3, r4
 80029dc:	3b08      	subs	r3, #8
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	430a      	orrs	r2, r1
 80029e2:	3306      	adds	r3, #6
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	18c3      	adds	r3, r0, r3
 80029e8:	3304      	adds	r3, #4
 80029ea:	601a      	str	r2, [r3, #0]
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b003      	add	sp, #12
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	045b      	lsls	r3, r3, #17
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d301      	bcc.n	8002a14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a10:	2301      	movs	r3, #1
 8002a12:	e010      	b.n	8002a36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <SysTick_Config+0x44>)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	425b      	negs	r3, r3
 8002a20:	2103      	movs	r1, #3
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff ff7c 	bl	8002920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x44>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x44>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	210f      	movs	r1, #15
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	1c02      	adds	r2, r0, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff ff5d 	bl	8002920 <__NVIC_SetPriority>
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	0002      	movs	r2, r0
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff ff33 	bl	80028ec <__NVIC_EnableIRQ>
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff ffaf 	bl	80029fc <SysTick_Config>
 8002a9e:	0003      	movs	r3, r0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e061      	b.n	8002b7e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <HAL_DMA_Init+0xe0>)
 8002ac0:	4694      	mov	ip, r2
 8002ac2:	4463      	add	r3, ip
 8002ac4:	2114      	movs	r1, #20
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fd fb1e 	bl	8000108 <__udivsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a2d      	ldr	r2, [pc, #180]	; (8002b8c <HAL_DMA_Init+0xe4>)
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2225      	movs	r2, #37	; 0x25
 8002ade:	2102      	movs	r1, #2
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <HAL_DMA_Init+0xe8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d018      	beq.n	8002b66 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_DMA_Init+0xec>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	211c      	movs	r1, #28
 8002b3e:	400b      	ands	r3, r1
 8002b40:	210f      	movs	r1, #15
 8002b42:	4099      	lsls	r1, r3
 8002b44:	000b      	movs	r3, r1
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_DMA_Init+0xec>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_DMA_Init+0xec>)
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	201c      	movs	r0, #28
 8002b5c:	4003      	ands	r3, r0
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_DMA_Init+0xec>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2225      	movs	r2, #37	; 0x25
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	; 0x24
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	bffdfff8 	.word	0xbffdfff8
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	ffff800f 	.word	0xffff800f
 8002b94:	400200a8 	.word	0x400200a8

08002b98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	221c      	movs	r2, #28
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2204      	movs	r2, #4
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d026      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x7a>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2104      	movs	r1, #4
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	221c      	movs	r2, #28
 8002bee:	401a      	ands	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x6e>
 8002c04:	e071      	b.n	8002cea <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	e06b      	b.n	8002cea <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	221c      	movs	r2, #28
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	0013      	movs	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	d02d      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xea>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d029      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2220      	movs	r2, #32
 8002c36:	4013      	ands	r3, r2
 8002c38:	d10b      	bne.n	8002c52 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	210a      	movs	r1, #10
 8002c46:	438a      	bics	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2225      	movs	r2, #37	; 0x25
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	221c      	movs	r2, #28
 8002c58:	401a      	ands	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4091      	lsls	r1, r2
 8002c62:	000a      	movs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d039      	beq.n	8002cea <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c80:	e033      	b.n	8002cea <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	221c      	movs	r2, #28
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	0013      	movs	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	d02a      	beq.n	8002cec <HAL_DMA_IRQHandler+0x154>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d026      	beq.n	8002cec <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	210e      	movs	r1, #14
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	221c      	movs	r2, #28
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4091      	lsls	r1, r2
 8002cbe:	000a      	movs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2225      	movs	r2, #37	; 0x25
 8002ccc:	2101      	movs	r1, #1
 8002cce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46c0      	nop			; (mov r8, r8)
}
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d0a:	e14f      	b.n	8002fac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4091      	lsls	r1, r2
 8002d16:	000a      	movs	r2, r1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d100      	bne.n	8002d24 <HAL_GPIO_Init+0x30>
 8002d22:	e140      	b.n	8002fa6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2203      	movs	r2, #3
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d005      	beq.n	8002d3c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d130      	bne.n	8002d9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	0013      	movs	r3, r2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d72:	2201      	movs	r2, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	2201      	movs	r2, #1
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	0013      	movs	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d017      	beq.n	8002dda <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	409a      	lsls	r2, r3
 8002db8:	0013      	movs	r3, r2
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2203      	movs	r2, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d123      	bne.n	8002e2e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3208      	adds	r2, #8
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	58d3      	ldr	r3, [r2, r3]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2207      	movs	r2, #7
 8002df8:	4013      	ands	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	0013      	movs	r3, r2
 8002e02:	43da      	mvns	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2107      	movs	r1, #7
 8002e12:	400b      	ands	r3, r1
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	409a      	lsls	r2, r3
 8002e18:	0013      	movs	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	6939      	ldr	r1, [r7, #16]
 8002e2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	23c0      	movs	r3, #192	; 0xc0
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <HAL_GPIO_Init+0x17c>
 8002e6e:	e09a      	b.n	8002fa6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e70:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e74:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002e76:	2101      	movs	r1, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_GPIO_Init+0x2d4>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	589b      	ldr	r3, [r3, r2]
 8002e88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	409a      	lsls	r2, r3
 8002e96:	0013      	movs	r3, r2
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	23a0      	movs	r3, #160	; 0xa0
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d019      	beq.n	8002ede <HAL_GPIO_Init+0x1ea>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_GPIO_Init+0x2d8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_GPIO_Init+0x1e6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <HAL_GPIO_Init+0x2dc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_GPIO_Init+0x1e2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a45      	ldr	r2, [pc, #276]	; (8002fd4 <HAL_GPIO_Init+0x2e0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <HAL_GPIO_Init+0x1de>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a44      	ldr	r2, [pc, #272]	; (8002fd8 <HAL_GPIO_Init+0x2e4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_GPIO_Init+0x1da>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002ece:	2306      	movs	r3, #6
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <HAL_GPIO_Init+0x2d4>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	4013      	ands	r3, r2
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	035b      	lsls	r3, r3, #13
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	039b      	lsls	r3, r3, #14
 8002f94:	4013      	ands	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_GPIO_Init+0x2e8>)
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	40da      	lsrs	r2, r3
 8002fb4:	1e13      	subs	r3, r2, #0
 8002fb6:	d000      	beq.n	8002fba <HAL_GPIO_Init+0x2c6>
 8002fb8:	e6a8      	b.n	8002d0c <HAL_GPIO_Init+0x18>
  }
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b006      	add	sp, #24
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	50000400 	.word	0x50000400
 8002fd0:	50000800 	.word	0x50000800
 8002fd4:	50000c00 	.word	0x50000c00
 8002fd8:	50001c00 	.word	0x50001c00
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	0008      	movs	r0, r1
 8002fea:	0011      	movs	r1, r2
 8002fec:	1cbb      	adds	r3, r7, #2
 8002fee:	1c02      	adds	r2, r0, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	1c7b      	adds	r3, r7, #1
 8002ff4:	1c0a      	adds	r2, r1, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ff8:	1c7b      	adds	r3, r7, #1
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003000:	1cbb      	adds	r3, r7, #2
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800300a:	1cbb      	adds	r3, r7, #2
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 fbaf 	bl	800378e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003030:	4bcf      	ldr	r3, [pc, #828]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	220c      	movs	r2, #12
 8003036:	4013      	ands	r3, r2
 8003038:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303a:	4bcd      	ldr	r3, [pc, #820]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	4013      	ands	r3, r2
 8003044:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d100      	bne.n	8003052 <HAL_RCC_OscConfig+0x36>
 8003050:	e07e      	b.n	8003150 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d007      	beq.n	8003068 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x68>
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	025b      	lsls	r3, r3, #9
 8003064:	429a      	cmp	r2, r3
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	4bc1      	ldr	r3, [pc, #772]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	4013      	ands	r3, r2
 8003072:	d100      	bne.n	8003076 <HAL_RCC_OscConfig+0x5a>
 8003074:	e06b      	b.n	800314e <HAL_RCC_OscConfig+0x132>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d167      	bne.n	800314e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f000 fb85 	bl	800378e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	025b      	lsls	r3, r3, #9
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x84>
 8003090:	4bb7      	ldr	r3, [pc, #732]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4bb6      	ldr	r3, [pc, #728]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0249      	lsls	r1, r1, #9
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e027      	b.n	80030f0 <HAL_RCC_OscConfig+0xd4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	23a0      	movs	r3, #160	; 0xa0
 80030a6:	02db      	lsls	r3, r3, #11
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10e      	bne.n	80030ca <HAL_RCC_OscConfig+0xae>
 80030ac:	4bb0      	ldr	r3, [pc, #704]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4baf      	ldr	r3, [pc, #700]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	02c9      	lsls	r1, r1, #11
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	4bad      	ldr	r3, [pc, #692]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4bac      	ldr	r3, [pc, #688]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0249      	lsls	r1, r1, #9
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e012      	b.n	80030f0 <HAL_RCC_OscConfig+0xd4>
 80030ca:	4ba9      	ldr	r3, [pc, #676]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030d0:	49a8      	ldr	r1, [pc, #672]	; (8003374 <HAL_RCC_OscConfig+0x358>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4ba6      	ldr	r3, [pc, #664]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	025b      	lsls	r3, r3, #9
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4ba2      	ldr	r3, [pc, #648]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4ba1      	ldr	r3, [pc, #644]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80030ea:	49a3      	ldr	r1, [pc, #652]	; (8003378 <HAL_RCC_OscConfig+0x35c>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff f8f8 	bl	80022ec <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003100:	e009      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003102:	f7ff f8f3 	bl	80022ec <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	; 0x64
 800310e:	d902      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	f000 fb3c 	bl	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	4b96      	ldr	r3, [pc, #600]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	4013      	ands	r3, r2
 8003120:	d0ef      	beq.n	8003102 <HAL_RCC_OscConfig+0xe6>
 8003122:	e015      	b.n	8003150 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7ff f8e2 	bl	80022ec <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312e:	f7ff f8dd 	bl	80022ec <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e326      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003140:	4b8b      	ldr	r3, [pc, #556]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	4013      	ands	r3, r2
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x112>
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d100      	bne.n	800315c <HAL_RCC_OscConfig+0x140>
 800315a:	e08b      	b.n	8003274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d005      	beq.n	8003174 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d13e      	bne.n	80031ec <HAL_RCC_OscConfig+0x1d0>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13b      	bne.n	80031ec <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003174:	4b7e      	ldr	r3, [pc, #504]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_RCC_OscConfig+0x16c>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e302      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a7b      	ldr	r2, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x360>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800319e:	4b74      	ldr	r3, [pc, #464]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2209      	movs	r2, #9
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	4b71      	ldr	r3, [pc, #452]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b0:	f000 fc40 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80031b4:	0001      	movs	r1, r0
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	220f      	movs	r2, #15
 80031be:	4013      	ands	r3, r2
 80031c0:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x364>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	000a      	movs	r2, r1
 80031c6:	40da      	lsrs	r2, r3
 80031c8:	4b6e      	ldr	r3, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x368>)
 80031ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80031cc:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x36c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2513      	movs	r5, #19
 80031d2:	197c      	adds	r4, r7, r5
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff f843 	bl	8002260 <HAL_InitTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80031de:	197b      	adds	r3, r7, r5
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d046      	beq.n	8003274 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	e2d0      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d027      	beq.n	8003242 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80031f2:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2209      	movs	r2, #9
 80031f8:	4393      	bics	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	4b5c      	ldr	r3, [pc, #368]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f872 	bl	80022ec <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7ff f86d 	bl	80022ec <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e2b6      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	d0f1      	beq.n	800320e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x360>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e018      	b.n	8003274 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003248:	2101      	movs	r1, #1
 800324a:	438a      	bics	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7ff f84d 	bl	80022ec <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7ff f848 	bl	80022ec <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e291      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2204      	movs	r2, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d1f1      	bne.n	8003258 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d100      	bne.n	8003280 <HAL_RCC_OscConfig+0x264>
 800327e:	e0a1      	b.n	80033c4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d140      	bne.n	8003308 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003286:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x282>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e277      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_RCC_OscConfig+0x370>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	0a19      	lsrs	r1, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	061a      	lsls	r2, r3, #24
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	3301      	adds	r3, #1
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0212      	lsls	r2, r2, #8
 80032d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	210f      	movs	r1, #15
 80032dc:	400b      	ands	r3, r1
 80032de:	4928      	ldr	r1, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x364>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x368>)
 80032e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x36c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2513      	movs	r5, #19
 80032ee:	197c      	adds	r4, r7, r5
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fe ffb5 	bl	8002260 <HAL_InitTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d060      	beq.n	80033c4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003302:	197b      	adds	r3, r7, r5
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	e242      	b.n	800378e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03f      	beq.n	8003390 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0049      	lsls	r1, r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe ffe5 	bl	80022ec <HAL_GetTick>
 8003322:	0003      	movs	r3, r0
 8003324:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003328:	f7fe ffe0 	bl	80022ec <HAL_GetTick>
 800332c:	0002      	movs	r2, r0
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e229      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x370>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	0a19      	lsrs	r1, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	061a      	lsls	r2, r3, #24
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <HAL_RCC_OscConfig+0x354>)
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e029      	b.n	80033c4 <HAL_RCC_OscConfig+0x3a8>
 8003370:	40021000 	.word	0x40021000
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffffe0ff 	.word	0xffffe0ff
 8003380:	0800602c 	.word	0x0800602c
 8003384:	2000002c 	.word	0x2000002c
 8003388:	20000030 	.word	0x20000030
 800338c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003390:	4bbd      	ldr	r3, [pc, #756]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4bbc      	ldr	r3, [pc, #752]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003396:	49bd      	ldr	r1, [pc, #756]	; (800368c <HAL_RCC_OscConfig+0x670>)
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe ffa6 	bl	80022ec <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a6:	f7fe ffa1 	bl	80022ec <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1ea      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033b8:	4bb3      	ldr	r3, [pc, #716]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4013      	ands	r3, r2
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	4013      	ands	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4bac      	ldr	r3, [pc, #688]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80033d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033da:	4bab      	ldr	r3, [pc, #684]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80033dc:	2101      	movs	r1, #1
 80033de:	430a      	orrs	r2, r1
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe ff83 	bl	80022ec <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fe ff7e 	bl	80022ec <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1c7      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033fe:	4ba2      	ldr	r3, [pc, #648]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	2202      	movs	r2, #2
 8003404:	4013      	ands	r3, r2
 8003406:	d0f1      	beq.n	80033ec <HAL_RCC_OscConfig+0x3d0>
 8003408:	e018      	b.n	800343c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b9f      	ldr	r3, [pc, #636]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800340c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340e:	4b9e      	ldr	r3, [pc, #632]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fe ff69 	bl	80022ec <HAL_GetTick>
 800341a:	0003      	movs	r3, r0
 800341c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003420:	f7fe ff64 	bl	80022ec <HAL_GetTick>
 8003424:	0002      	movs	r2, r0
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1ad      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003432:	4b95      	ldr	r3, [pc, #596]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d1f1      	bne.n	8003420 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2204      	movs	r2, #4
 8003442:	4013      	ands	r3, r2
 8003444:	d100      	bne.n	8003448 <HAL_RCC_OscConfig+0x42c>
 8003446:	e0ae      	b.n	80035a6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003448:	2027      	movs	r0, #39	; 0x27
 800344a:	183b      	adds	r3, r7, r0
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003450:	4b8d      	ldr	r3, [pc, #564]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	055b      	lsls	r3, r3, #21
 8003458:	4013      	ands	r3, r2
 800345a:	d109      	bne.n	8003470 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b8a      	ldr	r3, [pc, #552]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800345e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003460:	4b89      	ldr	r3, [pc, #548]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	0549      	lsls	r1, r1, #21
 8003466:	430a      	orrs	r2, r1
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800346a:	183b      	adds	r3, r7, r0
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b87      	ldr	r3, [pc, #540]	; (8003690 <HAL_RCC_OscConfig+0x674>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4013      	ands	r3, r2
 800347a:	d11a      	bne.n	80034b2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347c:	4b84      	ldr	r3, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x674>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b83      	ldr	r3, [pc, #524]	; (8003690 <HAL_RCC_OscConfig+0x674>)
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	0049      	lsls	r1, r1, #1
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348a:	f7fe ff2f 	bl	80022ec <HAL_GetTick>
 800348e:	0003      	movs	r3, r0
 8003490:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003494:	f7fe ff2a 	bl	80022ec <HAL_GetTick>
 8003498:	0002      	movs	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e173      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x674>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_OscConfig+0x4b2>
 80034be:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034c2:	4b71      	ldr	r3, [pc, #452]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0049      	lsls	r1, r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	651a      	str	r2, [r3, #80]	; 0x50
 80034cc:	e031      	b.n	8003532 <HAL_RCC_OscConfig+0x516>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4d4>
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034da:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034dc:	496b      	ldr	r1, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x670>)
 80034de:	400a      	ands	r2, r1
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50
 80034e2:	4b69      	ldr	r3, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034e6:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034e8:	496a      	ldr	r1, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x678>)
 80034ea:	400a      	ands	r2, r1
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
 80034ee:	e020      	b.n	8003532 <HAL_RCC_OscConfig+0x516>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	23a0      	movs	r3, #160	; 0xa0
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10e      	bne.n	800351a <HAL_RCC_OscConfig+0x4fe>
 80034fc:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80034fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	00c9      	lsls	r1, r1, #3
 8003506:	430a      	orrs	r2, r1
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800350c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800350e:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	0049      	lsls	r1, r1, #1
 8003514:	430a      	orrs	r2, r1
 8003516:	651a      	str	r2, [r3, #80]	; 0x50
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x516>
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800351c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800351e:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003520:	495a      	ldr	r1, [pc, #360]	; (800368c <HAL_RCC_OscConfig+0x670>)
 8003522:	400a      	ands	r2, r1
 8003524:	651a      	str	r2, [r3, #80]	; 0x50
 8003526:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800352c:	4959      	ldr	r1, [pc, #356]	; (8003694 <HAL_RCC_OscConfig+0x678>)
 800352e:	400a      	ands	r2, r1
 8003530:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d015      	beq.n	8003566 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fed7 	bl	80022ec <HAL_GetTick>
 800353e:	0003      	movs	r3, r0
 8003540:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003542:	e009      	b.n	8003558 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe fed2 	bl	80022ec <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_RCC_OscConfig+0x67c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e11a      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800355a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d0ef      	beq.n	8003544 <HAL_RCC_OscConfig+0x528>
 8003564:	e014      	b.n	8003590 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe fec1 	bl	80022ec <HAL_GetTick>
 800356a:	0003      	movs	r3, r0
 800356c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800356e:	e009      	b.n	8003584 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe febc 	bl	80022ec <HAL_GetTick>
 8003574:	0002      	movs	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	4a47      	ldr	r2, [pc, #284]	; (8003698 <HAL_RCC_OscConfig+0x67c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e104      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003584:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d1ef      	bne.n	8003570 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003590:	2327      	movs	r3, #39	; 0x27
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035a0:	493e      	ldr	r1, [pc, #248]	; (800369c <HAL_RCC_OscConfig+0x680>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2220      	movs	r2, #32
 80035ac:	4013      	ands	r3, r2
 80035ae:	d049      	beq.n	8003644 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d026      	beq.n	8003606 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80035b8:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035be:	2101      	movs	r1, #1
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c8:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	430a      	orrs	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
 80035d0:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_RCC_OscConfig+0x684>)
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCC_OscConfig+0x684>)
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	0189      	lsls	r1, r1, #6
 80035da:	430a      	orrs	r2, r1
 80035dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fe85 	bl	80022ec <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e8:	f7fe fe80 	bl	80022ec <HAL_GetTick>
 80035ec:	0002      	movs	r2, r0
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0c9      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5cc>
 8003604:	e01e      	b.n	8003644 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800360c:	2101      	movs	r1, #1
 800360e:	438a      	bics	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_RCC_OscConfig+0x684>)
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_RCC_OscConfig+0x684>)
 8003618:	4922      	ldr	r1, [pc, #136]	; (80036a4 <HAL_RCC_OscConfig+0x688>)
 800361a:	400a      	ands	r2, r1
 800361c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe fe65 	bl	80022ec <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003628:	f7fe fe60 	bl	80022ec <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0a9      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d1f1      	bne.n	8003628 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d100      	bne.n	800364e <HAL_RCC_OscConfig+0x632>
 800364c:	e09e      	b.n	800378c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d100      	bne.n	8003656 <HAL_RCC_OscConfig+0x63a>
 8003654:	e077      	b.n	8003746 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	2b02      	cmp	r3, #2
 800365c:	d158      	bne.n	8003710 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_OscConfig+0x66c>)
 8003664:	4910      	ldr	r1, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x68c>)
 8003666:	400a      	ands	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fe3f 	bl	80022ec <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fe3a 	bl	80022ec <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d914      	bls.n	80036ac <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e083      	b.n	800378e <HAL_RCC_OscConfig+0x772>
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	fffffeff 	.word	0xfffffeff
 8003690:	40007000 	.word	0x40007000
 8003694:	fffffbff 	.word	0xfffffbff
 8003698:	00001388 	.word	0x00001388
 800369c:	efffffff 	.word	0xefffffff
 80036a0:	40010000 	.word	0x40010000
 80036a4:	ffffdfff 	.word	0xffffdfff
 80036a8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	049b      	lsls	r3, r3, #18
 80036b4:	4013      	ands	r3, r2
 80036b6:	d1dd      	bne.n	8003674 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a37      	ldr	r2, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x780>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	431a      	orrs	r2, r3
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	0449      	lsls	r1, r1, #17
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fe fe01 	bl	80022ec <HAL_GetTick>
 80036ea:	0003      	movs	r3, r0
 80036ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fdfc 	bl	80022ec <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e045      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	049b      	lsls	r3, r3, #18
 800370a:	4013      	ands	r3, r2
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x6d4>
 800370e:	e03d      	b.n	800378c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 8003716:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003718:	400a      	ands	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fde6 	bl	80022ec <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fe fde1 	bl	80022ec <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e02a      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003738:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	049b      	lsls	r3, r3, #18
 8003740:	4013      	ands	r3, r2
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x70a>
 8003744:	e022      	b.n	800378c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e01d      	b.n	800378e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	025b      	lsls	r3, r3, #9
 800375e:	401a      	ands	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	429a      	cmp	r2, r3
 8003766:	d10f      	bne.n	8003788 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	23f0      	movs	r3, #240	; 0xf0
 800376c:	039b      	lsls	r3, r3, #14
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	23c0      	movs	r3, #192	; 0xc0
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b00a      	add	sp, #40	; 0x28
 8003794:	bdb0      	pop	{r4, r5, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	40021000 	.word	0x40021000
 800379c:	ff02ffff 	.word	0xff02ffff
 80037a0:	feffffff 	.word	0xfeffffff

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e128      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d91e      	bls.n	8003804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4393      	bics	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037d8:	f7fe fd88 	bl	80022ec <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fe fd83 	bl	80022ec <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	4a8a      	ldr	r2, [pc, #552]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e109      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b87      	ldr	r3, [pc, #540]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380e:	4b83      	ldr	r3, [pc, #524]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	22f0      	movs	r2, #240	; 0xf0
 8003814:	4393      	bics	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d100      	bne.n	800382e <HAL_RCC_ClockConfig+0x8a>
 800382c:	e089      	b.n	8003942 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003836:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	029b      	lsls	r3, r3, #10
 800383e:	4013      	ands	r3, r2
 8003840:	d120      	bne.n	8003884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0e1      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	049b      	lsls	r3, r3, #18
 8003856:	4013      	ands	r3, r2
 8003858:	d114      	bne.n	8003884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0d5      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d106      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d109      	bne.n	8003884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0ca      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003874:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4013      	ands	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0c2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003884:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2203      	movs	r2, #3
 800388a:	4393      	bics	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fe fd28 	bl	80022ec <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d111      	bne.n	80038cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a8:	e009      	b.n	80038be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038aa:	f7fe fd1f 	bl	80022ec <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0a5      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80038be:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	220c      	movs	r2, #12
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d1ef      	bne.n	80038aa <HAL_RCC_ClockConfig+0x106>
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d111      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d4:	e009      	b.n	80038ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d6:	f7fe fd09 	bl	80022ec <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	4a4d      	ldr	r2, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e08f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ea:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	220c      	movs	r2, #12
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d1ef      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x132>
 80038f6:	e024      	b.n	8003942 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11b      	bne.n	8003938 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003900:	e009      	b.n	8003916 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fe fcf3 	bl	80022ec <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e079      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	220c      	movs	r2, #12
 800391c:	4013      	ands	r3, r2
 800391e:	2b04      	cmp	r3, #4
 8003920:	d1ef      	bne.n	8003902 <HAL_RCC_ClockConfig+0x15e>
 8003922:	e00e      	b.n	8003942 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7fe fce2 	bl	80022ec <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e068      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003938:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	220c      	movs	r2, #12
 800393e:	4013      	ands	r3, r2
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d21e      	bcs.n	800398e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003950:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	4393      	bics	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003962:	f7fe fcc3 	bl	80022ec <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	e009      	b.n	8003980 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fe fcbe 	bl	80022ec <HAL_GetTick>
 8003970:	0002      	movs	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <HAL_RCC_ClockConfig+0x274>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e044      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	4013      	ands	r3, r2
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d1ee      	bne.n	800396c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2204      	movs	r2, #4
 8003994:	4013      	ands	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x27c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2208      	movs	r2, #8
 80039b2:	4013      	ands	r3, r2
 80039b4:	d00a      	beq.n	80039cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_RCC_ClockConfig+0x280>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	00da      	lsls	r2, r3, #3
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039cc:	f000 f832 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039d0:	0001      	movs	r1, r0
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_ClockConfig+0x278>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	220f      	movs	r2, #15
 80039da:	4013      	ands	r3, r2
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x284>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	000a      	movs	r2, r1
 80039e2:	40da      	lsrs	r2, r3
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_RCC_ClockConfig+0x288>)
 80039e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_ClockConfig+0x28c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	250b      	movs	r5, #11
 80039ee:	197c      	adds	r4, r7, r5
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fe fc35 	bl	8002260 <HAL_InitTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003a02:	197b      	adds	r3, r7, r5
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bdb0      	pop	{r4, r5, r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40022000 	.word	0x40022000
 8003a18:	00001388 	.word	0x00001388
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	fffff8ff 	.word	0xfffff8ff
 8003a24:	ffffc7ff 	.word	0xffffc7ff
 8003a28:	0800602c 	.word	0x0800602c
 8003a2c:	2000002c 	.word	0x2000002c
 8003a30:	20000030 	.word	0x20000030

08003a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b08e      	sub	sp, #56	; 0x38
 8003a38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a42:	230c      	movs	r3, #12
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d014      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a4a:	d900      	bls.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1a>
 8003a4c:	e07b      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x112>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x24>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d00b      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a56:	e076      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a58:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003a66:	e07c      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003a68:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a6c:	e079      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x144>)
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a72:	e076      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	0c9a      	lsrs	r2, r3, #18
 8003a78:	230f      	movs	r3, #15
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x148>)
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	0d9a      	lsrs	r2, r3, #22
 8003a86:	2303      	movs	r3, #3
 8003a88:	4013      	ands	r3, r2
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	025b      	lsls	r3, r3, #9
 8003a96:	4013      	ands	r3, r2
 8003a98:	d01a      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x144>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	69b8      	ldr	r0, [r7, #24]
 8003aa8:	69f9      	ldr	r1, [r7, #28]
 8003aaa:	f7fc fcc3 	bl	8000434 <__aeabi_lmul>
 8003aae:	0002      	movs	r2, r0
 8003ab0:	000b      	movs	r3, r1
 8003ab2:	0010      	movs	r0, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f7fc fc97 	bl	80003f4 <__aeabi_uldivmod>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	000b      	movs	r3, r1
 8003aca:	0013      	movs	r3, r2
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	e037      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d01a      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	68b8      	ldr	r0, [r7, #8]
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	f7fc fca3 	bl	8000434 <__aeabi_lmul>
 8003aee:	0002      	movs	r2, r0
 8003af0:	000b      	movs	r3, r1
 8003af2:	0010      	movs	r0, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f7fc fc77 	bl	80003f4 <__aeabi_uldivmod>
 8003b06:	0002      	movs	r2, r0
 8003b08:	000b      	movs	r3, r1
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	e017      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	0018      	movs	r0, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	0019      	movs	r1, r3
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x140>)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f7fc fc8a 	bl	8000434 <__aeabi_lmul>
 8003b20:	0002      	movs	r2, r0
 8003b22:	000b      	movs	r3, r1
 8003b24:	0010      	movs	r0, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	001c      	movs	r4, r3
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	001d      	movs	r5, r3
 8003b30:	0022      	movs	r2, r4
 8003b32:	002b      	movs	r3, r5
 8003b34:	f7fc fc5e 	bl	80003f4 <__aeabi_uldivmod>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	000b      	movs	r3, r1
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b44:	e00d      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	4013      	ands	r3, r2
 8003b50:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	3301      	adds	r3, #1
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	0212      	lsls	r2, r2, #8
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	0013      	movs	r3, r2
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b60:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b00e      	add	sp, #56	; 0x38
 8003b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	003d0900 	.word	0x003d0900
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	08006044 	.word	0x08006044

08003b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b84:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	2000002c 	.word	0x2000002c

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b98:	f7ff fff2 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003b9c:	0001      	movs	r1, r0
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	40d9      	lsrs	r1, r3
 8003bae:	000b      	movs	r3, r1
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0800603c 	.word	0x0800603c

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bc4:	f7ff ffdc 	bl	8003b80 <HAL_RCC_GetHCLKFreq>
 8003bc8:	0001      	movs	r1, r0
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0adb      	lsrs	r3, r3, #11
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	40d9      	lsrs	r1, r3
 8003bda:	000b      	movs	r3, r1
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800603c 	.word	0x0800603c

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003bf4:	2317      	movs	r3, #23
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2220      	movs	r2, #32
 8003c02:	4013      	ands	r3, r2
 8003c04:	d106      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d100      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003c12:	e0d9      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c14:	4b9c      	ldr	r3, [pc, #624]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	055b      	lsls	r3, r3, #21
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d10a      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b99      	ldr	r3, [pc, #612]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c24:	4b98      	ldr	r3, [pc, #608]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0549      	lsls	r1, r1, #21
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c2e:	2317      	movs	r3, #23
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b95      	ldr	r3, [pc, #596]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d11a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b91      	ldr	r3, [pc, #580]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0049      	lsls	r1, r1, #1
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c50:	f7fe fb4c 	bl	80022ec <HAL_GetTick>
 8003c54:	0003      	movs	r3, r0
 8003c56:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fe fb47 	bl	80022ec <HAL_GetTick>
 8003c5e:	0002      	movs	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b64      	cmp	r3, #100	; 0x64
 8003c66:	d901      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e108      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4013      	ands	r3, r2
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003c78:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	039b      	lsls	r3, r3, #14
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	039b      	lsls	r3, r3, #14
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	23c0      	movs	r3, #192	; 0xc0
 8003c9a:	039b      	lsls	r3, r3, #14
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	23c0      	movs	r3, #192	; 0xc0
 8003caa:	029b      	lsls	r3, r3, #10
 8003cac:	401a      	ands	r2, r3
 8003cae:	23c0      	movs	r3, #192	; 0xc0
 8003cb0:	029b      	lsls	r3, r3, #10
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10a      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cb6:	4b74      	ldr	r3, [pc, #464]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	029b      	lsls	r3, r3, #10
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0d8      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003ccc:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd0:	23c0      	movs	r3, #192	; 0xc0
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d049      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d004      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	23c0      	movs	r3, #192	; 0xc0
 8003cfe:	029b      	lsls	r3, r3, #10
 8003d00:	4013      	ands	r3, r2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d034      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	4013      	ands	r3, r2
 8003d12:	d02e      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003d14:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	0309      	lsls	r1, r1, #12
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2c:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d30:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d32:	4958      	ldr	r1, [pc, #352]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003d38:	4b53      	ldr	r3, [pc, #332]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	d014      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fad0 	bl	80022ec <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d50:	e009      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe facb 	bl	80022ec <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	4a4e      	ldr	r2, [pc, #312]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e08b      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d66:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d0ef      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	23c0      	movs	r3, #192	; 0xc0
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	23c0      	movs	r3, #192	; 0xc0
 8003d7e:	029b      	lsls	r3, r3, #10
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	23c0      	movs	r3, #192	; 0xc0
 8003d94:	039b      	lsls	r3, r3, #14
 8003d96:	401a      	ands	r2, r3
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003da0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	029b      	lsls	r3, r3, #10
 8003daa:	401a      	ands	r2, r3
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dae:	430a      	orrs	r2, r1
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003db2:	2317      	movs	r3, #23
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dc2:	4937      	ldr	r1, [pc, #220]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003dc4:	400a      	ands	r2, r1
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	4393      	bics	r3, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003de2:	430a      	orrs	r2, r1
 8003de4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4013      	ands	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	220c      	movs	r2, #12
 8003df6:	4393      	bics	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2208      	movs	r2, #8
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	4013      	ands	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4a17      	ldr	r2, [pc, #92]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	0019      	movs	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	4013      	ands	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	4a10      	ldr	r2, [pc, #64]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b006      	add	sp, #24
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	fffcffff 	.word	0xfffcffff
 8003e94:	fff7ffff 	.word	0xfff7ffff
 8003e98:	00001388 	.word	0x00001388
 8003e9c:	ffcfffff 	.word	0xffcfffff
 8003ea0:	efffffff 	.word	0xefffffff
 8003ea4:	fffff3ff 	.word	0xfffff3ff
 8003ea8:	ffffcfff 	.word	0xffffcfff
 8003eac:	fbffffff 	.word	0xfbffffff
 8003eb0:	fff3ffff 	.word	0xfff3ffff

08003eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e083      	b.n	8003fce <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	2382      	movs	r3, #130	; 0x82
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d009      	beq.n	8003eee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
 8003ee0:	e005      	b.n	8003eee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2251      	movs	r2, #81	; 0x51
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2250      	movs	r2, #80	; 0x50
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fd ff64 	bl	8001dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2251      	movs	r2, #81	; 0x51
 8003f14:	2102      	movs	r1, #2
 8003f16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	438a      	bics	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	2382      	movs	r3, #130	; 0x82
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	401a      	ands	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6899      	ldr	r1, [r3, #8]
 8003f36:	2384      	movs	r3, #132	; 0x84
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	400b      	ands	r3, r1
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2102      	movs	r1, #2
 8003f50:	400b      	ands	r3, r1
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	2101      	movs	r1, #1
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6999      	ldr	r1, [r3, #24]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	400b      	ands	r3, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	2138      	movs	r1, #56	; 0x38
 8003f70:	400b      	ands	r3, r1
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	400b      	ands	r3, r1
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	0011      	movs	r1, r2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <HAL_SPI_Init+0x124>)
 8003fba:	400a      	ands	r2, r1
 8003fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2251      	movs	r2, #81	; 0x51
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b002      	add	sp, #8
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	fffff7ff 	.word	0xfffff7ff

08003fdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	1dbb      	adds	r3, r7, #6
 8003fea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2250      	movs	r2, #80	; 0x50
 8003ff8:	5c9b      	ldrb	r3, [r3, r2]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_SPI_Transmit+0x26>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e13e      	b.n	8004280 <HAL_SPI_Transmit+0x2a4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2250      	movs	r2, #80	; 0x50
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400a:	f7fe f96f 	bl	80022ec <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004012:	2316      	movs	r3, #22
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	1dba      	adds	r2, r7, #6
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2251      	movs	r2, #81	; 0x51
 8004020:	5c9b      	ldrb	r3, [r3, r2]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d004      	beq.n	8004032 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004028:	231f      	movs	r3, #31
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	2202      	movs	r2, #2
 800402e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004030:	e11b      	b.n	800426a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_SPI_Transmit+0x64>
 8004038:	1dbb      	adds	r3, r7, #6
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004040:	231f      	movs	r3, #31
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
    goto error;
 8004048:	e10f      	b.n	800426a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2251      	movs	r2, #81	; 0x51
 800404e:	2103      	movs	r1, #3
 8004050:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1dba      	adds	r2, r7, #6
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1dba      	adds	r2, r7, #6
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	429a      	cmp	r2, r3
 8004096:	d110      	bne.n	80040ba <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	01c9      	lsls	r1, r1, #7
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d007      	beq.n	80040d8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d14e      	bne.n	8004182 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_SPI_Transmit+0x11a>
 80040ec:	2316      	movs	r3, #22
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d13f      	bne.n	8004176 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800411a:	e02c      	b.n	8004176 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2202      	movs	r2, #2
 8004124:	4013      	ands	r3, r2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d112      	bne.n	8004150 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	1c9a      	adds	r2, r3, #2
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	86da      	strh	r2, [r3, #54]	; 0x36
 800414e:	e012      	b.n	8004176 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004150:	f7fe f8cc 	bl	80022ec <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d802      	bhi.n	8004166 <HAL_SPI_Transmit+0x18a>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_SPI_Transmit+0x190>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800416c:	231f      	movs	r3, #31
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2203      	movs	r2, #3
 8004172:	701a      	strb	r2, [r3, #0]
          goto error;
 8004174:	e079      	b.n	800426a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1cd      	bne.n	800411c <HAL_SPI_Transmit+0x140>
 8004180:	e04f      	b.n	8004222 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_SPI_Transmit+0x1b8>
 800418a:	2316      	movs	r3, #22
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d141      	bne.n	8004218 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041ba:	e02d      	b.n	8004218 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2202      	movs	r2, #2
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d113      	bne.n	80041f2 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80041f0:	e012      	b.n	8004218 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f2:	f7fe f87b 	bl	80022ec <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d802      	bhi.n	8004208 <HAL_SPI_Transmit+0x22c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	d102      	bne.n	800420e <HAL_SPI_Transmit+0x232>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800420e:	231f      	movs	r3, #31
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2203      	movs	r2, #3
 8004214:	701a      	strb	r2, [r3, #0]
          goto error;
 8004216:	e028      	b.n	800426a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1cc      	bne.n	80041bc <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 fc07 	bl	8004a3c <SPI_EndRxTxTransaction>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800425e:	231f      	movs	r3, #31
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e000      	b.n	800426a <HAL_SPI_Transmit+0x28e>
  }

error:
 8004268:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2251      	movs	r2, #81	; 0x51
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2250      	movs	r2, #80	; 0x50
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800427a:	231f      	movs	r3, #31
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	781b      	ldrb	r3, [r3, #0]
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b008      	add	sp, #32
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	1dbb      	adds	r3, r7, #6
 8004296:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004298:	2317      	movs	r3, #23
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	2382      	movs	r3, #130	; 0x82
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d113      	bne.n	80042d4 <HAL_SPI_Receive+0x4c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10f      	bne.n	80042d4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2251      	movs	r2, #81	; 0x51
 80042b8:	2104      	movs	r1, #4
 80042ba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042bc:	1dbb      	adds	r3, r7, #6
 80042be:	881c      	ldrh	r4, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	0023      	movs	r3, r4
 80042cc:	f000 f902 	bl	80044d4 <HAL_SPI_TransmitReceive>
 80042d0:	0003      	movs	r3, r0
 80042d2:	e0f9      	b.n	80044c8 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2250      	movs	r2, #80	; 0x50
 80042d8:	5c9b      	ldrb	r3, [r3, r2]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Receive+0x5a>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0f2      	b.n	80044c8 <HAL_SPI_Receive+0x240>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2250      	movs	r2, #80	; 0x50
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ea:	f7fd ffff 	bl	80022ec <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2251      	movs	r2, #81	; 0x51
 80042f6:	5c9b      	ldrb	r3, [r3, r2]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d004      	beq.n	8004308 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80042fe:	2317      	movs	r3, #23
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2202      	movs	r2, #2
 8004304:	701a      	strb	r2, [r3, #0]
    goto error;
 8004306:	e0d4      	b.n	80044b2 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_SPI_Receive+0x8e>
 800430e:	1dbb      	adds	r3, r7, #6
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004316:	2317      	movs	r3, #23
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
    goto error;
 800431e:	e0c8      	b.n	80044b2 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2251      	movs	r2, #81	; 0x51
 8004324:	2104      	movs	r1, #4
 8004326:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1dba      	adds	r2, r7, #6
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1dba      	adds	r2, r7, #6
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	429a      	cmp	r2, r3
 800436c:	d10f      	bne.n	800438e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	438a      	bics	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4951      	ldr	r1, [pc, #324]	; (80044d0 <HAL_SPI_Receive+0x248>)
 800438a:	400a      	ands	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	4013      	ands	r3, r2
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d164      	bne.n	800447e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043b4:	e02f      	b.n	8004416 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2201      	movs	r2, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d115      	bne.n	80043f0 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	001a      	movs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ee:	e012      	b.n	8004416 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f0:	f7fd ff7c 	bl	80022ec <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d802      	bhi.n	8004406 <HAL_SPI_Receive+0x17e>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_SPI_Receive+0x184>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800440c:	2317      	movs	r3, #23
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2203      	movs	r2, #3
 8004412:	701a      	strb	r2, [r3, #0]
          goto error;
 8004414:	e04d      	b.n	80044b2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ca      	bne.n	80043b6 <HAL_SPI_Receive+0x12e>
 8004420:	e032      	b.n	8004488 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2201      	movs	r2, #1
 800442a:	4013      	ands	r3, r2
 800442c:	2b01      	cmp	r3, #1
 800442e:	d113      	bne.n	8004458 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004456:	e012      	b.n	800447e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004458:	f7fd ff48 	bl	80022ec <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d802      	bhi.n	800446e <HAL_SPI_Receive+0x1e6>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_SPI_Receive+0x1ec>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8004474:	2317      	movs	r3, #23
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2203      	movs	r2, #3
 800447a:	701a      	strb	r2, [r3, #0]
          goto error;
 800447c:	e019      	b.n	80044b2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1cc      	bne.n	8004422 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	6839      	ldr	r1, [r7, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	0018      	movs	r0, r3
 8004490:	f000 fa6a 	bl	8004968 <SPI_EndRxTransaction>
 8004494:	1e03      	subs	r3, r0, #0
 8004496:	d002      	beq.n	800449e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80044a6:	2317      	movs	r3, #23
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e000      	b.n	80044b2 <HAL_SPI_Receive+0x22a>
  }

error :
 80044b0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2251      	movs	r2, #81	; 0x51
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2250      	movs	r2, #80	; 0x50
 80044be:	2100      	movs	r1, #0
 80044c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80044c2:	2317      	movs	r3, #23
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	781b      	ldrb	r3, [r3, #0]
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b007      	add	sp, #28
 80044ce:	bd90      	pop	{r4, r7, pc}
 80044d0:	ffffbfff 	.word	0xffffbfff

080044d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	001a      	movs	r2, r3
 80044e2:	1cbb      	adds	r3, r7, #2
 80044e4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ea:	232b      	movs	r3, #43	; 0x2b
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2250      	movs	r2, #80	; 0x50
 80044f6:	5c9b      	ldrb	r3, [r3, r2]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x2c>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e1a0      	b.n	8004842 <HAL_SPI_TransmitReceive+0x36e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2250      	movs	r2, #80	; 0x50
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004508:	f7fd fef0 	bl	80022ec <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004510:	2023      	movs	r0, #35	; 0x23
 8004512:	183b      	adds	r3, r7, r0
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	2151      	movs	r1, #81	; 0x51
 8004518:	5c52      	ldrb	r2, [r2, r1]
 800451a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004522:	231a      	movs	r3, #26
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	1cba      	adds	r2, r7, #2
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452c:	183b      	adds	r3, r7, r0
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d011      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x84>
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	2382      	movs	r3, #130	; 0x82
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	429a      	cmp	r2, r3
 800453c:	d107      	bne.n	800454e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <HAL_SPI_TransmitReceive+0x7a>
 8004546:	183b      	adds	r3, r7, r0
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d004      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800454e:	232b      	movs	r3, #43	; 0x2b
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2202      	movs	r2, #2
 8004554:	701a      	strb	r2, [r3, #0]
    goto error;
 8004556:	e169      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <HAL_SPI_TransmitReceive+0x98>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_SPI_TransmitReceive+0x98>
 8004564:	1cbb      	adds	r3, r7, #2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800456c:	232b      	movs	r3, #43	; 0x2b
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
    goto error;
 8004574:	e15a      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2251      	movs	r2, #81	; 0x51
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b04      	cmp	r3, #4
 8004580:	d003      	beq.n	800458a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2251      	movs	r2, #81	; 0x51
 8004586:	2105      	movs	r1, #5
 8004588:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1cba      	adds	r2, r7, #2
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1cba      	adds	r2, r7, #2
 80045a2:	8812      	ldrh	r2, [r2, #0]
 80045a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1cba      	adds	r2, r7, #2
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1cba      	adds	r2, r7, #2
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d007      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d000      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x120>
 80045f2:	e07a      	b.n	80046ea <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x132>
 80045fc:	231a      	movs	r3, #26
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d166      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	881a      	ldrh	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800462a:	e053      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2202      	movs	r2, #2
 8004634:	4013      	ands	r3, r2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d11b      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x19e>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x19e>
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d113      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	1c9a      	adds	r2, r3, #2
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2201      	movs	r2, #1
 800467a:	4013      	ands	r3, r2
 800467c:	2b01      	cmp	r3, #1
 800467e:	d119      	bne.n	80046b4 <HAL_SPI_TransmitReceive+0x1e0>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d014      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	b292      	uxth	r2, r2
 8004696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	1c9a      	adds	r2, r3, #2
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046b0:	2301      	movs	r3, #1
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046b4:	f7fd fe1a 	bl	80022ec <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d807      	bhi.n	80046d4 <HAL_SPI_TransmitReceive+0x200>
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	3301      	adds	r3, #1
 80046c8:	d004      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80046ca:	232b      	movs	r3, #43	; 0x2b
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	2203      	movs	r2, #3
 80046d0:	701a      	strb	r2, [r3, #0]
        goto error;
 80046d2:	e0ab      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1a6      	bne.n	800462c <HAL_SPI_TransmitReceive+0x158>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1a1      	bne.n	800462c <HAL_SPI_TransmitReceive+0x158>
 80046e8:	e07f      	b.n	80047ea <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x22a>
 80046f2:	231a      	movs	r3, #26
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d000      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x22a>
 80046fc:	e06b      	b.n	80047d6 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004724:	e057      	b.n	80047d6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d11c      	bne.n	800476e <HAL_SPI_TransmitReceive+0x29a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <HAL_SPI_TransmitReceive+0x29a>
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d114      	bne.n	800476e <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	2b01      	cmp	r3, #1
 800477a:	d119      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x2dc>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d014      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ac:	2301      	movs	r3, #1
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047b0:	f7fd fd9c 	bl	80022ec <HAL_GetTick>
 80047b4:	0002      	movs	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047bc:	429a      	cmp	r2, r3
 80047be:	d802      	bhi.n	80047c6 <HAL_SPI_TransmitReceive+0x2f2>
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c2:	3301      	adds	r3, #1
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x2f8>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80047cc:	232b      	movs	r3, #43	; 0x2b
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2203      	movs	r2, #3
 80047d2:	701a      	strb	r2, [r3, #0]
        goto error;
 80047d4:	e02a      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1a2      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x252>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d19d      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f923 	bl	8004a3c <SPI_EndRxTxTransaction>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d007      	beq.n	800480a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80047fa:	232b      	movs	r3, #43	; 0x2b
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004808:	e010      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	e000      	b.n	800482c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800482a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2251      	movs	r2, #81	; 0x51
 8004830:	2101      	movs	r1, #1
 8004832:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2250      	movs	r2, #80	; 0x50
 8004838:	2100      	movs	r1, #0
 800483a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800483c:	232b      	movs	r3, #43	; 0x2b
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	781b      	ldrb	r3, [r3, #0]
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b00c      	add	sp, #48	; 0x30
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800485c:	f7fd fd46 	bl	80022ec <HAL_GetTick>
 8004860:	0002      	movs	r2, r0
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	18d3      	adds	r3, r2, r3
 800486a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800486c:	f7fd fd3e 	bl	80022ec <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	015b      	lsls	r3, r3, #5
 800487a:	0d1b      	lsrs	r3, r3, #20
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	4353      	muls	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	e058      	b.n	8004936 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	d055      	beq.n	8004936 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800488a:	f7fd fd2f 	bl	80022ec <HAL_GetTick>
 800488e:	0002      	movs	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	429a      	cmp	r2, r3
 8004898:	d902      	bls.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d142      	bne.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	21e0      	movs	r1, #224	; 0xe0
 80048ac:	438a      	bics	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	2382      	movs	r3, #130	; 0x82
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d113      	bne.n	80048e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d005      	beq.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	438a      	bics	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	019b      	lsls	r3, r3, #6
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d110      	bne.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	491a      	ldr	r1, [pc, #104]	; (8004964 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	0189      	lsls	r1, r1, #6
 800490e:	430a      	orrs	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2251      	movs	r2, #81	; 0x51
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2250      	movs	r2, #80	; 0x50
 800491e:	2100      	movs	r1, #0
 8004920:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e017      	b.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3b01      	subs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	425a      	negs	r2, r3
 8004946:	4153      	adcs	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	001a      	movs	r2, r3
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d197      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b008      	add	sp, #32
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	2000002c 	.word	0x2000002c
 8004964:	ffffdfff 	.word	0xffffdfff

08004968 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	2382      	movs	r3, #130	; 0x82
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	429a      	cmp	r2, r3
 800497e:	d113      	bne.n	80049a8 <SPI_EndRxTransaction+0x40>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	429a      	cmp	r2, r3
 800498a:	d005      	beq.n	8004998 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	438a      	bics	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	2382      	movs	r3, #130	; 0x82
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d12b      	bne.n	8004a0c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	429a      	cmp	r2, r3
 80049be:	d012      	beq.n	80049e6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	0013      	movs	r3, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	f7ff ff3d 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d02d      	beq.n	8004a32 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	2220      	movs	r2, #32
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e026      	b.n	8004a34 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	0013      	movs	r3, r2
 80049f0:	2200      	movs	r2, #0
 80049f2:	2101      	movs	r1, #1
 80049f4:	f7ff ff2a 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d01a      	beq.n	8004a32 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	2220      	movs	r2, #32
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e013      	b.n	8004a34 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	0013      	movs	r3, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	2101      	movs	r1, #1
 8004a1a:	f7ff ff17 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004a1e:	1e03      	subs	r3, r0, #0
 8004a20:	d007      	beq.n	8004a32 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	2220      	movs	r2, #32
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e000      	b.n	8004a34 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <SPI_EndRxTxTransaction+0x84>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	491d      	ldr	r1, [pc, #116]	; (8004ac4 <SPI_EndRxTxTransaction+0x88>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fb fb5a 	bl	8000108 <__udivsi3>
 8004a54:	0003      	movs	r3, r0
 8004a56:	001a      	movs	r2, r3
 8004a58:	0013      	movs	r3, r2
 8004a5a:	015b      	lsls	r3, r3, #5
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	2382      	movs	r3, #130	; 0x82
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d112      	bne.n	8004a98 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	0013      	movs	r3, r2
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	f7ff fee4 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d016      	beq.n	8004ab6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e00f      	b.n	8004ab8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d0f2      	beq.n	8004a98 <SPI_EndRxTxTransaction+0x5c>
 8004ab2:	e000      	b.n	8004ab6 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004ab4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b006      	add	sp, #24
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000002c 	.word	0x2000002c
 8004ac4:	016e3600 	.word	0x016e3600

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e032      	b.n	8004b40 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2239      	movs	r2, #57	; 0x39
 8004ade:	5c9b      	ldrb	r3, [r3, r2]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2238      	movs	r2, #56	; 0x38
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fd fa73 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2239      	movs	r2, #57	; 0x39
 8004afa:	2102      	movs	r1, #2
 8004afc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	0019      	movs	r1, r3
 8004b08:	0010      	movs	r0, r2
 8004b0a:	f000 fa8b 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	223e      	movs	r2, #62	; 0x3e
 8004b12:	2101      	movs	r1, #1
 8004b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	223a      	movs	r2, #58	; 0x3a
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	5499      	strb	r1, [r3, r2]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	223b      	movs	r2, #59	; 0x3b
 8004b22:	2101      	movs	r1, #1
 8004b24:	5499      	strb	r1, [r3, r2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	223c      	movs	r2, #60	; 0x3c
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	223d      	movs	r2, #61	; 0x3d
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2239      	movs	r2, #57	; 0x39
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e032      	b.n	8004bc0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2239      	movs	r2, #57	; 0x39
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2238      	movs	r2, #56	; 0x38
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f829 	bl	8004bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2239      	movs	r2, #57	; 0x39
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f000 fa4b 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	223e      	movs	r2, #62	; 0x3e
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223a      	movs	r2, #58	; 0x3a
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223b      	movs	r2, #59	; 0x3b
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223c      	movs	r2, #60	; 0x3c
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	223d      	movs	r2, #61	; 0x3d
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2239      	movs	r2, #57	; 0x39
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x22>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	223a      	movs	r2, #58	; 0x3a
 8004bec:	5c9b      	ldrb	r3, [r3, r2]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	1e5a      	subs	r2, r3, #1
 8004bf4:	4193      	sbcs	r3, r2
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e01f      	b.n	8004c3a <HAL_TIM_PWM_Start+0x62>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d108      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x3a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	223b      	movs	r2, #59	; 0x3b
 8004c04:	5c9b      	ldrb	r3, [r3, r2]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	4193      	sbcs	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	e013      	b.n	8004c3a <HAL_TIM_PWM_Start+0x62>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d108      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x52>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223c      	movs	r2, #60	; 0x3c
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	4193      	sbcs	r3, r2
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e007      	b.n	8004c3a <HAL_TIM_PWM_Start+0x62>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	223d      	movs	r2, #61	; 0x3d
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	1e5a      	subs	r2, r3, #1
 8004c36:	4193      	sbcs	r3, r2
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e04d      	b.n	8004cde <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0x7a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	223a      	movs	r2, #58	; 0x3a
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	5499      	strb	r1, [r3, r2]
 8004c50:	e013      	b.n	8004c7a <HAL_TIM_PWM_Start+0xa2>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x8a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223b      	movs	r2, #59	; 0x3b
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	5499      	strb	r1, [r3, r2]
 8004c60:	e00b      	b.n	8004c7a <HAL_TIM_PWM_Start+0xa2>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x9a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	223c      	movs	r2, #60	; 0x3c
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]
 8004c70:	e003      	b.n	8004c7a <HAL_TIM_PWM_Start+0xa2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	223d      	movs	r2, #61	; 0x3d
 8004c76:	2102      	movs	r1, #2
 8004c78:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	2201      	movs	r2, #1
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 fbc0 	bl	8005408 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	05db      	lsls	r3, r3, #23
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_PWM_Start+0xd0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_TIM_PWM_Start+0x110>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_PWM_Start+0xd0>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <HAL_TIM_PWM_Start+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2207      	movs	r2, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	40010800 	.word	0x40010800
 8004cec:	40011400 	.word	0x40011400

08004cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfc:	2317      	movs	r3, #23
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2238      	movs	r2, #56	; 0x38
 8004d08:	5c9b      	ldrb	r3, [r3, r2]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0ad      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2238      	movs	r2, #56	; 0x38
 8004d16:	2101      	movs	r1, #1
 8004d18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d100      	bne.n	8004d22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004d20:	e076      	b.n	8004e10 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d900      	bls.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004d28:	e095      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d04e      	beq.n	8004dce <HAL_TIM_PWM_ConfigChannel+0xde>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d900      	bls.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004d36:	e08e      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d021      	beq.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d44:	e087      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0011      	movs	r1, r2
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 f9bc 	bl	80050cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2108      	movs	r1, #8
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2104      	movs	r1, #4
 8004d70:	438a      	bics	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	619a      	str	r2, [r3, #24]
      break;
 8004d86:	e06b      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 f9d7 	bl	8005144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	0109      	lsls	r1, r1, #4
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4931      	ldr	r1, [pc, #196]	; (8004e78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
      break;
 8004dcc:	e048      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0011      	movs	r1, r2
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 f9f6 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2108      	movs	r1, #8
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2104      	movs	r1, #4
 8004df8:	438a      	bics	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69d9      	ldr	r1, [r3, #28]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	61da      	str	r2, [r3, #28]
      break;
 8004e0e:	e027      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	0011      	movs	r1, r2
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 fa15 	bl	8005248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0109      	lsls	r1, r1, #4
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	490f      	ldr	r1, [pc, #60]	; (8004e78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69d9      	ldr	r1, [r3, #28]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e004      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004e56:	2317      	movs	r3, #23
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2238      	movs	r2, #56	; 0x38
 8004e64:	2100      	movs	r1, #0
 8004e66:	5499      	strb	r1, [r3, r2]

  return status;
 8004e68:	2317      	movs	r3, #23
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	781b      	ldrb	r3, [r3, #0]
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b006      	add	sp, #24
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	fffffbff 	.word	0xfffffbff

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	230f      	movs	r3, #15
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2238      	movs	r2, #56	; 0x38
 8004e92:	5c9b      	ldrb	r3, [r3, r2]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x20>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0bc      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x19a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2238      	movs	r2, #56	; 0x38
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2239      	movs	r2, #57	; 0x39
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2277      	movs	r2, #119	; 0x77
 8004eb8:	4393      	bics	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2280      	movs	r2, #128	; 0x80
 8004ed2:	0192      	lsls	r2, r2, #6
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d040      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xde>
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	0192      	lsls	r2, r2, #6
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d900      	bls.n	8004ee2 <HAL_TIM_ConfigClockSource+0x66>
 8004ee0:	e088      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	0152      	lsls	r2, r2, #5
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d100      	bne.n	8004eec <HAL_TIM_ConfigClockSource+0x70>
 8004eea:	e088      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x182>
 8004eec:	2280      	movs	r2, #128	; 0x80
 8004eee:	0152      	lsls	r2, r2, #5
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d900      	bls.n	8004ef6 <HAL_TIM_ConfigClockSource+0x7a>
 8004ef4:	e07e      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004ef6:	2b70      	cmp	r3, #112	; 0x70
 8004ef8:	d018      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0xb0>
 8004efa:	d900      	bls.n	8004efe <HAL_TIM_ConfigClockSource+0x82>
 8004efc:	e07a      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004efe:	2b60      	cmp	r3, #96	; 0x60
 8004f00:	d04f      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x126>
 8004f02:	d900      	bls.n	8004f06 <HAL_TIM_ConfigClockSource+0x8a>
 8004f04:	e076      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004f06:	2b50      	cmp	r3, #80	; 0x50
 8004f08:	d03b      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x106>
 8004f0a:	d900      	bls.n	8004f0e <HAL_TIM_ConfigClockSource+0x92>
 8004f0c:	e072      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d057      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x146>
 8004f12:	d900      	bls.n	8004f16 <HAL_TIM_ConfigClockSource+0x9a>
 8004f14:	e06e      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	d063      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x166>
 8004f1a:	d86b      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d060      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x166>
 8004f20:	d868      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05d      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x166>
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d05b      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x166>
 8004f2a:	e063      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f000 fa44 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2277      	movs	r2, #119	; 0x77
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
      break;
 8004f58:	e052      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f000 fa2d 	bl	80053c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	01c9      	lsls	r1, r1, #7
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
      break;
 8004f80:	e03e      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	001a      	movs	r2, r3
 8004f90:	f000 f9a0 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2150      	movs	r1, #80	; 0x50
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f9fa 	bl	8005394 <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e02e      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	001a      	movs	r2, r3
 8004fb0:	f000 f9be 	bl	8005330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2160      	movs	r1, #96	; 0x60
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f9ea 	bl	8005394 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e01e      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	001a      	movs	r2, r3
 8004fd0:	f000 f980 	bl	80052d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f9da 	bl	8005394 <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e00e      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	0019      	movs	r1, r3
 8004fec:	0010      	movs	r0, r2
 8004fee:	f000 f9d1 	bl	8005394 <TIM_ITRx_SetConfig>
      break;
 8004ff2:	e005      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	230f      	movs	r3, #15
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ffe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2239      	movs	r2, #57	; 0x39
 8005004:	2101      	movs	r1, #1
 8005006:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2238      	movs	r2, #56	; 0x38
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

  return status;
 8005010:	230f      	movs	r3, #15
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	781b      	ldrb	r3, [r3, #0]
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	b004      	add	sp, #16
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	ffff00ff 	.word	0xffff00ff

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	05db      	lsls	r3, r3, #23
 800503a:	429a      	cmp	r2, r3
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0x2a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <TIM_Base_SetConfig+0x9c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0x2a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <TIM_Base_SetConfig+0xa0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2270      	movs	r2, #112	; 0x70
 8005052:	4393      	bics	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	05db      	lsls	r3, r3, #23
 8005066:	429a      	cmp	r2, r3
 8005068:	d007      	beq.n	800507a <TIM_Base_SetConfig+0x56>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <TIM_Base_SetConfig+0x9c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_Base_SetConfig+0x56>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <TIM_Base_SetConfig+0xa0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <TIM_Base_SetConfig+0xa4>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2280      	movs	r2, #128	; 0x80
 8005090:	4393      	bics	r3, r2
 8005092:	001a      	movs	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	615a      	str	r2, [r3, #20]
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40010800 	.word	0x40010800
 80050c4:	40011400 	.word	0x40011400
 80050c8:	fffffcff 	.word	0xfffffcff

080050cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	2201      	movs	r2, #1
 80050dc:	4393      	bics	r3, r2
 80050de:	001a      	movs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2270      	movs	r2, #112	; 0x70
 80050fa:	4393      	bics	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2203      	movs	r2, #3
 8005102:	4393      	bics	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2202      	movs	r2, #2
 8005114:	4393      	bics	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	b006      	add	sp, #24
 8005142:	bd80      	pop	{r7, pc}

08005144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	2210      	movs	r2, #16
 8005154:	4393      	bics	r3, r2
 8005156:	001a      	movs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <TIM_OC2_SetConfig+0x7c>)
 8005172:	4013      	ands	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <TIM_OC2_SetConfig+0x80>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2220      	movs	r2, #32
 800518e:	4393      	bics	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b006      	add	sp, #24
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	ffff8fff 	.word	0xffff8fff
 80051c4:	fffffcff 	.word	0xfffffcff

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <TIM_OC3_SetConfig+0x78>)
 80051d8:	401a      	ands	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2270      	movs	r2, #112	; 0x70
 80051f4:	4393      	bics	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2203      	movs	r2, #3
 80051fc:	4393      	bics	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <TIM_OC3_SetConfig+0x7c>)
 800520e:	4013      	ands	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bd80      	pop	{r7, pc}
 8005240:	fffffeff 	.word	0xfffffeff
 8005244:	fffffdff 	.word	0xfffffdff

08005248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <TIM_OC4_SetConfig+0x7c>)
 8005258:	401a      	ands	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <TIM_OC4_SetConfig+0x80>)
 8005274:	4013      	ands	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a14      	ldr	r2, [pc, #80]	; (80052cc <TIM_OC4_SetConfig+0x84>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4a10      	ldr	r2, [pc, #64]	; (80052d0 <TIM_OC4_SetConfig+0x88>)
 8005290:	4013      	ands	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b006      	add	sp, #24
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	ffffefff 	.word	0xffffefff
 80052c8:	ffff8fff 	.word	0xffff8fff
 80052cc:	fffffcff 	.word	0xfffffcff
 80052d0:	ffffdfff 	.word	0xffffdfff

080052d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4393      	bics	r3, r2
 80052ee:	001a      	movs	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	22f0      	movs	r2, #240	; 0xf0
 80052fe:	4393      	bics	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	220a      	movs	r2, #10
 8005310:	4393      	bics	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b006      	add	sp, #24
 800532e:	bd80      	pop	{r7, pc}

08005330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	2210      	movs	r2, #16
 8005342:	4393      	bics	r3, r2
 8005344:	001a      	movs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <TIM_TI2_ConfigInputStage+0x60>)
 800535a:	4013      	ands	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	22a0      	movs	r2, #160	; 0xa0
 800536c:	4393      	bics	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	ffff0fff 	.word	0xffff0fff

08005394 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2270      	movs	r2, #112	; 0x70
 80053a8:	4393      	bics	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	2207      	movs	r2, #7
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	609a      	str	r2, [r3, #8]
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <TIM_ETR_SetConfig+0x3c>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b006      	add	sp, #24
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffff00ff 	.word	0xffff00ff

08005408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	221f      	movs	r2, #31
 8005418:	4013      	ands	r3, r2
 800541a:	2201      	movs	r2, #1
 800541c:	409a      	lsls	r2, r3
 800541e:	0013      	movs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	43d2      	mvns	r2, r2
 800542a:	401a      	ands	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	211f      	movs	r1, #31
 8005438:	400b      	ands	r3, r1
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4099      	lsls	r1, r3
 800543e:	000b      	movs	r3, r1
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b006      	add	sp, #24
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2238      	movs	r2, #56	; 0x38
 800545e:	5c9b      	ldrb	r3, [r3, r2]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e042      	b.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2238      	movs	r2, #56	; 0x38
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2239      	movs	r2, #57	; 0x39
 8005474:	2102      	movs	r1, #2
 8005476:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2270      	movs	r2, #112	; 0x70
 800548c:	4393      	bics	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	05db      	lsls	r3, r3, #23
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d009      	beq.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0f      	ldr	r2, [pc, #60]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10c      	bne.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2280      	movs	r2, #128	; 0x80
 80054c6:	4393      	bics	r3, r2
 80054c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2239      	movs	r2, #57	; 0x39
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2238      	movs	r2, #56	; 0x38
 80054e8:	2100      	movs	r1, #0
 80054ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	40010800 	.word	0x40010800
 80054fc:	40011400 	.word	0x40011400

08005500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e044      	b.n	800559c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2274      	movs	r2, #116	; 0x74
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f7fc fddb 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0018      	movs	r0, r3
 8005544:	f000 f8d8 	bl	80056f8 <UART_SetConfig>
 8005548:	0003      	movs	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e024      	b.n	800559c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fb6b 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	490d      	ldr	r1, [pc, #52]	; (80055a4 <HAL_UART_Init+0xa4>)
 800556e:	400a      	ands	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	212a      	movs	r1, #42	; 0x2a
 800557e:	438a      	bics	r2, r1
 8005580:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2101      	movs	r1, #1
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 fc03 	bl	8005da0 <UART_CheckIdleState>
 800559a:	0003      	movs	r3, r0
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	ffffb7ff 	.word	0xffffb7ff

080055a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d000      	beq.n	80055c2 <HAL_UART_Transmit+0x1a>
 80055c0:	e095      	b.n	80056ee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_UART_Transmit+0x28>
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e08d      	b.n	80056f0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	015b      	lsls	r3, r3, #5
 80055dc:	429a      	cmp	r2, r3
 80055de:	d109      	bne.n	80055f4 <HAL_UART_Transmit+0x4c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e07d      	b.n	80056f0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2274      	movs	r2, #116	; 0x74
 80055f8:	5c9b      	ldrb	r3, [r3, r2]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x5a>
 80055fe:	2302      	movs	r3, #2
 8005600:	e076      	b.n	80056f0 <HAL_UART_Transmit+0x148>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2274      	movs	r2, #116	; 0x74
 8005606:	2101      	movs	r1, #1
 8005608:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	2100      	movs	r1, #0
 8005610:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2221      	movs	r2, #33	; 0x21
 8005616:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005618:	f7fc fe68 	bl	80022ec <HAL_GetTick>
 800561c:	0003      	movs	r3, r0
 800561e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1dba      	adds	r2, r7, #6
 8005624:	2150      	movs	r1, #80	; 0x50
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1dba      	adds	r2, r7, #6
 800562e:	2152      	movs	r1, #82	; 0x52
 8005630:	8812      	ldrh	r2, [r2, #0]
 8005632:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	429a      	cmp	r2, r3
 800563e:	d108      	bne.n	8005652 <HAL_UART_Transmit+0xaa>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e003      	b.n	800565a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2274      	movs	r2, #116	; 0x74
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005662:	e02c      	b.n	80056be <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	0013      	movs	r3, r2
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	f000 fbdd 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d001      	beq.n	800567e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e038      	b.n	80056f0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	001a      	movs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	05d2      	lsls	r2, r2, #23
 8005690:	0dd2      	lsrs	r2, r2, #23
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e007      	b.n	80056ac <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2252      	movs	r2, #82	; 0x52
 80056b0:	5a9b      	ldrh	r3, [r3, r2]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b299      	uxth	r1, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2252      	movs	r2, #82	; 0x52
 80056bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2252      	movs	r2, #82	; 0x52
 80056c2:	5a9b      	ldrh	r3, [r3, r2]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1cc      	bne.n	8005664 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	0013      	movs	r3, r2
 80056d4:	2200      	movs	r2, #0
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	f000 fbaa 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e005      	b.n	80056f0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
  }
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b008      	add	sp, #32
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	b5b0      	push	{r4, r5, r7, lr}
 80056fa:	b08e      	sub	sp, #56	; 0x38
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005700:	231a      	movs	r3, #26
 8005702:	2218      	movs	r2, #24
 8005704:	4694      	mov	ip, r2
 8005706:	44bc      	add	ip, r7
 8005708:	4463      	add	r3, ip
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	431a      	orrs	r2, r3
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4313      	orrs	r3, r2
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4ac1      	ldr	r2, [pc, #772]	; (8005a34 <UART_SetConfig+0x33c>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	430a      	orrs	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4abd      	ldr	r2, [pc, #756]	; (8005a38 <UART_SetConfig+0x340>)
 8005744:	4013      	ands	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4ab7      	ldr	r2, [pc, #732]	; (8005a3c <UART_SetConfig+0x344>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576a:	4313      	orrs	r3, r2
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4ab2      	ldr	r2, [pc, #712]	; (8005a40 <UART_SetConfig+0x348>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4aae      	ldr	r2, [pc, #696]	; (8005a44 <UART_SetConfig+0x34c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d136      	bne.n	80057fc <UART_SetConfig+0x104>
 800578e:	4bae      	ldr	r3, [pc, #696]	; (8005a48 <UART_SetConfig+0x350>)
 8005790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005792:	2203      	movs	r2, #3
 8005794:	4013      	ands	r3, r2
 8005796:	2b03      	cmp	r3, #3
 8005798:	d020      	beq.n	80057dc <UART_SetConfig+0xe4>
 800579a:	d827      	bhi.n	80057ec <UART_SetConfig+0xf4>
 800579c:	2b02      	cmp	r3, #2
 800579e:	d00d      	beq.n	80057bc <UART_SetConfig+0xc4>
 80057a0:	d824      	bhi.n	80057ec <UART_SetConfig+0xf4>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <UART_SetConfig+0xb4>
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d010      	beq.n	80057cc <UART_SetConfig+0xd4>
 80057aa:	e01f      	b.n	80057ec <UART_SetConfig+0xf4>
 80057ac:	231b      	movs	r3, #27
 80057ae:	2218      	movs	r2, #24
 80057b0:	4694      	mov	ip, r2
 80057b2:	44bc      	add	ip, r7
 80057b4:	4463      	add	r3, ip
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e0ab      	b.n	8005914 <UART_SetConfig+0x21c>
 80057bc:	231b      	movs	r3, #27
 80057be:	2218      	movs	r2, #24
 80057c0:	4694      	mov	ip, r2
 80057c2:	44bc      	add	ip, r7
 80057c4:	4463      	add	r3, ip
 80057c6:	2202      	movs	r2, #2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e0a3      	b.n	8005914 <UART_SetConfig+0x21c>
 80057cc:	231b      	movs	r3, #27
 80057ce:	2218      	movs	r2, #24
 80057d0:	4694      	mov	ip, r2
 80057d2:	44bc      	add	ip, r7
 80057d4:	4463      	add	r3, ip
 80057d6:	2204      	movs	r2, #4
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e09b      	b.n	8005914 <UART_SetConfig+0x21c>
 80057dc:	231b      	movs	r3, #27
 80057de:	2218      	movs	r2, #24
 80057e0:	4694      	mov	ip, r2
 80057e2:	44bc      	add	ip, r7
 80057e4:	4463      	add	r3, ip
 80057e6:	2208      	movs	r2, #8
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e093      	b.n	8005914 <UART_SetConfig+0x21c>
 80057ec:	231b      	movs	r3, #27
 80057ee:	2218      	movs	r2, #24
 80057f0:	4694      	mov	ip, r2
 80057f2:	44bc      	add	ip, r7
 80057f4:	4463      	add	r3, ip
 80057f6:	2210      	movs	r2, #16
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e08b      	b.n	8005914 <UART_SetConfig+0x21c>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a92      	ldr	r2, [pc, #584]	; (8005a4c <UART_SetConfig+0x354>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d136      	bne.n	8005874 <UART_SetConfig+0x17c>
 8005806:	4b90      	ldr	r3, [pc, #576]	; (8005a48 <UART_SetConfig+0x350>)
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580a:	220c      	movs	r2, #12
 800580c:	4013      	ands	r3, r2
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d020      	beq.n	8005854 <UART_SetConfig+0x15c>
 8005812:	d827      	bhi.n	8005864 <UART_SetConfig+0x16c>
 8005814:	2b08      	cmp	r3, #8
 8005816:	d00d      	beq.n	8005834 <UART_SetConfig+0x13c>
 8005818:	d824      	bhi.n	8005864 <UART_SetConfig+0x16c>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <UART_SetConfig+0x12c>
 800581e:	2b04      	cmp	r3, #4
 8005820:	d010      	beq.n	8005844 <UART_SetConfig+0x14c>
 8005822:	e01f      	b.n	8005864 <UART_SetConfig+0x16c>
 8005824:	231b      	movs	r3, #27
 8005826:	2218      	movs	r2, #24
 8005828:	4694      	mov	ip, r2
 800582a:	44bc      	add	ip, r7
 800582c:	4463      	add	r3, ip
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e06f      	b.n	8005914 <UART_SetConfig+0x21c>
 8005834:	231b      	movs	r3, #27
 8005836:	2218      	movs	r2, #24
 8005838:	4694      	mov	ip, r2
 800583a:	44bc      	add	ip, r7
 800583c:	4463      	add	r3, ip
 800583e:	2202      	movs	r2, #2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e067      	b.n	8005914 <UART_SetConfig+0x21c>
 8005844:	231b      	movs	r3, #27
 8005846:	2218      	movs	r2, #24
 8005848:	4694      	mov	ip, r2
 800584a:	44bc      	add	ip, r7
 800584c:	4463      	add	r3, ip
 800584e:	2204      	movs	r2, #4
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e05f      	b.n	8005914 <UART_SetConfig+0x21c>
 8005854:	231b      	movs	r3, #27
 8005856:	2218      	movs	r2, #24
 8005858:	4694      	mov	ip, r2
 800585a:	44bc      	add	ip, r7
 800585c:	4463      	add	r3, ip
 800585e:	2208      	movs	r2, #8
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e057      	b.n	8005914 <UART_SetConfig+0x21c>
 8005864:	231b      	movs	r3, #27
 8005866:	2218      	movs	r2, #24
 8005868:	4694      	mov	ip, r2
 800586a:	44bc      	add	ip, r7
 800586c:	4463      	add	r3, ip
 800586e:	2210      	movs	r2, #16
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e04f      	b.n	8005914 <UART_SetConfig+0x21c>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a70      	ldr	r2, [pc, #448]	; (8005a3c <UART_SetConfig+0x344>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d143      	bne.n	8005906 <UART_SetConfig+0x20e>
 800587e:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <UART_SetConfig+0x350>)
 8005880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005882:	23c0      	movs	r3, #192	; 0xc0
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	4013      	ands	r3, r2
 8005888:	22c0      	movs	r2, #192	; 0xc0
 800588a:	0112      	lsls	r2, r2, #4
 800588c:	4293      	cmp	r3, r2
 800588e:	d02a      	beq.n	80058e6 <UART_SetConfig+0x1ee>
 8005890:	22c0      	movs	r2, #192	; 0xc0
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	4293      	cmp	r3, r2
 8005896:	d82e      	bhi.n	80058f6 <UART_SetConfig+0x1fe>
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	0112      	lsls	r2, r2, #4
 800589c:	4293      	cmp	r3, r2
 800589e:	d012      	beq.n	80058c6 <UART_SetConfig+0x1ce>
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	0112      	lsls	r2, r2, #4
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d826      	bhi.n	80058f6 <UART_SetConfig+0x1fe>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <UART_SetConfig+0x1be>
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	00d2      	lsls	r2, r2, #3
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d010      	beq.n	80058d6 <UART_SetConfig+0x1de>
 80058b4:	e01f      	b.n	80058f6 <UART_SetConfig+0x1fe>
 80058b6:	231b      	movs	r3, #27
 80058b8:	2218      	movs	r2, #24
 80058ba:	4694      	mov	ip, r2
 80058bc:	44bc      	add	ip, r7
 80058be:	4463      	add	r3, ip
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e026      	b.n	8005914 <UART_SetConfig+0x21c>
 80058c6:	231b      	movs	r3, #27
 80058c8:	2218      	movs	r2, #24
 80058ca:	4694      	mov	ip, r2
 80058cc:	44bc      	add	ip, r7
 80058ce:	4463      	add	r3, ip
 80058d0:	2202      	movs	r2, #2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e01e      	b.n	8005914 <UART_SetConfig+0x21c>
 80058d6:	231b      	movs	r3, #27
 80058d8:	2218      	movs	r2, #24
 80058da:	4694      	mov	ip, r2
 80058dc:	44bc      	add	ip, r7
 80058de:	4463      	add	r3, ip
 80058e0:	2204      	movs	r2, #4
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e016      	b.n	8005914 <UART_SetConfig+0x21c>
 80058e6:	231b      	movs	r3, #27
 80058e8:	2218      	movs	r2, #24
 80058ea:	4694      	mov	ip, r2
 80058ec:	44bc      	add	ip, r7
 80058ee:	4463      	add	r3, ip
 80058f0:	2208      	movs	r2, #8
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e00e      	b.n	8005914 <UART_SetConfig+0x21c>
 80058f6:	231b      	movs	r3, #27
 80058f8:	2218      	movs	r2, #24
 80058fa:	4694      	mov	ip, r2
 80058fc:	44bc      	add	ip, r7
 80058fe:	4463      	add	r3, ip
 8005900:	2210      	movs	r2, #16
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e006      	b.n	8005914 <UART_SetConfig+0x21c>
 8005906:	231b      	movs	r3, #27
 8005908:	2218      	movs	r2, #24
 800590a:	4694      	mov	ip, r2
 800590c:	44bc      	add	ip, r7
 800590e:	4463      	add	r3, ip
 8005910:	2210      	movs	r2, #16
 8005912:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a48      	ldr	r2, [pc, #288]	; (8005a3c <UART_SetConfig+0x344>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d000      	beq.n	8005920 <UART_SetConfig+0x228>
 800591e:	e09b      	b.n	8005a58 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005920:	231b      	movs	r3, #27
 8005922:	2218      	movs	r2, #24
 8005924:	4694      	mov	ip, r2
 8005926:	44bc      	add	ip, r7
 8005928:	4463      	add	r3, ip
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d01d      	beq.n	800596c <UART_SetConfig+0x274>
 8005930:	dc20      	bgt.n	8005974 <UART_SetConfig+0x27c>
 8005932:	2b04      	cmp	r3, #4
 8005934:	d015      	beq.n	8005962 <UART_SetConfig+0x26a>
 8005936:	dc1d      	bgt.n	8005974 <UART_SetConfig+0x27c>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <UART_SetConfig+0x24a>
 800593c:	2b02      	cmp	r3, #2
 800593e:	d005      	beq.n	800594c <UART_SetConfig+0x254>
 8005940:	e018      	b.n	8005974 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fe f927 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005946:	0003      	movs	r3, r0
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800594a:	e01d      	b.n	8005988 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800594c:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <UART_SetConfig+0x350>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2210      	movs	r2, #16
 8005952:	4013      	ands	r3, r2
 8005954:	d002      	beq.n	800595c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <UART_SetConfig+0x358>)
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800595a:	e015      	b.n	8005988 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800595c:	4b3d      	ldr	r3, [pc, #244]	; (8005a54 <UART_SetConfig+0x35c>)
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005960:	e012      	b.n	8005988 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005962:	f7fe f867 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005966:	0003      	movs	r3, r0
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800596a:	e00d      	b.n	8005988 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005972:	e009      	b.n	8005988 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005978:	231a      	movs	r3, #26
 800597a:	2218      	movs	r2, #24
 800597c:	4694      	mov	ip, r2
 800597e:	44bc      	add	ip, r7
 8005980:	4463      	add	r3, ip
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
        break;
 8005986:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d100      	bne.n	8005990 <UART_SetConfig+0x298>
 800598e:	e139      	b.n	8005c04 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	0013      	movs	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	189b      	adds	r3, r3, r2
 800599a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d305      	bcc.n	80059ac <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d907      	bls.n	80059bc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80059ac:	231a      	movs	r3, #26
 80059ae:	2218      	movs	r2, #24
 80059b0:	4694      	mov	ip, r2
 80059b2:	44bc      	add	ip, r7
 80059b4:	4463      	add	r3, ip
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e123      	b.n	8005c04 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	6939      	ldr	r1, [r7, #16]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	000b      	movs	r3, r1
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	0010      	movs	r0, r2
 80059ce:	0205      	lsls	r5, r0, #8
 80059d0:	431d      	orrs	r5, r3
 80059d2:	000b      	movs	r3, r1
 80059d4:	021c      	lsls	r4, r3, #8
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	1900      	adds	r0, r0, r4
 80059e8:	4169      	adcs	r1, r5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	607b      	str	r3, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f7fa fcfc 	bl	80003f4 <__aeabi_uldivmod>
 80059fc:	0002      	movs	r2, r0
 80059fe:	000b      	movs	r3, r1
 8005a00:	0013      	movs	r3, r2
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a06:	23c0      	movs	r3, #192	; 0xc0
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d309      	bcc.n	8005a22 <UART_SetConfig+0x32a>
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	035b      	lsls	r3, r3, #13
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d204      	bcs.n	8005a22 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e0f0      	b.n	8005c04 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a22:	231a      	movs	r3, #26
 8005a24:	2218      	movs	r2, #24
 8005a26:	4694      	mov	ip, r2
 8005a28:	44bc      	add	ip, r7
 8005a2a:	4463      	add	r3, ip
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e0e8      	b.n	8005c04 <UART_SetConfig+0x50c>
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	efff69f3 	.word	0xefff69f3
 8005a38:	ffffcfff 	.word	0xffffcfff
 8005a3c:	40004800 	.word	0x40004800
 8005a40:	fffff4ff 	.word	0xfffff4ff
 8005a44:	40013800 	.word	0x40013800
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40004400 	.word	0x40004400
 8005a50:	003d0900 	.word	0x003d0900
 8005a54:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d000      	beq.n	8005a66 <UART_SetConfig+0x36e>
 8005a64:	e074      	b.n	8005b50 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005a66:	231b      	movs	r3, #27
 8005a68:	2218      	movs	r2, #24
 8005a6a:	4694      	mov	ip, r2
 8005a6c:	44bc      	add	ip, r7
 8005a6e:	4463      	add	r3, ip
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d822      	bhi.n	8005abc <UART_SetConfig+0x3c4>
 8005a76:	009a      	lsls	r2, r3, #2
 8005a78:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <UART_SetConfig+0x52c>)
 8005a7a:	18d3      	adds	r3, r2, r3
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fe f888 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005a84:	0003      	movs	r3, r0
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a88:	e022      	b.n	8005ad0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8a:	f7fe f899 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a92:	e01d      	b.n	8005ad0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a94:	4b64      	ldr	r3, [pc, #400]	; (8005c28 <UART_SetConfig+0x530>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d002      	beq.n	8005aa4 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <UART_SetConfig+0x534>)
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa2:	e015      	b.n	8005ad0 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8005aa4:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <UART_SetConfig+0x538>)
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aa8:	e012      	b.n	8005ad0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aaa:	f7fd ffc3 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ab2:	e00d      	b.n	8005ad0 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aba:	e009      	b.n	8005ad0 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ac0:	231a      	movs	r3, #26
 8005ac2:	2218      	movs	r2, #24
 8005ac4:	4694      	mov	ip, r2
 8005ac6:	44bc      	add	ip, r7
 8005ac8:	4463      	add	r3, ip
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
        break;
 8005ace:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d100      	bne.n	8005ad8 <UART_SetConfig+0x3e0>
 8005ad6:	e095      	b.n	8005c04 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	005a      	lsls	r2, r3, #1
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	18d2      	adds	r2, r2, r3
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	0019      	movs	r1, r3
 8005aea:	0010      	movs	r0, r2
 8005aec:	f7fa fb0c 	bl	8000108 <__udivsi3>
 8005af0:	0003      	movs	r3, r0
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d921      	bls.n	8005b40 <UART_SetConfig+0x448>
 8005afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d21c      	bcs.n	8005b40 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	200e      	movs	r0, #14
 8005b0c:	2418      	movs	r4, #24
 8005b0e:	193b      	adds	r3, r7, r4
 8005b10:	181b      	adds	r3, r3, r0
 8005b12:	210f      	movs	r1, #15
 8005b14:	438a      	bics	r2, r1
 8005b16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	b299      	uxth	r1, r3
 8005b24:	193b      	adds	r3, r7, r4
 8005b26:	181b      	adds	r3, r3, r0
 8005b28:	193a      	adds	r2, r7, r4
 8005b2a:	1812      	adds	r2, r2, r0
 8005b2c:	8812      	ldrh	r2, [r2, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	193a      	adds	r2, r7, r4
 8005b38:	1812      	adds	r2, r2, r0
 8005b3a:	8812      	ldrh	r2, [r2, #0]
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	e061      	b.n	8005c04 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b40:	231a      	movs	r3, #26
 8005b42:	2218      	movs	r2, #24
 8005b44:	4694      	mov	ip, r2
 8005b46:	44bc      	add	ip, r7
 8005b48:	4463      	add	r3, ip
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e059      	b.n	8005c04 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b50:	231b      	movs	r3, #27
 8005b52:	2218      	movs	r2, #24
 8005b54:	4694      	mov	ip, r2
 8005b56:	44bc      	add	ip, r7
 8005b58:	4463      	add	r3, ip
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d822      	bhi.n	8005ba6 <UART_SetConfig+0x4ae>
 8005b60:	009a      	lsls	r2, r3, #2
 8005b62:	4b34      	ldr	r3, [pc, #208]	; (8005c34 <UART_SetConfig+0x53c>)
 8005b64:	18d3      	adds	r3, r2, r3
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6a:	f7fe f813 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b72:	e022      	b.n	8005bba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b74:	f7fe f824 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b7c:	e01d      	b.n	8005bba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	; (8005c28 <UART_SetConfig+0x530>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	4013      	ands	r3, r2
 8005b86:	d002      	beq.n	8005b8e <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <UART_SetConfig+0x534>)
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b8c:	e015      	b.n	8005bba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <UART_SetConfig+0x538>)
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b92:	e012      	b.n	8005bba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b94:	f7fd ff4e 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9c:	e00d      	b.n	8005bba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005baa:	231a      	movs	r3, #26
 8005bac:	2218      	movs	r2, #24
 8005bae:	4694      	mov	ip, r2
 8005bb0:	44bc      	add	ip, r7
 8005bb2:	4463      	add	r3, ip
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
        break;
 8005bb8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d021      	beq.n	8005c04 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	085a      	lsrs	r2, r3, #1
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	18d2      	adds	r2, r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	0019      	movs	r1, r3
 8005bd0:	0010      	movs	r0, r2
 8005bd2:	f7fa fa99 	bl	8000108 <__udivsi3>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d909      	bls.n	8005bf6 <UART_SetConfig+0x4fe>
 8005be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	025b      	lsls	r3, r3, #9
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d204      	bcs.n	8005bf6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf2:	60da      	str	r2, [r3, #12]
 8005bf4:	e006      	b.n	8005c04 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf6:	231a      	movs	r3, #26
 8005bf8:	2218      	movs	r2, #24
 8005bfa:	4694      	mov	ip, r2
 8005bfc:	44bc      	add	ip, r7
 8005bfe:	4463      	add	r3, ip
 8005c00:	2201      	movs	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2200      	movs	r2, #0
 8005c08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c10:	231a      	movs	r3, #26
 8005c12:	2218      	movs	r2, #24
 8005c14:	4694      	mov	ip, r2
 8005c16:	44bc      	add	ip, r7
 8005c18:	4463      	add	r3, ip
 8005c1a:	781b      	ldrb	r3, [r3, #0]
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b00e      	add	sp, #56	; 0x38
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}
 8005c24:	08006050 	.word	0x08006050
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	003d0900 	.word	0x003d0900
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	08006074 	.word	0x08006074

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2201      	movs	r2, #1
 8005c46:	4013      	ands	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a4a      	ldr	r2, [pc, #296]	; (8005d7c <UART_AdvFeatureConfig+0x144>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	4a43      	ldr	r2, [pc, #268]	; (8005d80 <UART_AdvFeatureConfig+0x148>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	0019      	movs	r1, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2204      	movs	r2, #4
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <UART_AdvFeatureConfig+0x14c>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2208      	movs	r2, #8
 8005cac:	4013      	ands	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4a34      	ldr	r2, [pc, #208]	; (8005d88 <UART_AdvFeatureConfig+0x150>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	0019      	movs	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2210      	movs	r2, #16
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <UART_AdvFeatureConfig+0x154>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	0019      	movs	r1, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2220      	movs	r2, #32
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <UART_AdvFeatureConfig+0x158>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2240      	movs	r2, #64	; 0x40
 8005d12:	4013      	ands	r3, r2
 8005d14:	d01d      	beq.n	8005d52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <UART_AdvFeatureConfig+0x15c>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	035b      	lsls	r3, r3, #13
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d10b      	bne.n	8005d52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <UART_AdvFeatureConfig+0x160>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	0019      	movs	r1, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <UART_AdvFeatureConfig+0x164>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	0019      	movs	r1, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  }
}
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b002      	add	sp, #8
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	fffdffff 	.word	0xfffdffff
 8005d80:	fffeffff 	.word	0xfffeffff
 8005d84:	fffbffff 	.word	0xfffbffff
 8005d88:	ffff7fff 	.word	0xffff7fff
 8005d8c:	ffffefff 	.word	0xffffefff
 8005d90:	ffffdfff 	.word	0xffffdfff
 8005d94:	ffefffff 	.word	0xffefffff
 8005d98:	ff9fffff 	.word	0xff9fffff
 8005d9c:	fff7ffff 	.word	0xfff7ffff

08005da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	2100      	movs	r1, #0
 8005dae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005db0:	f7fc fa9c 	bl	80022ec <HAL_GetTick>
 8005db4:	0003      	movs	r3, r0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d10c      	bne.n	8005de0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	0391      	lsls	r1, r2, #14
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <UART_CheckIdleState+0x8c>)
 8005dd0:	9200      	str	r2, [sp, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f000 f82c 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d001      	beq.n	8005de0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e021      	b.n	8005e24 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2204      	movs	r2, #4
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d10c      	bne.n	8005e08 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	03d1      	lsls	r1, r2, #15
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <UART_CheckIdleState+0x8c>)
 8005df8:	9200      	str	r2, [sp, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f000 f818 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d001      	beq.n	8005e08 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e00d      	b.n	8005e24 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2274      	movs	r2, #116	; 0x74
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	01ffffff 	.word	0x01ffffff

08005e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b094      	sub	sp, #80	; 0x50
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	e0a3      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e44:	3301      	adds	r3, #1
 8005e46:	d100      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e48:	e09f      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fc fa4f 	bl	80022ec <HAL_GetTick>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13d      	bne.n	8005edc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	494c      	ldr	r1, [pc, #304]	; (8005fb4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005e82:	400a      	ands	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2274      	movs	r2, #116	; 0x74
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e067      	b.n	8005fac <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d050      	beq.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d146      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2280      	movs	r2, #128	; 0x80
 8005f02:	0112      	lsls	r2, r2, #4
 8005f04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f06:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0a:	613b      	str	r3, [r7, #16]
  return(result);
 8005f0c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f383 8810 	msr	PRIMASK, r3
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4923      	ldr	r1, [pc, #140]	; (8005fb4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005f28:	400a      	ands	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f383 8810 	msr	PRIMASK, r3
}
 8005f36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f38:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f42:	2301      	movs	r3, #1
 8005f44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	438a      	bics	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2274      	movs	r2, #116	; 0x74
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e010      	b.n	8005fac <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	425a      	negs	r2, r3
 8005f9a:	4153      	adcs	r3, r2
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	1dfb      	adds	r3, r7, #7
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d100      	bne.n	8005faa <UART_WaitOnFlagUntilTimeout+0x17a>
 8005fa8:	e74b      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	0018      	movs	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b014      	add	sp, #80	; 0x50
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	fffffe5f 	.word	0xfffffe5f

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	2600      	movs	r6, #0
 8005fbc:	4d0c      	ldr	r5, [pc, #48]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbe:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fc0:	1b64      	subs	r4, r4, r5
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	2600      	movs	r6, #0
 8005fca:	f000 f821 	bl	8006010 <_init>
 8005fce:	4d0a      	ldr	r5, [pc, #40]	; (8005ff8 <__libc_init_array+0x40>)
 8005fd0:	4c0a      	ldr	r4, [pc, #40]	; (8005ffc <__libc_init_array+0x44>)
 8005fd2:	1b64      	subs	r4, r4, r5
 8005fd4:	10a4      	asrs	r4, r4, #2
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	00b3      	lsls	r3, r6, #2
 8005fde:	58eb      	ldr	r3, [r5, r3]
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	00b3      	lsls	r3, r6, #2
 8005fe8:	58eb      	ldr	r3, [r5, r3]
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	080060a0 	.word	0x080060a0
 8005ff4:	080060a0 	.word	0x080060a0
 8005ff8:	080060a0 	.word	0x080060a0
 8005ffc:	080060a4 	.word	0x080060a4

08006000 <memset>:
 8006000:	0003      	movs	r3, r0
 8006002:	1882      	adds	r2, r0, r2
 8006004:	4293      	cmp	r3, r2
 8006006:	d100      	bne.n	800600a <memset+0xa>
 8006008:	4770      	bx	lr
 800600a:	7019      	strb	r1, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	e7f9      	b.n	8006004 <memset+0x4>

08006010 <_init>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr

0800601c <_fini>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr
