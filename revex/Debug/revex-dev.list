
revex-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08005364  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005364  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f174  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c0  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00032738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015086  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011436  00000000  00000000  00048546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f72a  00000000  00000000  0005997c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d90a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  000d90fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052c8 	.word	0x080052c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080052c8 	.word	0x080052c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 fada 	bl	8000a5c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 fad5 	bl	8000a5c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fadd>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	4646      	mov	r6, r8
 8000620:	46d6      	mov	lr, sl
 8000622:	464f      	mov	r7, r9
 8000624:	024d      	lsls	r5, r1, #9
 8000626:	0242      	lsls	r2, r0, #9
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a52      	lsrs	r2, r2, #9
 800062c:	0a6e      	lsrs	r6, r5, #9
 800062e:	0047      	lsls	r7, r0, #1
 8000630:	46b0      	mov	r8, r6
 8000632:	0e3f      	lsrs	r7, r7, #24
 8000634:	004e      	lsls	r6, r1, #1
 8000636:	0fc4      	lsrs	r4, r0, #31
 8000638:	00d0      	lsls	r0, r2, #3
 800063a:	4694      	mov	ip, r2
 800063c:	003b      	movs	r3, r7
 800063e:	4682      	mov	sl, r0
 8000640:	0e36      	lsrs	r6, r6, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	09ad      	lsrs	r5, r5, #6
 8000646:	428c      	cmp	r4, r1
 8000648:	d06d      	beq.n	8000726 <__aeabi_fadd+0x10a>
 800064a:	1bb8      	subs	r0, r7, r6
 800064c:	4681      	mov	r9, r0
 800064e:	2800      	cmp	r0, #0
 8000650:	dd4d      	ble.n	80006ee <__aeabi_fadd+0xd2>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x3c>
 8000656:	e088      	b.n	800076a <__aeabi_fadd+0x14e>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d05a      	beq.n	8000712 <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	464b      	mov	r3, r9
 8000664:	2201      	movs	r2, #1
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dc0a      	bgt.n	8000680 <__aeabi_fadd+0x64>
 800066a:	002b      	movs	r3, r5
 800066c:	464a      	mov	r2, r9
 800066e:	4649      	mov	r1, r9
 8000670:	40d3      	lsrs	r3, r2
 8000672:	2220      	movs	r2, #32
 8000674:	1a52      	subs	r2, r2, r1
 8000676:	4095      	lsls	r5, r2
 8000678:	002a      	movs	r2, r5
 800067a:	1e55      	subs	r5, r2, #1
 800067c:	41aa      	sbcs	r2, r5
 800067e:	431a      	orrs	r2, r3
 8000680:	4653      	mov	r3, sl
 8000682:	1a9a      	subs	r2, r3, r2
 8000684:	0153      	lsls	r3, r2, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x6e>
 8000688:	e0b9      	b.n	80007fe <__aeabi_fadd+0x1e2>
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	0996      	lsrs	r6, r2, #6
 800068e:	0030      	movs	r0, r6
 8000690:	f000 f9c6 	bl	8000a20 <__clzsi2>
 8000694:	3805      	subs	r0, #5
 8000696:	4086      	lsls	r6, r0
 8000698:	4287      	cmp	r7, r0
 800069a:	dd00      	ble.n	800069e <__aeabi_fadd+0x82>
 800069c:	e0d4      	b.n	8000848 <__aeabi_fadd+0x22c>
 800069e:	0033      	movs	r3, r6
 80006a0:	1bc7      	subs	r7, r0, r7
 80006a2:	2020      	movs	r0, #32
 80006a4:	3701      	adds	r7, #1
 80006a6:	40fb      	lsrs	r3, r7
 80006a8:	1bc7      	subs	r7, r0, r7
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1e56      	subs	r6, r2, #1
 80006b0:	41b2      	sbcs	r2, r6
 80006b2:	2700      	movs	r7, #0
 80006b4:	431a      	orrs	r2, r3
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0xae>
 80006c8:	e09c      	b.n	8000804 <__aeabi_fadd+0x1e8>
 80006ca:	1c7b      	adds	r3, r7, #1
 80006cc:	2ffe      	cmp	r7, #254	; 0xfe
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0xb6>
 80006d0:	e09a      	b.n	8000808 <__aeabi_fadd+0x1ec>
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	0a52      	lsrs	r2, r2, #9
 80006d6:	4694      	mov	ip, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	05d8      	lsls	r0, r3, #23
 80006dc:	4663      	mov	r3, ip
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4320      	orrs	r0, r4
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d049      	beq.n	8000786 <__aeabi_fadd+0x16a>
 80006f2:	1bf3      	subs	r3, r6, r7
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xde>
 80006f8:	e0b6      	b.n	8000868 <__aeabi_fadd+0x24c>
 80006fa:	4652      	mov	r2, sl
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d060      	beq.n	80007c2 <__aeabi_fadd+0x1a6>
 8000700:	3b01      	subs	r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0xec>
 8000706:	e0fc      	b.n	8000902 <__aeabi_fadd+0x2e6>
 8000708:	2eff      	cmp	r6, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xf2>
 800070c:	e0b4      	b.n	8000878 <__aeabi_fadd+0x25c>
 800070e:	000c      	movs	r4, r1
 8000710:	4642      	mov	r2, r8
 8000712:	2a00      	cmp	r2, #0
 8000714:	d078      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 8000716:	2080      	movs	r0, #128	; 0x80
 8000718:	03c0      	lsls	r0, r0, #15
 800071a:	4310      	orrs	r0, r2
 800071c:	0242      	lsls	r2, r0, #9
 800071e:	0a53      	lsrs	r3, r2, #9
 8000720:	469c      	mov	ip, r3
 8000722:	23ff      	movs	r3, #255	; 0xff
 8000724:	e7d9      	b.n	80006da <__aeabi_fadd+0xbe>
 8000726:	1bb9      	subs	r1, r7, r6
 8000728:	2900      	cmp	r1, #0
 800072a:	dd71      	ble.n	8000810 <__aeabi_fadd+0x1f4>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d03f      	beq.n	80007b0 <__aeabi_fadd+0x194>
 8000730:	2fff      	cmp	r7, #255	; 0xff
 8000732:	d0ee      	beq.n	8000712 <__aeabi_fadd+0xf6>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431d      	orrs	r5, r3
 800073a:	2201      	movs	r2, #1
 800073c:	291b      	cmp	r1, #27
 800073e:	dc07      	bgt.n	8000750 <__aeabi_fadd+0x134>
 8000740:	002a      	movs	r2, r5
 8000742:	2320      	movs	r3, #32
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a59      	subs	r1, r3, r1
 8000748:	408d      	lsls	r5, r1
 800074a:	1e6b      	subs	r3, r5, #1
 800074c:	419d      	sbcs	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	4452      	add	r2, sl
 8000752:	0153      	lsls	r3, r2, #5
 8000754:	d553      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 8000756:	3701      	adds	r7, #1
 8000758:	2fff      	cmp	r7, #255	; 0xff
 800075a:	d055      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 800075c:	2301      	movs	r3, #1
 800075e:	497b      	ldr	r1, [pc, #492]	; (800094c <__aeabi_fadd+0x330>)
 8000760:	4013      	ands	r3, r2
 8000762:	0852      	lsrs	r2, r2, #1
 8000764:	400a      	ands	r2, r1
 8000766:	431a      	orrs	r2, r3
 8000768:	e7a5      	b.n	80006b6 <__aeabi_fadd+0x9a>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d02c      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	469c      	mov	ip, r3
 8000774:	44e1      	add	r9, ip
 8000776:	464b      	mov	r3, r9
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x162>
 800077c:	e0ad      	b.n	80008da <__aeabi_fadd+0x2be>
 800077e:	2fff      	cmp	r7, #255	; 0xff
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x168>
 8000782:	e76e      	b.n	8000662 <__aeabi_fadd+0x46>
 8000784:	e7c5      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000786:	20fe      	movs	r0, #254	; 0xfe
 8000788:	1c7e      	adds	r6, r7, #1
 800078a:	4230      	tst	r0, r6
 800078c:	d160      	bne.n	8000850 <__aeabi_fadd+0x234>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fadd+0x178>
 8000792:	e093      	b.n	80008bc <__aeabi_fadd+0x2a0>
 8000794:	4652      	mov	r2, sl
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x180>
 800079a:	e0b6      	b.n	800090a <__aeabi_fadd+0x2ee>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d09c      	beq.n	80006da <__aeabi_fadd+0xbe>
 80007a0:	1b52      	subs	r2, r2, r5
 80007a2:	0150      	lsls	r0, r2, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x18c>
 80007a6:	e0c3      	b.n	8000930 <__aeabi_fadd+0x314>
 80007a8:	4653      	mov	r3, sl
 80007aa:	000c      	movs	r4, r1
 80007ac:	1aea      	subs	r2, r5, r3
 80007ae:	e782      	b.n	80006b6 <__aeabi_fadd+0x9a>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d009      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 80007b4:	3901      	subs	r1, #1
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x1a0>
 80007ba:	e08b      	b.n	80008d4 <__aeabi_fadd+0x2b8>
 80007bc:	2fff      	cmp	r7, #255	; 0xff
 80007be:	d1bc      	bne.n	800073a <__aeabi_fadd+0x11e>
 80007c0:	e7a7      	b.n	8000712 <__aeabi_fadd+0xf6>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	0037      	movs	r7, r6
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d0a2      	beq.n	8000712 <__aeabi_fadd+0xf6>
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	0a53      	lsrs	r3, r2, #9
 80007d0:	469c      	mov	ip, r3
 80007d2:	b2fb      	uxtb	r3, r7
 80007d4:	e781      	b.n	80006da <__aeabi_fadd+0xbe>
 80007d6:	21fe      	movs	r1, #254	; 0xfe
 80007d8:	3701      	adds	r7, #1
 80007da:	4239      	tst	r1, r7
 80007dc:	d165      	bne.n	80008aa <__aeabi_fadd+0x28e>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d17e      	bne.n	80008e0 <__aeabi_fadd+0x2c4>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x1cc>
 80007e6:	e0aa      	b.n	800093e <__aeabi_fadd+0x322>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x1d2>
 80007ec:	e775      	b.n	80006da <__aeabi_fadd+0xbe>
 80007ee:	002a      	movs	r2, r5
 80007f0:	4452      	add	r2, sl
 80007f2:	2700      	movs	r7, #0
 80007f4:	0153      	lsls	r3, r2, #5
 80007f6:	d502      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <__aeabi_fadd+0x334>)
 80007fa:	3701      	adds	r7, #1
 80007fc:	401a      	ands	r2, r3
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x1e8>
 8000802:	e75a      	b.n	80006ba <__aeabi_fadd+0x9e>
 8000804:	08d2      	lsrs	r2, r2, #3
 8000806:	e7df      	b.n	80007c8 <__aeabi_fadd+0x1ac>
 8000808:	2200      	movs	r2, #0
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	4694      	mov	ip, r2
 800080e:	e764      	b.n	80006da <__aeabi_fadd+0xbe>
 8000810:	2900      	cmp	r1, #0
 8000812:	d0e0      	beq.n	80007d6 <__aeabi_fadd+0x1ba>
 8000814:	1bf3      	subs	r3, r6, r7
 8000816:	2f00      	cmp	r7, #0
 8000818:	d03e      	beq.n	8000898 <__aeabi_fadd+0x27c>
 800081a:	2eff      	cmp	r6, #255	; 0xff
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x204>
 800081e:	e777      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0001      	movs	r1, r0
 8000824:	04d2      	lsls	r2, r2, #19
 8000826:	4311      	orrs	r1, r2
 8000828:	468a      	mov	sl, r1
 800082a:	2201      	movs	r2, #1
 800082c:	2b1b      	cmp	r3, #27
 800082e:	dc08      	bgt.n	8000842 <__aeabi_fadd+0x226>
 8000830:	4652      	mov	r2, sl
 8000832:	2120      	movs	r1, #32
 8000834:	4650      	mov	r0, sl
 8000836:	40da      	lsrs	r2, r3
 8000838:	1acb      	subs	r3, r1, r3
 800083a:	4098      	lsls	r0, r3
 800083c:	1e43      	subs	r3, r0, #1
 800083e:	4198      	sbcs	r0, r3
 8000840:	4302      	orrs	r2, r0
 8000842:	0037      	movs	r7, r6
 8000844:	1952      	adds	r2, r2, r5
 8000846:	e784      	b.n	8000752 <__aeabi_fadd+0x136>
 8000848:	4a41      	ldr	r2, [pc, #260]	; (8000950 <__aeabi_fadd+0x334>)
 800084a:	1a3f      	subs	r7, r7, r0
 800084c:	4032      	ands	r2, r6
 800084e:	e732      	b.n	80006b6 <__aeabi_fadd+0x9a>
 8000850:	4653      	mov	r3, sl
 8000852:	1b5e      	subs	r6, r3, r5
 8000854:	0173      	lsls	r3, r6, #5
 8000856:	d42d      	bmi.n	80008b4 <__aeabi_fadd+0x298>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x242>
 800085c:	e717      	b.n	800068e <__aeabi_fadd+0x72>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	2300      	movs	r3, #0
 8000864:	4694      	mov	ip, r2
 8000866:	e738      	b.n	80006da <__aeabi_fadd+0xbe>
 8000868:	2eff      	cmp	r6, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fadd+0x252>
 800086c:	e74f      	b.n	800070e <__aeabi_fadd+0xf2>
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	4650      	mov	r0, sl
 8000872:	04d2      	lsls	r2, r2, #19
 8000874:	4310      	orrs	r0, r2
 8000876:	4682      	mov	sl, r0
 8000878:	2201      	movs	r2, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x274>
 800087e:	4652      	mov	r2, sl
 8000880:	2420      	movs	r4, #32
 8000882:	4650      	mov	r0, sl
 8000884:	40da      	lsrs	r2, r3
 8000886:	1ae3      	subs	r3, r4, r3
 8000888:	4098      	lsls	r0, r3
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4198      	sbcs	r0, r3
 800088e:	4302      	orrs	r2, r0
 8000890:	000c      	movs	r4, r1
 8000892:	0037      	movs	r7, r6
 8000894:	1aaa      	subs	r2, r5, r2
 8000896:	e6f5      	b.n	8000684 <__aeabi_fadd+0x68>
 8000898:	2800      	cmp	r0, #0
 800089a:	d093      	beq.n	80007c4 <__aeabi_fadd+0x1a8>
 800089c:	3b01      	subs	r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d04f      	beq.n	8000942 <__aeabi_fadd+0x326>
 80008a2:	2eff      	cmp	r6, #255	; 0xff
 80008a4:	d1c1      	bne.n	800082a <__aeabi_fadd+0x20e>
 80008a6:	4642      	mov	r2, r8
 80008a8:	e733      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d0ac      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 80008ae:	4455      	add	r5, sl
 80008b0:	086a      	lsrs	r2, r5, #1
 80008b2:	e7a4      	b.n	80007fe <__aeabi_fadd+0x1e2>
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	1aee      	subs	r6, r5, r3
 80008ba:	e6e8      	b.n	800068e <__aeabi_fadd+0x72>
 80008bc:	4653      	mov	r3, sl
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d128      	bne.n	8000914 <__aeabi_fadd+0x2f8>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x2ac>
 80008c6:	e722      	b.n	800070e <__aeabi_fadd+0xf2>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	469c      	mov	ip, r3
 80008ce:	2400      	movs	r4, #0
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	e702      	b.n	80006da <__aeabi_fadd+0xbe>
 80008d4:	002a      	movs	r2, r5
 80008d6:	4452      	add	r2, sl
 80008d8:	e73b      	b.n	8000752 <__aeabi_fadd+0x136>
 80008da:	4653      	mov	r3, sl
 80008dc:	1b5a      	subs	r2, r3, r5
 80008de:	e6d1      	b.n	8000684 <__aeabi_fadd+0x68>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2ca>
 80008e4:	e714      	b.n	8000710 <__aeabi_fadd+0xf4>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2d0>
 80008ea:	e712      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	03db      	lsls	r3, r3, #15
 80008f0:	421a      	tst	r2, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2da>
 80008f4:	e70d      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008f6:	4641      	mov	r1, r8
 80008f8:	4219      	tst	r1, r3
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x2e2>
 80008fc:	e709      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008fe:	4642      	mov	r2, r8
 8000900:	e707      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000902:	000c      	movs	r4, r1
 8000904:	0037      	movs	r7, r6
 8000906:	1aaa      	subs	r2, r5, r2
 8000908:	e6bc      	b.n	8000684 <__aeabi_fadd+0x68>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d013      	beq.n	8000936 <__aeabi_fadd+0x31a>
 800090e:	000c      	movs	r4, r1
 8000910:	46c4      	mov	ip, r8
 8000912:	e6e2      	b.n	80006da <__aeabi_fadd+0xbe>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x2fe>
 8000918:	e6fb      	b.n	8000712 <__aeabi_fadd+0xf6>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	03db      	lsls	r3, r3, #15
 800091e:	421a      	tst	r2, r3
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x308>
 8000922:	e6f6      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000924:	4640      	mov	r0, r8
 8000926:	4218      	tst	r0, r3
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x310>
 800092a:	e6f2      	b.n	8000712 <__aeabi_fadd+0xf6>
 800092c:	000c      	movs	r4, r1
 800092e:	e6ef      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000930:	2a00      	cmp	r2, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x31a>
 8000934:	e763      	b.n	80007fe <__aeabi_fadd+0x1e2>
 8000936:	2200      	movs	r2, #0
 8000938:	2400      	movs	r4, #0
 800093a:	4694      	mov	ip, r2
 800093c:	e6cd      	b.n	80006da <__aeabi_fadd+0xbe>
 800093e:	46c4      	mov	ip, r8
 8000940:	e6cb      	b.n	80006da <__aeabi_fadd+0xbe>
 8000942:	002a      	movs	r2, r5
 8000944:	0037      	movs	r7, r6
 8000946:	4452      	add	r2, sl
 8000948:	e703      	b.n	8000752 <__aeabi_fadd+0x136>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	7dffffff 	.word	0x7dffffff
 8000950:	fbffffff 	.word	0xfbffffff

08000954 <__aeabi_f2iz>:
 8000954:	0241      	lsls	r1, r0, #9
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0fc3      	lsrs	r3, r0, #31
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	2000      	movs	r0, #0
 800095e:	0e12      	lsrs	r2, r2, #24
 8000960:	2a7e      	cmp	r2, #126	; 0x7e
 8000962:	d903      	bls.n	800096c <__aeabi_f2iz+0x18>
 8000964:	2a9d      	cmp	r2, #157	; 0x9d
 8000966:	d902      	bls.n	800096e <__aeabi_f2iz+0x1a>
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <__aeabi_f2iz+0x3c>)
 800096a:	1898      	adds	r0, r3, r2
 800096c:	4770      	bx	lr
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	0400      	lsls	r0, r0, #16
 8000972:	4301      	orrs	r1, r0
 8000974:	2a95      	cmp	r2, #149	; 0x95
 8000976:	dc07      	bgt.n	8000988 <__aeabi_f2iz+0x34>
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	40d1      	lsrs	r1, r2
 800097e:	4248      	negs	r0, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <__aeabi_f2iz+0x18>
 8000984:	0008      	movs	r0, r1
 8000986:	e7f1      	b.n	800096c <__aeabi_f2iz+0x18>
 8000988:	3a96      	subs	r2, #150	; 0x96
 800098a:	4091      	lsls	r1, r2
 800098c:	e7f7      	b.n	800097e <__aeabi_f2iz+0x2a>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	7fffffff 	.word	0x7fffffff

08000994 <__aeabi_i2f>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2800      	cmp	r0, #0
 8000998:	d013      	beq.n	80009c2 <__aeabi_i2f+0x2e>
 800099a:	17c3      	asrs	r3, r0, #31
 800099c:	18c5      	adds	r5, r0, r3
 800099e:	405d      	eors	r5, r3
 80009a0:	0fc4      	lsrs	r4, r0, #31
 80009a2:	0028      	movs	r0, r5
 80009a4:	f000 f83c 	bl	8000a20 <__clzsi2>
 80009a8:	239e      	movs	r3, #158	; 0x9e
 80009aa:	0001      	movs	r1, r0
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2b96      	cmp	r3, #150	; 0x96
 80009b0:	dc0f      	bgt.n	80009d2 <__aeabi_i2f+0x3e>
 80009b2:	2808      	cmp	r0, #8
 80009b4:	dd01      	ble.n	80009ba <__aeabi_i2f+0x26>
 80009b6:	3908      	subs	r1, #8
 80009b8:	408d      	lsls	r5, r1
 80009ba:	026d      	lsls	r5, r5, #9
 80009bc:	0a6d      	lsrs	r5, r5, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e002      	b.n	80009c8 <__aeabi_i2f+0x34>
 80009c2:	2400      	movs	r4, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	2500      	movs	r5, #0
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4328      	orrs	r0, r5
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
 80009d2:	2b99      	cmp	r3, #153	; 0x99
 80009d4:	dd0b      	ble.n	80009ee <__aeabi_i2f+0x5a>
 80009d6:	2205      	movs	r2, #5
 80009d8:	002e      	movs	r6, r5
 80009da:	1a12      	subs	r2, r2, r0
 80009dc:	40d6      	lsrs	r6, r2
 80009de:	0002      	movs	r2, r0
 80009e0:	321b      	adds	r2, #27
 80009e2:	4095      	lsls	r5, r2
 80009e4:	0028      	movs	r0, r5
 80009e6:	1e45      	subs	r5, r0, #1
 80009e8:	41a8      	sbcs	r0, r5
 80009ea:	0035      	movs	r5, r6
 80009ec:	4305      	orrs	r5, r0
 80009ee:	2905      	cmp	r1, #5
 80009f0:	dd01      	ble.n	80009f6 <__aeabi_i2f+0x62>
 80009f2:	1f4a      	subs	r2, r1, #5
 80009f4:	4095      	lsls	r5, r2
 80009f6:	002a      	movs	r2, r5
 80009f8:	4e08      	ldr	r6, [pc, #32]	; (8000a1c <__aeabi_i2f+0x88>)
 80009fa:	4032      	ands	r2, r6
 80009fc:	0768      	lsls	r0, r5, #29
 80009fe:	d009      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a00:	200f      	movs	r0, #15
 8000a02:	4028      	ands	r0, r5
 8000a04:	2804      	cmp	r0, #4
 8000a06:	d005      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a08:	3204      	adds	r2, #4
 8000a0a:	0150      	lsls	r0, r2, #5
 8000a0c:	d502      	bpl.n	8000a14 <__aeabi_i2f+0x80>
 8000a0e:	239f      	movs	r3, #159	; 0x9f
 8000a10:	4032      	ands	r2, r6
 8000a12:	1a5b      	subs	r3, r3, r1
 8000a14:	0192      	lsls	r2, r2, #6
 8000a16:	0a55      	lsrs	r5, r2, #9
 8000a18:	b2d8      	uxtb	r0, r3
 8000a1a:	e7d5      	b.n	80009c8 <__aeabi_i2f+0x34>
 8000a1c:	fbffffff 	.word	0xfbffffff

08000a20 <__clzsi2>:
 8000a20:	211c      	movs	r1, #28
 8000a22:	2301      	movs	r3, #1
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d301      	bcc.n	8000a2e <__clzsi2+0xe>
 8000a2a:	0c00      	lsrs	r0, r0, #16
 8000a2c:	3910      	subs	r1, #16
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	4298      	cmp	r0, r3
 8000a32:	d301      	bcc.n	8000a38 <__clzsi2+0x18>
 8000a34:	0a00      	lsrs	r0, r0, #8
 8000a36:	3908      	subs	r1, #8
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d301      	bcc.n	8000a42 <__clzsi2+0x22>
 8000a3e:	0900      	lsrs	r0, r0, #4
 8000a40:	3904      	subs	r1, #4
 8000a42:	a202      	add	r2, pc, #8	; (adr r2, 8000a4c <__clzsi2+0x2c>)
 8000a44:	5c10      	ldrb	r0, [r2, r0]
 8000a46:	1840      	adds	r0, r0, r1
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	02020304 	.word	0x02020304
 8000a50:	01010101 	.word	0x01010101
	...

08000a5c <__clzdi2>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d103      	bne.n	8000a6a <__clzdi2+0xe>
 8000a62:	f7ff ffdd 	bl	8000a20 <__clzsi2>
 8000a66:	3020      	adds	r0, #32
 8000a68:	e002      	b.n	8000a70 <__clzdi2+0x14>
 8000a6a:	1c08      	adds	r0, r1, #0
 8000a6c:	f7ff ffd8 	bl	8000a20 <__clzsi2>
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2308      	movs	r3, #8
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f004 fc18 	bl	80052b8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_ADC_Init+0xc4>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	05d2      	lsls	r2, r2, #23
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000acc:	22c2      	movs	r2, #194	; 0xc2
 8000ace:	32ff      	adds	r2, #255	; 0xff
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ad4:	222c      	movs	r2, #44	; 0x2c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fa9a 	bl	8002034 <HAL_ADC_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000b04:	f000 ffe0 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MX_ADC_Init+0xc8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0152      	lsls	r2, r2, #5
 8000b14:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b16:	003a      	movs	r2, r7
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_ADC_Init+0xc0>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 fbfd 	bl	800231c <HAL_ADC_ConfigChannel>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000b26:	f000 ffcf 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000038 	.word	0x20000038
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	04000002 	.word	0x04000002

08000b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f004 fbb0 	bl	80052b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_ADC_MspInit+0x70>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d122      	bne.n	8000ba8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0089      	lsls	r1, r1, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2203      	movs	r2, #3
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	193a      	adds	r2, r7, r4
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fd2e 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b009      	add	sp, #36	; 0x24
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	40012400 	.word	0x40012400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	240c      	movs	r4, #12
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f004 fb75 	bl	80052b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000bec:	2102      	movs	r1, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_GPIO_Init+0x84>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <MX_GPIO_Init+0x88>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	0019      	movs	r1, r3
 8000c08:	f001 fe72 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0152      	lsls	r2, r2, #5
 8000c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2201      	movs	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x88>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f001 fce9 	bl	8002604 <HAL_GPIO_Init>

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b009      	add	sp, #36	; 0x24
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	50000400 	.word	0x50000400

08000c44 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	f000 f8d3 	bl	8000df4 <icm20948_who_am_i>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	001a      	movs	r2, r3
 8000c52:	2301      	movs	r3, #1
 8000c54:	4053      	eors	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f6      	bne.n	8000c4a <icm20948_init+0x6>

	icm20948_device_reset();
 8000c5c:	f000 f8f3 	bl	8000e46 <icm20948_device_reset>
	icm20948_wakeup();
 8000c60:	f000 f90a 	bl	8000e78 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 f99a 	bl	8000f9e <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000c6a:	f000 f9b9 	bl	8000fe0 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000c6e:	f000 f921 	bl	8000eb4 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f9be 	bl	8000ff4 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 f9df 	bl	800103c <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fa00 	bl	8001084 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fa0e 	bl	80010a6 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000c8a:	f000 fa46 	bl	800111a <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000c8e:	f000 fb09 	bl	80012a4 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 fc5a 	bl	800154c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fcb3 	bl	8001604 <icm20948_accel_full_scale_select>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ak09916_init>:

void ak09916_init()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000ca8:	f000 f91f 	bl	8000eea <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000cac:	f000 f938 	bl	8000f20 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000cb0:	2007      	movs	r0, #7
 8000cb2:	f000 f953 	bl	8000f5c <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	f000 f8b1 	bl	8000e1e <ak09916_who_am_i>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f6      	bne.n	8000cb8 <ak09916_init+0x14>

	ak09916_soft_reset();
 8000cca:	f000 f8c9 	bl	8000e60 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f000 fa10 	bl	80010f4 <ak09916_operation_mode_setting>
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	2133      	movs	r1, #51	; 0x33
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fd7e 	bl	80017e8 <read_multiple_icm20948_reg>
 8000cec:	0003      	movs	r3, r0
 8000cee:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff fe45 	bl	8000994 <__aeabi_i2f>
 8000d0a:	1c02      	adds	r2, r0, #0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3302      	adds	r3, #2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3303      	adds	r3, #3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fe34 	bl	8000994 <__aeabi_i2f>
 8000d2c:	1c02      	adds	r2, r0, #0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3304      	adds	r3, #4
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3305      	adds	r3, #5
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff fe23 	bl	8000994 <__aeabi_i2f>
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	609a      	str	r2, [r3, #8]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b004      	add	sp, #16
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000d64:	2206      	movs	r2, #6
 8000d66:	212d      	movs	r1, #45	; 0x2d
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fd3d 	bl	80017e8 <read_multiple_icm20948_reg>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fe04 	bl	8000994 <__aeabi_i2f>
 8000d8c:	1c02      	adds	r2, r0, #0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3302      	adds	r3, #2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3303      	adds	r3, #3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fdf3 	bl	8000994 <__aeabi_i2f>
 8000dae:	1c02      	adds	r2, r0, #0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3304      	adds	r3, #4
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3305      	adds	r3, #5
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fde2 	bl	8000994 <__aeabi_i2f>
 8000dd0:	1c02      	adds	r2, r0, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <icm20948_accel_read+0x94>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1c19      	adds	r1, r3, #0
 8000dd8:	1c10      	adds	r0, r2, #0
 8000dda:	f7ff fc1f 	bl	800061c <__aeabi_fadd>
 8000dde:	1c03      	adds	r3, r0, #0
 8000de0:	1c1a      	adds	r2, r3, #0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b004      	add	sp, #16
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	2000002c 	.word	0x2000002c

08000df4 <icm20948_who_am_i>:
}


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000dfa:	1dfc      	adds	r4, r7, #7
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 fc92 	bl	8001728 <read_single_icm20948_reg>
 8000e04:	0003      	movs	r3, r0
 8000e06:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2bea      	cmp	r3, #234	; 0xea
 8000e0e:	d101      	bne.n	8000e14 <icm20948_who_am_i+0x20>
		return true;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <icm20948_who_am_i+0x22>
	else
		return false;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b003      	add	sp, #12
 8000e1c:	bd90      	pop	{r4, r7, pc}

08000e1e <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000e1e:	b590      	push	{r4, r7, lr}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000e24:	1dfc      	adds	r4, r7, #7
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fd4c 	bl	80018c4 <read_single_ak09916_reg>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d101      	bne.n	8000e3c <ak09916_who_am_i+0x1e>
		return true;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <ak09916_who_am_i+0x20>
	else
		return false;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b003      	add	sp, #12
 8000e44:	bd90      	pop	{r4, r7, pc}

08000e46 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000e4a:	22c1      	movs	r2, #193	; 0xc1
 8000e4c:	2106      	movs	r1, #6
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 fc9c 	bl	800178c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f001 f8c9 	bl	8001fec <HAL_Delay>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000e64:	2101      	movs	r1, #1
 8000e66:	2032      	movs	r0, #50	; 0x32
 8000e68:	f000 fd4f 	bl	800190a <write_single_ak09916_reg>
	HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f001 f8bd 	bl	8001fec <HAL_Delay>
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000e7e:	1dfc      	adds	r4, r7, #7
 8000e80:	2106      	movs	r1, #6
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fc50 	bl	8001728 <read_single_icm20948_reg>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	438a      	bics	r2, r1
 8000e96:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 fc73 	bl	800178c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f001 f8a0 	bl	8001fec <HAL_Delay>
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}

08000eb4 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000eba:	1dfc      	adds	r4, r7, #7
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 fc32 	bl	8001728 <read_single_icm20948_reg>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	1dfa      	adds	r2, r7, #7
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	2110      	movs	r1, #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	2103      	movs	r1, #3
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 fc55 	bl	800178c <write_single_icm20948_reg>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b003      	add	sp, #12
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000eea:	b590      	push	{r4, r7, lr}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000ef0:	1dfc      	adds	r4, r7, #7
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fc17 	bl	8001728 <read_single_icm20948_reg>
 8000efa:	0003      	movs	r3, r0
 8000efc:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	1dfa      	adds	r2, r7, #7
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	2102      	movs	r1, #2
 8000f06:	430a      	orrs	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2103      	movs	r1, #3
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 fc3a 	bl	800178c <write_single_icm20948_reg>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f26:	1dfc      	adds	r4, r7, #7
 8000f28:	2103      	movs	r1, #3
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 fbfc 	bl	8001728 <read_single_icm20948_reg>
 8000f30:	0003      	movs	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	2103      	movs	r1, #3
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fc1f 	bl	800178c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f001 f84c 	bl	8001fec <HAL_Delay>
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000f68:	250f      	movs	r5, #15
 8000f6a:	197c      	adds	r4, r7, r5
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2030      	movs	r0, #48	; 0x30
 8000f70:	f000 fbda 	bl	8001728 <read_single_icm20948_reg>
 8000f74:	0003      	movs	r3, r0
 8000f76:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 8000f78:	0028      	movs	r0, r5
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	1839      	adds	r1, r7, r0
 8000f7e:	1dfa      	adds	r2, r7, #7
 8000f80:	7809      	ldrb	r1, [r1, #0]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8000f88:	183b      	adds	r3, r7, r0
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2030      	movs	r0, #48	; 0x30
 8000f92:	f000 fbfb 	bl	800178c <write_single_icm20948_reg>
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}

08000f9e <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000f9e:	b5b0      	push	{r4, r5, r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000faa:	250f      	movs	r5, #15
 8000fac:	197c      	adds	r4, r7, r5
 8000fae:	2106      	movs	r1, #6
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fbb9 	bl	8001728 <read_single_icm20948_reg>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8000fba:	0028      	movs	r0, r5
 8000fbc:	183b      	adds	r3, r7, r0
 8000fbe:	1839      	adds	r1, r7, r0
 8000fc0:	1dfa      	adds	r2, r7, #7
 8000fc2:	7809      	ldrb	r1, [r1, #0]
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000fca:	183b      	adds	r3, r7, r0
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2106      	movs	r1, #6
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 fbda 	bl	800178c <write_single_icm20948_reg>
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}

08000fe0 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2109      	movs	r1, #9
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f000 fbcf 	bl	800178c <write_single_icm20948_reg>
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001000:	250f      	movs	r5, #15
 8001002:	197c      	adds	r4, r7, r5
 8001004:	2101      	movs	r1, #1
 8001006:	2020      	movs	r0, #32
 8001008:	f000 fb8e 	bl	8001728 <read_single_icm20948_reg>
 800100c:	0003      	movs	r3, r0
 800100e:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	b25a      	sxtb	r2, r3
 8001018:	197b      	adds	r3, r7, r5
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b25a      	sxtb	r2, r3
 8001022:	197b      	adds	r3, r7, r5
 8001024:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001026:	197b      	adds	r3, r7, r5
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	001a      	movs	r2, r3
 800102c:	2101      	movs	r1, #1
 800102e:	2020      	movs	r0, #32
 8001030:	f000 fbac 	bl	800178c <write_single_icm20948_reg>
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bdb0      	pop	{r4, r5, r7, pc}

0800103c <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	0002      	movs	r2, r0
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001048:	250f      	movs	r5, #15
 800104a:	197c      	adds	r4, r7, r5
 800104c:	2114      	movs	r1, #20
 800104e:	2020      	movs	r0, #32
 8001050:	f000 fb6a 	bl	8001728 <read_single_icm20948_reg>
 8001054:	0003      	movs	r3, r0
 8001056:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	b25a      	sxtb	r2, r3
 8001060:	197b      	adds	r3, r7, r5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b25a      	sxtb	r2, r3
 800106a:	197b      	adds	r3, r7, r5
 800106c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800106e:	197b      	adds	r3, r7, r5
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	2101      	movs	r1, #1
 8001076:	2020      	movs	r0, #32
 8001078:	f000 fb88 	bl	800178c <write_single_icm20948_reg>
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bdb0      	pop	{r4, r5, r7, pc}

08001084 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	2020      	movs	r0, #32
 800109a:	f000 fb77 	bl	800178c <write_single_icm20948_reg>
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80010a6:	b590      	push	{r4, r7, lr}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	0002      	movs	r2, r0
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	200f      	movs	r0, #15
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	240e      	movs	r4, #14
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	210f      	movs	r1, #15
 80010cc:	400a      	ands	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	001a      	movs	r2, r3
 80010d6:	2110      	movs	r1, #16
 80010d8:	2020      	movs	r0, #32
 80010da:	f000 fb57 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	001a      	movs	r2, r3
 80010e4:	2111      	movs	r1, #17
 80010e6:	2020      	movs	r0, #32
 80010e8:	f000 fb50 	bl	800178c <write_single_icm20948_reg>
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b005      	add	sp, #20
 80010f2:	bd90      	pop	{r4, r7, pc}

080010f4 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	2031      	movs	r0, #49	; 0x31
 8001108:	f000 fbff 	bl	800190a <write_single_ak09916_reg>
	HAL_Delay(100);
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f000 ff6d 	bl	8001fec <HAL_Delay>
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}

0800111a <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 800111a:	b5b0      	push	{r4, r5, r7, lr}
 800111c:	b08a      	sub	sp, #40	; 0x28
 800111e:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8001120:	230c      	movs	r3, #12
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	0018      	movs	r0, r3
 8001126:	230c      	movs	r3, #12
 8001128:	001a      	movs	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	f004 f8c4 	bl	80052b8 <memset>
	uint8_t gyro_offset[6] = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
 800113e:	e041      	b.n	80011c4 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8001140:	2518      	movs	r5, #24
 8001142:	197b      	adds	r3, r7, r5
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fdc8 	bl	8000cda <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800114a:	240c      	movs	r4, #12
 800114c:	193b      	adds	r3, r7, r4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fc1f 	bl	8000994 <__aeabi_i2f>
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	197b      	adds	r3, r7, r5
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1c19      	adds	r1, r3, #0
 800115e:	1c10      	adds	r0, r2, #0
 8001160:	f7ff fa5c 	bl	800061c <__aeabi_fadd>
 8001164:	1c03      	adds	r3, r0, #0
 8001166:	1c18      	adds	r0, r3, #0
 8001168:	f7ff fbf4 	bl	8000954 <__aeabi_f2iz>
 800116c:	0002      	movs	r2, r0
 800116e:	193b      	adds	r3, r7, r4
 8001170:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fc0c 	bl	8000994 <__aeabi_i2f>
 800117c:	1c02      	adds	r2, r0, #0
 800117e:	197b      	adds	r3, r7, r5
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	1c19      	adds	r1, r3, #0
 8001184:	1c10      	adds	r0, r2, #0
 8001186:	f7ff fa49 	bl	800061c <__aeabi_fadd>
 800118a:	1c03      	adds	r3, r0, #0
 800118c:	1c18      	adds	r0, r3, #0
 800118e:	f7ff fbe1 	bl	8000954 <__aeabi_f2iz>
 8001192:	0002      	movs	r2, r0
 8001194:	193b      	adds	r3, r7, r4
 8001196:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff fbf9 	bl	8000994 <__aeabi_i2f>
 80011a2:	1c02      	adds	r2, r0, #0
 80011a4:	197b      	adds	r3, r7, r5
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	1c19      	adds	r1, r3, #0
 80011aa:	1c10      	adds	r0, r2, #0
 80011ac:	f7ff fa36 	bl	800061c <__aeabi_fadd>
 80011b0:	1c03      	adds	r3, r0, #0
 80011b2:	1c18      	adds	r0, r3, #0
 80011b4:	f7ff fbce 	bl	8000954 <__aeabi_f2iz>
 80011b8:	0002      	movs	r2, r0
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	2b63      	cmp	r3, #99	; 0x63
 80011c8:	ddba      	ble.n	8001140 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 80011ca:	240c      	movs	r4, #12
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2164      	movs	r1, #100	; 0x64
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff f822 	bl	800021c <__divsi3>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2164      	movs	r1, #100	; 0x64
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff f818 	bl	800021c <__divsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	001a      	movs	r2, r3
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2164      	movs	r1, #100	; 0x64
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff f80e 	bl	800021c <__divsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	001a      	movs	r2, r3
 8001204:	193b      	adds	r3, r7, r4
 8001206:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8001208:	193b      	adds	r3, r7, r4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	425b      	negs	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	da00      	bge.n	8001214 <icm20948_gyro_calibration+0xfa>
 8001212:	3303      	adds	r3, #3
 8001214:	109b      	asrs	r3, r3, #2
 8001216:	121b      	asrs	r3, r3, #8
 8001218:	b2da      	uxtb	r2, r3
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 800121e:	230c      	movs	r3, #12
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	425b      	negs	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	da00      	bge.n	800122c <icm20948_gyro_calibration+0x112>
 800122a:	3303      	adds	r3, #3
 800122c:	109b      	asrs	r3, r3, #2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001234:	230c      	movs	r3, #12
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	425b      	negs	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <icm20948_gyro_calibration+0x128>
 8001240:	3303      	adds	r3, #3
 8001242:	109b      	asrs	r3, r3, #2
 8001244:	121b      	asrs	r3, r3, #8
 8001246:	b2da      	uxtb	r2, r3
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800124c:	230c      	movs	r3, #12
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	425b      	negs	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	da00      	bge.n	800125a <icm20948_gyro_calibration+0x140>
 8001258:	3303      	adds	r3, #3
 800125a:	109b      	asrs	r3, r3, #2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001262:	230c      	movs	r3, #12
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	425b      	negs	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	da00      	bge.n	8001270 <icm20948_gyro_calibration+0x156>
 800126e:	3303      	adds	r3, #3
 8001270:	109b      	asrs	r3, r3, #2
 8001272:	121b      	asrs	r3, r3, #8
 8001274:	b2da      	uxtb	r2, r3
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800127a:	230c      	movs	r3, #12
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	425b      	negs	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	da00      	bge.n	8001288 <icm20948_gyro_calibration+0x16e>
 8001286:	3303      	adds	r3, #3
 8001288:	109b      	asrs	r3, r3, #2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001290:	1d3a      	adds	r2, r7, #4
 8001292:	2306      	movs	r3, #6
 8001294:	2103      	movs	r1, #3
 8001296:	2020      	movs	r0, #32
 8001298:	f000 fae0 	bl	800185c <write_multiple_icm20948_reg>
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b00a      	add	sp, #40	; 0x28
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}

080012a4 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80012aa:	2318      	movs	r3, #24
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	0018      	movs	r0, r3
 80012b0:	230c      	movs	r3, #12
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f003 ffff 	bl	80052b8 <memset>
	int32_t accel_bias_reg[3] = {0};
 80012ba:	230c      	movs	r3, #12
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	230c      	movs	r3, #12
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f003 fff7 	bl	80052b8 <memset>
	uint8_t accel_offset[6] = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d8:	e041      	b.n	800135e <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 80012da:	2524      	movs	r5, #36	; 0x24
 80012dc:	197b      	adds	r3, r7, r5
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fd3c 	bl	8000d5c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80012e4:	2418      	movs	r4, #24
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff fb52 	bl	8000994 <__aeabi_i2f>
 80012f0:	1c02      	adds	r2, r0, #0
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1c19      	adds	r1, r3, #0
 80012f8:	1c10      	adds	r0, r2, #0
 80012fa:	f7ff f98f 	bl	800061c <__aeabi_fadd>
 80012fe:	1c03      	adds	r3, r0, #0
 8001300:	1c18      	adds	r0, r3, #0
 8001302:	f7ff fb27 	bl	8000954 <__aeabi_f2iz>
 8001306:	0002      	movs	r2, r0
 8001308:	193b      	adds	r3, r7, r4
 800130a:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 800130c:	193b      	adds	r3, r7, r4
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fb3f 	bl	8000994 <__aeabi_i2f>
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	197b      	adds	r3, r7, r5
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	1c19      	adds	r1, r3, #0
 800131e:	1c10      	adds	r0, r2, #0
 8001320:	f7ff f97c 	bl	800061c <__aeabi_fadd>
 8001324:	1c03      	adds	r3, r0, #0
 8001326:	1c18      	adds	r0, r3, #0
 8001328:	f7ff fb14 	bl	8000954 <__aeabi_f2iz>
 800132c:	0002      	movs	r2, r0
 800132e:	193b      	adds	r3, r7, r4
 8001330:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff fb2c 	bl	8000994 <__aeabi_i2f>
 800133c:	1c02      	adds	r2, r0, #0
 800133e:	197b      	adds	r3, r7, r5
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	1c19      	adds	r1, r3, #0
 8001344:	1c10      	adds	r0, r2, #0
 8001346:	f7ff f969 	bl	800061c <__aeabi_fadd>
 800134a:	1c03      	adds	r3, r0, #0
 800134c:	1c18      	adds	r0, r3, #0
 800134e:	f7ff fb01 	bl	8000954 <__aeabi_f2iz>
 8001352:	0002      	movs	r2, r0
 8001354:	193b      	adds	r3, r7, r4
 8001356:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8001358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135a:	3301      	adds	r3, #1
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800135e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001360:	2b63      	cmp	r3, #99	; 0x63
 8001362:	ddba      	ble.n	80012da <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8001364:	2418      	movs	r4, #24
 8001366:	193b      	adds	r3, r7, r4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2164      	movs	r1, #100	; 0x64
 800136c:	0018      	movs	r0, r3
 800136e:	f7fe ff55 	bl	800021c <__divsi3>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	193b      	adds	r3, r7, r4
 8001378:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2164      	movs	r1, #100	; 0x64
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe ff4b 	bl	800021c <__divsi3>
 8001386:	0003      	movs	r3, r0
 8001388:	001a      	movs	r2, r3
 800138a:	193b      	adds	r3, r7, r4
 800138c:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ff41 	bl	800021c <__divsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	001a      	movs	r2, r3
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80013a2:	003b      	movs	r3, r7
 80013a4:	4a68      	ldr	r2, [pc, #416]	; (8001548 <icm20948_accel_calibration+0x2a4>)
 80013a6:	8811      	ldrh	r1, [r2, #0]
 80013a8:	8019      	strh	r1, [r3, #0]
 80013aa:	7892      	ldrb	r2, [r2, #2]
 80013ac:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80013ae:	2202      	movs	r2, #2
 80013b0:	2114      	movs	r1, #20
 80013b2:	2010      	movs	r0, #16
 80013b4:	f000 fa18 	bl	80017e8 <read_multiple_icm20948_reg>
 80013b8:	0003      	movs	r3, r0
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013c4:	3201      	adds	r2, #1
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	250c      	movs	r5, #12
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 80013d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d2:	3301      	adds	r3, #1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	003b      	movs	r3, r7
 80013de:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80013e0:	2202      	movs	r2, #2
 80013e2:	2117      	movs	r1, #23
 80013e4:	2010      	movs	r0, #16
 80013e6:	f000 f9ff 	bl	80017e8 <read_multiple_icm20948_reg>
 80013ea:	0003      	movs	r3, r0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f6:	3201      	adds	r2, #1
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	197b      	adds	r3, r7, r5
 80013fe:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	003b      	movs	r3, r7
 800140e:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001410:	2202      	movs	r2, #2
 8001412:	211a      	movs	r1, #26
 8001414:	2010      	movs	r0, #16
 8001416:	f000 f9e7 	bl	80017e8 <read_multiple_icm20948_reg>
 800141a:	0003      	movs	r3, r0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 800141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001426:	3201      	adds	r2, #1
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	431a      	orrs	r2, r3
 800142c:	197b      	adds	r3, r7, r5
 800142e:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8001430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001432:	3301      	adds	r3, #1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4013      	ands	r3, r2
 800143a:	b2da      	uxtb	r2, r3
 800143c:	003b      	movs	r3, r7
 800143e:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001440:	197b      	adds	r3, r7, r5
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	193b      	adds	r3, r7, r4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	da00      	bge.n	800144e <icm20948_accel_calibration+0x1aa>
 800144c:	3307      	adds	r3, #7
 800144e:	10db      	asrs	r3, r3, #3
 8001450:	425b      	negs	r3, r3
 8001452:	18d2      	adds	r2, r2, r3
 8001454:	210c      	movs	r1, #12
 8001456:	187b      	adds	r3, r7, r1
 8001458:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800145a:	187b      	adds	r3, r7, r1
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	2318      	movs	r3, #24
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da00      	bge.n	800146a <icm20948_accel_calibration+0x1c6>
 8001468:	3307      	adds	r3, #7
 800146a:	10db      	asrs	r3, r3, #3
 800146c:	425b      	negs	r3, r3
 800146e:	18d2      	adds	r2, r2, r3
 8001470:	210c      	movs	r1, #12
 8001472:	187b      	adds	r3, r7, r1
 8001474:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001476:	187b      	adds	r3, r7, r1
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	2318      	movs	r3, #24
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da00      	bge.n	8001486 <icm20948_accel_calibration+0x1e2>
 8001484:	3307      	adds	r3, #7
 8001486:	10db      	asrs	r3, r3, #3
 8001488:	425b      	negs	r3, r3
 800148a:	18d2      	adds	r2, r2, r3
 800148c:	210c      	movs	r1, #12
 800148e:	187b      	adds	r3, r7, r1
 8001490:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	121b      	asrs	r3, r3, #8
 8001498:	b2da      	uxtb	r2, r3
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2201      	movs	r2, #1
 80014a6:	4393      	bics	r3, r2
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	785a      	ldrb	r2, [r3, #1]
 80014b2:	003b      	movs	r3, r7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	121b      	asrs	r3, r3, #8
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2201      	movs	r2, #1
 80014d2:	4393      	bics	r3, r2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	78da      	ldrb	r2, [r3, #3]
 80014de:	003b      	movs	r3, r7
 80014e0:	785b      	ldrb	r3, [r3, #1]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	121b      	asrs	r3, r3, #8
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2201      	movs	r2, #1
 80014fe:	4393      	bics	r3, r2
 8001500:	b2da      	uxtb	r2, r3
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	795a      	ldrb	r2, [r3, #5]
 800150a:	003b      	movs	r3, r7
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	4313      	orrs	r3, r2
 8001510:	b2da      	uxtb	r2, r3
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	2302      	movs	r3, #2
 800151a:	2114      	movs	r1, #20
 800151c:	2010      	movs	r0, #16
 800151e:	f000 f99d 	bl	800185c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	1c9a      	adds	r2, r3, #2
 8001526:	2302      	movs	r3, #2
 8001528:	2117      	movs	r1, #23
 800152a:	2010      	movs	r0, #16
 800152c:	f000 f996 	bl	800185c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	1d1a      	adds	r2, r3, #4
 8001534:	2302      	movs	r3, #2
 8001536:	211a      	movs	r1, #26
 8001538:	2010      	movs	r0, #16
 800153a:	f000 f98f 	bl	800185c <write_multiple_icm20948_reg>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b010      	add	sp, #64	; 0x40
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	080052e0 	.word	0x080052e0

0800154c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001558:	230f      	movs	r3, #15
 800155a:	18fc      	adds	r4, r7, r3
 800155c:	2101      	movs	r1, #1
 800155e:	2020      	movs	r0, #32
 8001560:	f000 f8e2 	bl	8001728 <read_single_icm20948_reg>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d027      	beq.n	80015c0 <icm20948_gyro_full_scale_select+0x74>
 8001570:	dc31      	bgt.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
 8001572:	2b02      	cmp	r3, #2
 8001574:	d019      	beq.n	80015aa <icm20948_gyro_full_scale_select+0x5e>
 8001576:	dc2e      	bgt.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <icm20948_gyro_full_scale_select+0x36>
 800157c:	2b01      	cmp	r3, #1
 800157e:	d009      	beq.n	8001594 <icm20948_gyro_full_scale_select+0x48>
 8001580:	e029      	b.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8001582:	220f      	movs	r2, #15
 8001584:	18bb      	adds	r3, r7, r2
 8001586:	18ba      	adds	r2, r7, r2
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <icm20948_gyro_full_scale_select+0xa4>)
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <icm20948_gyro_full_scale_select+0xa8>)
 8001590:	601a      	str	r2, [r3, #0]
			break;
 8001592:	e020      	b.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 8001594:	220f      	movs	r2, #15
 8001596:	18bb      	adds	r3, r7, r2
 8001598:	18ba      	adds	r2, r7, r2
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	2102      	movs	r1, #2
 800159e:	430a      	orrs	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <icm20948_gyro_full_scale_select+0xa4>)
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <icm20948_gyro_full_scale_select+0xac>)
 80015a6:	601a      	str	r2, [r3, #0]
			break;
 80015a8:	e015      	b.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 80015aa:	220f      	movs	r2, #15
 80015ac:	18bb      	adds	r3, r7, r2
 80015ae:	18ba      	adds	r2, r7, r2
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	2104      	movs	r1, #4
 80015b4:	430a      	orrs	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <icm20948_gyro_full_scale_select+0xa4>)
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <icm20948_gyro_full_scale_select+0xb0>)
 80015bc:	601a      	str	r2, [r3, #0]
			break;
 80015be:	e00a      	b.n	80015d6 <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 80015c0:	220f      	movs	r2, #15
 80015c2:	18bb      	adds	r3, r7, r2
 80015c4:	18ba      	adds	r2, r7, r2
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	2106      	movs	r1, #6
 80015ca:	430a      	orrs	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <icm20948_gyro_full_scale_select+0xa4>)
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <icm20948_gyro_full_scale_select+0xb4>)
 80015d2:	601a      	str	r2, [r3, #0]
			break;
 80015d4:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80015d6:	230f      	movs	r3, #15
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	2101      	movs	r1, #1
 80015e0:	2020      	movs	r0, #32
 80015e2:	f000 f8d3 	bl	800178c <write_single_icm20948_reg>
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b005      	add	sp, #20
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	20000028 	.word	0x20000028
 80015f4:	43030000 	.word	0x43030000
 80015f8:	42830000 	.word	0x42830000
 80015fc:	42033333 	.word	0x42033333
 8001600:	41833333 	.word	0x41833333

08001604 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001610:	230f      	movs	r3, #15
 8001612:	18fc      	adds	r4, r7, r3
 8001614:	2114      	movs	r1, #20
 8001616:	2020      	movs	r0, #32
 8001618:	f000 f886 	bl	8001728 <read_single_icm20948_reg>
 800161c:	0003      	movs	r3, r0
 800161e:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d02a      	beq.n	800167e <icm20948_accel_full_scale_select+0x7a>
 8001628:	dc35      	bgt.n	8001696 <icm20948_accel_full_scale_select+0x92>
 800162a:	2b02      	cmp	r3, #2
 800162c:	d01b      	beq.n	8001666 <icm20948_accel_full_scale_select+0x62>
 800162e:	dc32      	bgt.n	8001696 <icm20948_accel_full_scale_select+0x92>
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <icm20948_accel_full_scale_select+0x36>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d00a      	beq.n	800164e <icm20948_accel_full_scale_select+0x4a>
 8001638:	e02d      	b.n	8001696 <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 800163a:	220f      	movs	r2, #15
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <icm20948_accel_full_scale_select+0xac>)
 8001646:	228d      	movs	r2, #141	; 0x8d
 8001648:	05d2      	lsls	r2, r2, #23
 800164a:	601a      	str	r2, [r3, #0]
			break;
 800164c:	e023      	b.n	8001696 <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 800164e:	220f      	movs	r2, #15
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	18ba      	adds	r2, r7, r2
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	2102      	movs	r1, #2
 8001658:	430a      	orrs	r2, r1
 800165a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <icm20948_accel_full_scale_select+0xac>)
 800165e:	228c      	movs	r2, #140	; 0x8c
 8001660:	05d2      	lsls	r2, r2, #23
 8001662:	601a      	str	r2, [r3, #0]
			break;
 8001664:	e017      	b.n	8001696 <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 8001666:	220f      	movs	r2, #15
 8001668:	18bb      	adds	r3, r7, r2
 800166a:	18ba      	adds	r2, r7, r2
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	2104      	movs	r1, #4
 8001670:	430a      	orrs	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <icm20948_accel_full_scale_select+0xac>)
 8001676:	228b      	movs	r2, #139	; 0x8b
 8001678:	05d2      	lsls	r2, r2, #23
 800167a:	601a      	str	r2, [r3, #0]
			break;
 800167c:	e00b      	b.n	8001696 <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 800167e:	220f      	movs	r2, #15
 8001680:	18bb      	adds	r3, r7, r2
 8001682:	18ba      	adds	r2, r7, r2
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	2106      	movs	r1, #6
 8001688:	430a      	orrs	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <icm20948_accel_full_scale_select+0xac>)
 800168e:	228a      	movs	r2, #138	; 0x8a
 8001690:	05d2      	lsls	r2, r2, #23
 8001692:	601a      	str	r2, [r3, #0]
			break;
 8001694:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001696:	230f      	movs	r3, #15
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	001a      	movs	r2, r3
 800169e:	2114      	movs	r1, #20
 80016a0:	2020      	movs	r0, #32
 80016a2:	f000 f873 	bl	800178c <write_single_icm20948_reg>
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b005      	add	sp, #20
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	2000002c 	.word	0x2000002c

080016b4 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <cs_high+0x18>)
 80016be:	2201      	movs	r2, #1
 80016c0:	0019      	movs	r1, r3
 80016c2:	f001 f915 	bl	80028f0 <HAL_GPIO_WritePin>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	50000400 	.word	0x50000400

080016d0 <cs_low>:

static void cs_low()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	015b      	lsls	r3, r3, #5
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <cs_low+0x18>)
 80016da:	2200      	movs	r2, #0
 80016dc:	0019      	movs	r1, r3
 80016de:	f001 f907 	bl	80028f0 <HAL_GPIO_WritePin>
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	50000400 	.word	0x50000400

080016ec <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80016f8:	240c      	movs	r4, #12
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	227f      	movs	r2, #127	; 0x7f
 80016fe:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	1dfa      	adds	r2, r7, #7
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	705a      	strb	r2, [r3, #1]

	cs_low();
 8001708:	f7ff ffe2 	bl	80016d0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800170c:	1939      	adds	r1, r7, r4
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <select_user_bank+0x38>)
 8001710:	230a      	movs	r3, #10
 8001712:	2202      	movs	r2, #2
 8001714:	f002 f8ea 	bl	80038ec <HAL_SPI_Transmit>
	cs_high();
 8001718:	f7ff ffcc 	bl	80016b4 <cs_high>
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b005      	add	sp, #20
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	20000094 	.word	0x20000094

08001728 <read_single_icm20948_reg>:

uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	1dbb      	adds	r3, r7, #6
 8001736:	1c0a      	adds	r2, r1, #0
 8001738:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800173a:	1dbb      	adds	r3, r7, #6
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	4252      	negs	r2, r2
 8001742:	4313      	orrs	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	240f      	movs	r4, #15
 8001748:	193b      	adds	r3, r7, r4
 800174a:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ffcb 	bl	80016ec <select_user_bank>

	cs_low();
 8001756:	f7ff ffbb 	bl	80016d0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800175a:	23fa      	movs	r3, #250	; 0xfa
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	1939      	adds	r1, r7, r4
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <read_single_icm20948_reg+0x60>)
 8001762:	2201      	movs	r2, #1
 8001764:	f002 f8c2 	bl	80038ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001768:	23fa      	movs	r3, #250	; 0xfa
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	240e      	movs	r4, #14
 800176e:	1939      	adds	r1, r7, r4
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <read_single_icm20948_reg+0x60>)
 8001772:	2201      	movs	r2, #1
 8001774:	f002 fa10 	bl	8003b98 <HAL_SPI_Receive>
	cs_high();
 8001778:	f7ff ff9c 	bl	80016b4 <cs_high>

	return reg_val;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	781b      	ldrb	r3, [r3, #0]
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b005      	add	sp, #20
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000094 	.word	0x20000094

0800178c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	0004      	movs	r4, r0
 8001794:	0008      	movs	r0, r1
 8001796:	0011      	movs	r1, r2
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	1c22      	adds	r2, r4, #0
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	1dbb      	adds	r3, r7, #6
 80017a0:	1c02      	adds	r2, r0, #0
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	1d7b      	adds	r3, r7, #5
 80017a6:	1c0a      	adds	r2, r1, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80017aa:	240c      	movs	r4, #12
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	1dba      	adds	r2, r7, #6
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	1d7a      	adds	r2, r7, #5
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff93 	bl	80016ec <select_user_bank>

	cs_low();
 80017c6:	f7ff ff83 	bl	80016d0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80017ca:	23fa      	movs	r3, #250	; 0xfa
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	1939      	adds	r1, r7, r4
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <write_single_icm20948_reg+0x58>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	f002 f88a 	bl	80038ec <HAL_SPI_Transmit>
	cs_high();
 80017d8:	f7ff ff6c 	bl	80016b4 <cs_high>
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b005      	add	sp, #20
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	20000094 	.word	0x20000094

080017e8 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	0004      	movs	r4, r0
 80017f0:	0008      	movs	r0, r1
 80017f2:	0011      	movs	r1, r2
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	1c22      	adds	r2, r4, #0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	1c02      	adds	r2, r0, #0
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	1d7b      	adds	r3, r7, #5
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	4252      	negs	r2, r2
 800180e:	4313      	orrs	r3, r2
 8001810:	b2da      	uxtb	r2, r3
 8001812:	240f      	movs	r4, #15
 8001814:	193b      	adds	r3, r7, r4
 8001816:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff ff65 	bl	80016ec <select_user_bank>

	cs_low();
 8001822:	f7ff ff55 	bl	80016d0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001826:	23fa      	movs	r3, #250	; 0xfa
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	1939      	adds	r1, r7, r4
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <read_multiple_icm20948_reg+0x6c>)
 800182e:	2201      	movs	r2, #1
 8001830:	f002 f85c 	bl	80038ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001834:	1d7b      	adds	r3, r7, #5
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	23fa      	movs	r3, #250	; 0xfa
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4906      	ldr	r1, [pc, #24]	; (8001858 <read_multiple_icm20948_reg+0x70>)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <read_multiple_icm20948_reg+0x6c>)
 8001842:	f002 f9a9 	bl	8003b98 <HAL_SPI_Receive>
	cs_high();
 8001846:	f7ff ff35 	bl	80016b4 <cs_high>

	return reg_val;
 800184a:	4b03      	ldr	r3, [pc, #12]	; (8001858 <read_multiple_icm20948_reg+0x70>)
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b005      	add	sp, #20
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000094 	.word	0x20000094
 8001858:	20000030 	.word	0x20000030

0800185c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	0004      	movs	r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	603a      	str	r2, [r7, #0]
 8001868:	0019      	movs	r1, r3
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	1c22      	adds	r2, r4, #0
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	1dbb      	adds	r3, r7, #6
 8001872:	1c02      	adds	r2, r0, #0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	1d7b      	adds	r3, r7, #5
 8001878:	1c0a      	adds	r2, r1, #0
 800187a:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 800187c:	240f      	movs	r4, #15
 800187e:	193b      	adds	r3, r7, r4
 8001880:	1dba      	adds	r2, r7, #6
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff ff2e 	bl	80016ec <select_user_bank>

	cs_low();
 8001890:	f7ff ff1e 	bl	80016d0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001894:	23fa      	movs	r3, #250	; 0xfa
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	1939      	adds	r1, r7, r4
 800189a:	4809      	ldr	r0, [pc, #36]	; (80018c0 <write_multiple_icm20948_reg+0x64>)
 800189c:	2201      	movs	r2, #1
 800189e:	f002 f825 	bl	80038ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80018a2:	1d7b      	adds	r3, r7, #5
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	23fa      	movs	r3, #250	; 0xfa
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <write_multiple_icm20948_reg+0x64>)
 80018b0:	f002 f81c 	bl	80038ec <HAL_SPI_Transmit>
	cs_high();
 80018b4:	f7ff fefe 	bl	80016b4 <cs_high>
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b005      	add	sp, #20
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	20000094 	.word	0x20000094

080018c4 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	0002      	movs	r2, r0
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80018d0:	228c      	movs	r2, #140	; 0x8c
 80018d2:	2103      	movs	r1, #3
 80018d4:	2030      	movs	r0, #48	; 0x30
 80018d6:	f7ff ff59 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	001a      	movs	r2, r3
 80018e0:	2104      	movs	r1, #4
 80018e2:	2030      	movs	r0, #48	; 0x30
 80018e4:	f7ff ff52 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018e8:	2281      	movs	r2, #129	; 0x81
 80018ea:	2105      	movs	r1, #5
 80018ec:	2030      	movs	r0, #48	; 0x30
 80018ee:	f7ff ff4d 	bl	800178c <write_single_icm20948_reg>

	HAL_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fb7a 	bl	8001fec <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80018f8:	213b      	movs	r1, #59	; 0x3b
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff ff14 	bl	8001728 <read_single_icm20948_reg>
 8001900:	0003      	movs	r3, r0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}

0800190a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	0002      	movs	r2, r0
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	1c0a      	adds	r2, r1, #0
 800191a:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800191c:	220c      	movs	r2, #12
 800191e:	2103      	movs	r1, #3
 8001920:	2030      	movs	r0, #48	; 0x30
 8001922:	f7ff ff33 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	001a      	movs	r2, r3
 800192c:	2104      	movs	r1, #4
 800192e:	2030      	movs	r0, #48	; 0x30
 8001930:	f7ff ff2c 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	2106      	movs	r1, #6
 800193c:	2030      	movs	r0, #48	; 0x30
 800193e:	f7ff ff25 	bl	800178c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001942:	2281      	movs	r2, #129	; 0x81
 8001944:	2105      	movs	r1, #5
 8001946:	2030      	movs	r0, #48	; 0x30
 8001948:	f7ff ff20 	bl	800178c <write_single_icm20948_reg>
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195a:	f000 fad7 	bl	8001f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195e:	f000 f841 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f7ff f929 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001966:	f000 f963 	bl	8001c30 <MX_TIM2_Init>
  MX_SPI2_Init();
 800196a:	f000 f8b3 	bl	8001ad4 <MX_SPI2_Init>
  MX_ADC_Init();
 800196e:	f7ff f881 	bl	8000a74 <MX_ADC_Init>
  MX_USART2_Init();
 8001972:	f000 fa2f 	bl	8001dd4 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001976:	f7ff f965 	bl	8000c44 <icm20948_init>
  ak09916_init();
 800197a:	f7ff f993 	bl	8000ca4 <ak09916_init>
  uint8_t  tx_buffer1[12] = "all good\n\r";
 800197e:	2314      	movs	r3, #20
 8001980:	18f9      	adds	r1, r7, r3
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <main+0x84>)
 8001984:	000b      	movs	r3, r1
 8001986:	ca11      	ldmia	r2!, {r0, r4}
 8001988:	c311      	stmia	r3!, {r0, r4}
 800198a:	8810      	ldrh	r0, [r2, #0]
 800198c:	8018      	strh	r0, [r3, #0]
 800198e:	7892      	ldrb	r2, [r2, #2]
 8001990:	709a      	strb	r2, [r3, #2]
 8001992:	230b      	movs	r3, #11
 8001994:	2200      	movs	r2, #0
 8001996:	54ca      	strb	r2, [r1, r3]
  uint8_t  tx_buffer2[14] = "no connect\n\r";
 8001998:	1d39      	adds	r1, r7, #4
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <main+0x88>)
 800199c:	000b      	movs	r3, r1
 800199e:	ca31      	ldmia	r2!, {r0, r4, r5}
 80019a0:	c331      	stmia	r3!, {r0, r4, r5}
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	230d      	movs	r3, #13
 80019a8:	2200      	movs	r2, #0
 80019aa:	54ca      	strb	r2, [r1, r3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(icm20948_who_am_i())
 80019ac:	f7ff fa22 	bl	8000df4 <icm20948_who_am_i>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d007      	beq.n	80019c4 <main+0x70>
	  {
		  HAL_USART_Transmit(&husart2, tx_buffer1, 8, 10);
 80019b4:	2314      	movs	r3, #20
 80019b6:	18f9      	adds	r1, r7, r3
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <main+0x8c>)
 80019ba:	230a      	movs	r3, #10
 80019bc:	2208      	movs	r2, #8
 80019be:	f003 f9c7 	bl	8004d50 <HAL_USART_Transmit>
 80019c2:	e005      	b.n	80019d0 <main+0x7c>
	  }
	  else
	  {
		  HAL_USART_Transmit(&husart2, tx_buffer2, 14, 10);
 80019c4:	1d39      	adds	r1, r7, #4
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <main+0x8c>)
 80019c8:	230a      	movs	r3, #10
 80019ca:	220e      	movs	r2, #14
 80019cc:	f003 f9c0 	bl	8004d50 <HAL_USART_Transmit>

	  // or unit conversion
	  //icm20948_gyro_read_dps(&my_gyro);
	  //icm20948_accel_read_g(&my_accel);
	  //ak09916_mag_read_uT(&my_mag);
	  HAL_Delay(100);
 80019d0:	2064      	movs	r0, #100	; 0x64
 80019d2:	f000 fb0b 	bl	8001fec <HAL_Delay>
	  if(icm20948_who_am_i())
 80019d6:	e7e9      	b.n	80019ac <main+0x58>
 80019d8:	080052e4 	.word	0x080052e4
 80019dc:	080052f0 	.word	0x080052f0
 80019e0:	2000012c 	.word	0x2000012c

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b09d      	sub	sp, #116	; 0x74
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	2438      	movs	r4, #56	; 0x38
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	0018      	movs	r0, r3
 80019f0:	2338      	movs	r3, #56	; 0x38
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f003 fc5f 	bl	80052b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fa:	2324      	movs	r3, #36	; 0x24
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	0018      	movs	r0, r3
 8001a00:	2314      	movs	r3, #20
 8001a02:	001a      	movs	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	f003 fc57 	bl	80052b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2324      	movs	r3, #36	; 0x24
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f003 fc50 	bl	80052b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <SystemClock_Config+0xdc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <SystemClock_Config+0xe0>)
 8001a1e:	401a      	ands	r2, r3
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <SystemClock_Config+0xdc>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0109      	lsls	r1, r1, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2201      	movs	r2, #1
 8001a36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2202      	movs	r2, #2
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2200      	movs	r2, #0
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	0412      	lsls	r2, r2, #16
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 ff66 	bl	800292c <HAL_RCC_OscConfig>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a64:	f000 f830 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	2124      	movs	r1, #36	; 0x24
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2203      	movs	r2, #3
 8001a74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f001 fb10 	bl	80030b4 <HAL_RCC_ClockConfig>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a98:	f000 f816 	bl	8001ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa2:	003b      	movs	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	003b      	movs	r3, r7
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 fd26 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ab4:	f000 f808 	bl	8001ac8 <Error_Handler>
  }
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b01d      	add	sp, #116	; 0x74
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	ffffe7ff 	.word	0xffffe7ff

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <Error_Handler+0x8>
	...

08001ad4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <MX_SPI2_Init+0x6c>)
 8001adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001ae0:	2282      	movs	r2, #130	; 0x82
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b08:	2238      	movs	r2, #56	; 0x38
 8001b0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f001 fe4c 	bl	80037c4 <HAL_SPI_Init>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b30:	f7ff ffca 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	20000094 	.word	0x20000094
 8001b40:	40003800 	.word	0x40003800

08001b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	240c      	movs	r4, #12
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	0018      	movs	r0, r3
 8001b52:	2314      	movs	r3, #20
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f003 fbae 	bl	80052b8 <memset>
  if(spiHandle->Instance==SPI2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_SPI_MspInit+0x80>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d129      	bne.n	8001bba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	01c9      	lsls	r1, r1, #7
 8001b70:	430a      	orrs	r2, r1
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_SPI_MspInit+0x84>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	22e0      	movs	r2, #224	; 0xe0
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	0021      	movs	r1, r4
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2202      	movs	r2, #2
 8001b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	f000 fd25 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b009      	add	sp, #36	; 0x24
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40003800 	.word	0x40003800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	50000400 	.word	0x50000400

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_MspInit+0x24>)
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_MspInit+0x24>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_MspInit+0x24>)
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_MspInit+0x24>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0549      	lsls	r1, r1, #21
 8001bea:	430a      	orrs	r2, r1
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler+0x4>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f9ca 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	2318      	movs	r3, #24
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f003 fb39 	bl	80052b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	2310      	movs	r3, #16
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2100      	movs	r1, #0
 8001c52:	f003 fb31 	bl	80052b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c56:	003b      	movs	r3, r7
 8001c58:	0018      	movs	r0, r3
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	f003 fb2a 	bl	80052b8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	05d2      	lsls	r2, r2, #23
 8001c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <MX_TIM2_Init+0xfc>)
 8001c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 fba3 	bl	80043d8 <HAL_TIM_Base_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c96:	f7ff ff17 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	2118      	movs	r1, #24
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	0152      	lsls	r2, r2, #5
 8001ca2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca4:	187a      	adds	r2, r7, r1
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001ca8:	0011      	movs	r1, r2
 8001caa:	0018      	movs	r0, r3
 8001cac:	f002 fce2 	bl	8004674 <HAL_TIM_ConfigClockSource>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001cb4:	f7ff ff08 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f002 fbcc 	bl	8004458 <HAL_TIM_PWM_Init>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001cc4:	f7ff ff00 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001cc8:	2110      	movs	r1, #16
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2230      	movs	r2, #48	; 0x30
 8001cce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd6:	187a      	adds	r2, r7, r1
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f002 ff8f 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001ce6:	f7ff feef 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	003b      	movs	r3, r7
 8001cec:	2260      	movs	r2, #96	; 0x60
 8001cee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cf0:	003b      	movs	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	003b      	movs	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	003b      	movs	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d02:	0039      	movs	r1, r7
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f002 fbed 	bl	80044e8 <HAL_TIM_PWM_ConfigChannel>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001d12:	f7ff fed9 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <MX_TIM2_Init+0xf8>)
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f81f 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b00a      	add	sp, #40	; 0x28
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	200000ec 	.word	0x200000ec
 8001d2c:	00000bb7 	.word	0x00000bb7

08001d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	05db      	lsls	r3, r3, #23
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d105      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_TIM_Base_MspInit+0x28>)
 8001d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_TIM_Base_MspInit+0x28>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	240c      	movs	r4, #12
 8001d66:	193b      	adds	r3, r7, r4
 8001d68:	0018      	movs	r0, r3
 8001d6a:	2314      	movs	r3, #20
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f003 faa2 	bl	80052b8 <memset>
  if(timHandle->Instance==TIM2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	05db      	lsls	r3, r3, #23
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d122      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_TIM_MspPostInit+0x74>)
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_TIM_MspPostInit+0x74>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_TIM_MspPostInit+0x74>)
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d98:	0021      	movs	r1, r4
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2202      	movs	r2, #2
 8001da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2205      	movs	r2, #5
 8001db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	187a      	adds	r2, r7, r1
 8001dba:	23a0      	movs	r3, #160	; 0xa0
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fc1f 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b009      	add	sp, #36	; 0x24
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <MX_USART2_Init>:

USART_HandleTypeDef husart2;

/* USART2 init function */
void MX_USART2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_USART2_Init+0x54>)
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <MX_USART2_Init+0x58>)
 8001ddc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <MX_USART2_Init+0x54>)
 8001de0:	22e1      	movs	r2, #225	; 0xe1
 8001de2:	0252      	lsls	r2, r2, #9
 8001de4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_USART2_Init+0x54>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_USART2_Init+0x54>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <MX_USART2_Init+0x54>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_USART2_Init+0x54>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_USART2_Init+0x54>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_USART2_Init+0x54>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <MX_USART2_Init+0x54>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <MX_USART2_Init+0x54>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f002 ff4c 	bl	8004cb0 <HAL_USART_Init>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001e1c:	f7ff fe54 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	2000012c 	.word	0x2000012c
 8001e2c:	40004400 	.word	0x40004400

08001e30 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	240c      	movs	r4, #12
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	2314      	movs	r3, #20
 8001e40:	001a      	movs	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	f003 fa38 	bl	80052b8 <memset>
  if(usartHandle->Instance==USART2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_USART_MspInit+0x80>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d129      	bne.n	8001ea6 <HAL_USART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_USART_MspInit+0x84>)
 8001e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_USART_MspInit+0x84>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0289      	lsls	r1, r1, #10
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_USART_MspInit+0x84>)
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_USART_MspInit+0x84>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_USART_MspInit+0x84>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001e78:	0021      	movs	r1, r4
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	221c      	movs	r2, #28
 8001e7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	2202      	movs	r2, #2
 8001e84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2204      	movs	r2, #4
 8001e96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	187a      	adds	r2, r7, r1
 8001e9a:	23a0      	movs	r3, #160	; 0xa0
 8001e9c:	05db      	lsls	r3, r3, #23
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 fbaf 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b009      	add	sp, #36	; 0x24
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40004400 	.word	0x40004400
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ebe:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <LoopForever+0xe>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed4:	4c0b      	ldr	r4, [pc, #44]	; (8001f04 <LoopForever+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ee2:	f7ff fea0 	bl	8001c26 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f003 f9c3 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eea:	f7ff fd33 	bl	8001954 <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   r0, =_estack
 8001ef0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001efc:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8001f00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f04:	20000180 	.word	0x20000180

08001f08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_COMP_IRQHandler>
	...

08001f0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f12:	1dfb      	adds	r3, r7, #7
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_Init+0x3c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_Init+0x3c>)
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f811 	bl	8001f4c <HAL_InitTick>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e001      	b.n	8001f3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f36:	f7ff fe4b 	bl	8001bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40022000 	.word	0x40022000

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_InitTick+0x5c>)
 8001f56:	681c      	ldr	r4, [r3, #0]
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_InitTick+0x60>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	23fa      	movs	r3, #250	; 0xfa
 8001f60:	0098      	lsls	r0, r3, #2
 8001f62:	f7fe f8d1 	bl	8000108 <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	0019      	movs	r1, r3
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	f7fe f8cc 	bl	8000108 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 fb39 	bl	80025ea <HAL_SYSTICK_Config>
 8001f78:	1e03      	subs	r3, r0, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e00f      	b.n	8001fa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d80b      	bhi.n	8001f9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fb16 	bl	80025c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_InitTick+0x64>)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b003      	add	sp, #12
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_IncTick+0x1c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	18d2      	adds	r2, r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	2000017c 	.word	0x2000017c

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <HAL_GetTick+0x10>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	2000017c 	.word	0x2000017c

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	001a      	movs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	189b      	adds	r3, r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	f7ff ffe0 	bl	8001fd8 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	20000008 	.word	0x20000008

08002034 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e159      	b.n	80022fa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2250      	movs	r2, #80	; 0x50
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe fd6e 	bl	8000b40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	2210      	movs	r2, #16
 800206a:	4013      	ands	r3, r2
 800206c:	2b10      	cmp	r3, #16
 800206e:	d005      	beq.n	800207c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800207a:	d00b      	beq.n	8002094 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	2210      	movs	r2, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2250      	movs	r2, #80	; 0x50
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e132      	b.n	80022fa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	4a9a      	ldr	r2, [pc, #616]	; (8002304 <HAL_ADC_Init+0x2d0>)
 800209a:	4013      	ands	r3, r2
 800209c:	2202      	movs	r2, #2
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2203      	movs	r2, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_ADC_Init+0x90>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_Init+0x90>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_ADC_Init+0x92>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d149      	bne.n	800215e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	23c0      	movs	r3, #192	; 0xc0
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d00b      	beq.n	80020ee <HAL_ADC_Init+0xba>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	05db      	lsls	r3, r3, #23
 80020de:	429a      	cmp	r2, r3
 80020e0:	d005      	beq.n	80020ee <HAL_ADC_Init+0xba>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_Init+0xde>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	0892      	lsrs	r2, r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	e014      	b.n	800213c <HAL_ADC_Init+0x108>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	0892      	lsrs	r2, r2, #2
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b78      	ldr	r3, [pc, #480]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002128:	4978      	ldr	r1, [pc, #480]	; (800230c <HAL_ADC_Init+0x2d8>)
 800212a:	400a      	ands	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4b74      	ldr	r3, [pc, #464]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2118      	movs	r1, #24
 8002148:	438a      	bics	r2, r1
 800214a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68d9      	ldr	r1, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800215e:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002164:	496a      	ldr	r1, [pc, #424]	; (8002310 <HAL_ADC_Init+0x2dc>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_ADC_Init+0x2d4>)
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	065a      	lsls	r2, r3, #25
 8002174:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_ADC_Init+0x2d4>)
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	055b      	lsls	r3, r3, #21
 8002184:	4013      	ands	r3, r2
 8002186:	d108      	bne.n	800219a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	0549      	lsls	r1, r1, #21
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	495b      	ldr	r1, [pc, #364]	; (8002314 <HAL_ADC_Init+0x2e0>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_Init+0x18c>
 80021bc:	2304      	movs	r3, #4
 80021be:	e000      	b.n	80021c2 <HAL_ADC_Init+0x18e>
 80021c0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80021c2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2020      	movs	r0, #32
 80021c8:	5c1b      	ldrb	r3, [r3, r0]
 80021ca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80021cc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	202c      	movs	r0, #44	; 0x2c
 80021d2:	5c1b      	ldrb	r3, [r3, r0]
 80021d4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021d6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021dc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80021e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80021ec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fa:	23c2      	movs	r3, #194	; 0xc2
 80021fc:	33ff      	adds	r3, #255	; 0xff
 80021fe:	429a      	cmp	r2, r3
 8002200:	d00b      	beq.n	800221a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	5c9b      	ldrb	r3, [r3, r2]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d11a      	bne.n	800225a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0249      	lsls	r1, r1, #9
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e00b      	b.n	800225a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	2220      	movs	r2, #32
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	2201      	movs	r2, #1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11f      	bne.n	80022a2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	492a      	ldr	r1, [pc, #168]	; (8002318 <HAL_ADC_Init+0x2e4>)
 800226e:	400a      	ands	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002280:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002286:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	e00e      	b.n	80022c0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2107      	movs	r1, #7
 80022cc:	438a      	bics	r2, r1
 80022ce:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	2203      	movs	r2, #3
 80022ee:	4393      	bics	r3, r2
 80022f0:	2201      	movs	r2, #1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	fffffefd 	.word	0xfffffefd
 8002308:	40012708 	.word	0x40012708
 800230c:	ffc3ffff 	.word	0xffc3ffff
 8002310:	fdffffff 	.word	0xfdffffff
 8002314:	fffe0219 	.word	0xfffe0219
 8002318:	fffffc03 	.word	0xfffffc03

0800231c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2250      	movs	r2, #80	; 0x50
 800232a:	5c9b      	ldrb	r3, [r3, r2]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e085      	b.n	8002440 <HAL_ADC_ConfigChannel+0x124>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2250      	movs	r2, #80	; 0x50
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2204      	movs	r2, #4
 8002344:	4013      	ands	r3, r2
 8002346:	d00b      	beq.n	8002360 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	2220      	movs	r2, #32
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2250      	movs	r2, #80	; 0x50
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e06f      	b.n	8002440 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_ADC_ConfigChannel+0x12c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d035      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	035b      	lsls	r3, r3, #13
 8002376:	0b5a      	lsrs	r2, r3, #13
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	02db      	lsls	r3, r3, #11
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0409      	lsls	r1, r1, #16
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800239a:	200a      	movs	r0, #10
 800239c:	f000 f85e 	bl	800245c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	029b      	lsls	r3, r3, #10
 80023a8:	4013      	ands	r3, r2
 80023aa:	d006      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	03c9      	lsls	r1, r1, #15
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	4013      	ands	r3, r2
 80023c4:	d037      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0449      	lsls	r1, r1, #17
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e02f      	b.n	8002436 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	035b      	lsls	r3, r3, #13
 80023e2:	0b5b      	lsrs	r3, r3, #13
 80023e4:	43d9      	mvns	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	02db      	lsls	r3, r3, #11
 80023f6:	4013      	ands	r3, r2
 80023f8:	d005      	beq.n	8002406 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 8002400:	4913      	ldr	r1, [pc, #76]	; (8002450 <HAL_ADC_ConfigChannel+0x134>)
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	4013      	ands	r3, r2
 8002410:	d005      	beq.n	800241e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_ADC_ConfigChannel+0x138>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	025b      	lsls	r3, r3, #9
 8002426:	4013      	ands	r3, r2
 8002428:	d005      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_ADC_ConfigChannel+0x130>)
 8002430:	4909      	ldr	r1, [pc, #36]	; (8002458 <HAL_ADC_ConfigChannel+0x13c>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2250      	movs	r2, #80	; 0x50
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	00001001 	.word	0x00001001
 800244c:	40012708 	.word	0x40012708
 8002450:	ff7fffff 	.word	0xff7fffff
 8002454:	ffbfffff 	.word	0xffbfffff
 8002458:	feffffff 	.word	0xfeffffff

0800245c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <ADC_DelayMicroSecond+0x38>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	490b      	ldr	r1, [pc, #44]	; (8002498 <ADC_DelayMicroSecond+0x3c>)
 800246a:	0018      	movs	r0, r3
 800246c:	f7fd fe4c 	bl	8000108 <__udivsi3>
 8002470:	0003      	movs	r3, r0
 8002472:	001a      	movs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4353      	muls	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800247a:	e002      	b.n	8002482 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3b01      	subs	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <ADC_DelayMicroSecond+0x20>
  } 
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000000 	.word	0x20000000
 8002498:	000f4240 	.word	0x000f4240

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	0002      	movs	r2, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b7f      	cmp	r3, #127	; 0x7f
 80024b0:	d828      	bhi.n	8002504 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <__NVIC_SetPriority+0xd4>)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	33c0      	adds	r3, #192	; 0xc0
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	589b      	ldr	r3, [r3, r2]
 80024c2:	1dfa      	adds	r2, r7, #7
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	0011      	movs	r1, r2
 80024c8:	2203      	movs	r2, #3
 80024ca:	400a      	ands	r2, r1
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	21ff      	movs	r1, #255	; 0xff
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	43d2      	mvns	r2, r2
 80024d6:	401a      	ands	r2, r3
 80024d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	22ff      	movs	r2, #255	; 0xff
 80024e0:	401a      	ands	r2, r3
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	2303      	movs	r3, #3
 80024ea:	4003      	ands	r3, r0
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f0:	481f      	ldr	r0, [pc, #124]	; (8002570 <__NVIC_SetPriority+0xd4>)
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	430a      	orrs	r2, r1
 80024fc:	33c0      	adds	r3, #192	; 0xc0
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002502:	e031      	b.n	8002568 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <__NVIC_SetPriority+0xd8>)
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0019      	movs	r1, r3
 800250c:	230f      	movs	r3, #15
 800250e:	400b      	ands	r3, r1
 8002510:	3b08      	subs	r3, #8
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3306      	adds	r3, #6
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	3304      	adds	r3, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1dfa      	adds	r2, r7, #7
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	0011      	movs	r1, r2
 8002524:	2203      	movs	r2, #3
 8002526:	400a      	ands	r2, r1
 8002528:	00d2      	lsls	r2, r2, #3
 800252a:	21ff      	movs	r1, #255	; 0xff
 800252c:	4091      	lsls	r1, r2
 800252e:	000a      	movs	r2, r1
 8002530:	43d2      	mvns	r2, r2
 8002532:	401a      	ands	r2, r3
 8002534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	22ff      	movs	r2, #255	; 0xff
 800253c:	401a      	ands	r2, r3
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	0018      	movs	r0, r3
 8002544:	2303      	movs	r3, #3
 8002546:	4003      	ands	r3, r0
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <__NVIC_SetPriority+0xd8>)
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	001c      	movs	r4, r3
 8002554:	230f      	movs	r3, #15
 8002556:	4023      	ands	r3, r4
 8002558:	3b08      	subs	r3, #8
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	430a      	orrs	r2, r1
 800255e:	3306      	adds	r3, #6
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	18c3      	adds	r3, r0, r3
 8002564:	3304      	adds	r3, #4
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b003      	add	sp, #12
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	045b      	lsls	r3, r3, #17
 8002588:	429a      	cmp	r2, r3
 800258a:	d301      	bcc.n	8002590 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258c:	2301      	movs	r3, #1
 800258e:	e010      	b.n	80025b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <SysTick_Config+0x44>)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	3a01      	subs	r2, #1
 8002596:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002598:	2301      	movs	r3, #1
 800259a:	425b      	negs	r3, r3
 800259c:	2103      	movs	r1, #3
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff ff7c 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SysTick_Config+0x44>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <SysTick_Config+0x44>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	210f      	movs	r1, #15
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	1c02      	adds	r2, r0, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ffbf 	bl	8002578 <SysTick_Config>
 80025fa:	0003      	movs	r3, r0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800261a:	e14f      	b.n	80028bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4091      	lsls	r1, r2
 8002626:	000a      	movs	r2, r1
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <HAL_GPIO_Init+0x30>
 8002632:	e140      	b.n	80028b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	2201      	movs	r2, #1
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2107      	movs	r1, #7
 8002722:	400b      	ands	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	401a      	ands	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d100      	bne.n	8002780 <HAL_GPIO_Init+0x17c>
 800277e:	e09a      	b.n	80028b6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002780:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002786:	2101      	movs	r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_GPIO_Init+0x2d4>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	589b      	ldr	r3, [r3, r2]
 8002798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2203      	movs	r2, #3
 800279e:	4013      	ands	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	409a      	lsls	r2, r3
 80027a6:	0013      	movs	r3, r2
 80027a8:	43da      	mvns	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	23a0      	movs	r3, #160	; 0xa0
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x1ea>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a47      	ldr	r2, [pc, #284]	; (80028dc <HAL_GPIO_Init+0x2d8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x1e6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x1e2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x2e0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x1de>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <HAL_GPIO_Init+0x2e4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x1da>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027de:	2306      	movs	r3, #6
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027ee:	2300      	movs	r3, #0
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	2103      	movs	r1, #3
 80027f4:	400a      	ands	r2, r1
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002800:	4935      	ldr	r1, [pc, #212]	; (80028d8 <HAL_GPIO_Init+0x2d4>)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43da      	mvns	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	4013      	ands	r3, r2
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43da      	mvns	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	4013      	ands	r3, r2
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43da      	mvns	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	035b      	lsls	r3, r3, #13
 800287a:	4013      	ands	r3, r2
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43da      	mvns	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	039b      	lsls	r3, r3, #14
 80028a4:	4013      	ands	r3, r2
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	40da      	lsrs	r2, r3
 80028c4:	1e13      	subs	r3, r2, #0
 80028c6:	d000      	beq.n	80028ca <HAL_GPIO_Init+0x2c6>
 80028c8:	e6a8      	b.n	800261c <HAL_GPIO_Init+0x18>
  }
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b006      	add	sp, #24
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000
 80028dc:	50000400 	.word	0x50000400
 80028e0:	50000800 	.word	0x50000800
 80028e4:	50000c00 	.word	0x50000c00
 80028e8:	50001c00 	.word	0x50001c00
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	0008      	movs	r0, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	1cbb      	adds	r3, r7, #2
 80028fe:	1c02      	adds	r2, r0, #0
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	1c7b      	adds	r3, r7, #1
 8002904:	1c0a      	adds	r2, r1, #0
 8002906:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002908:	1c7b      	adds	r3, r7, #1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002910:	1cbb      	adds	r3, r7, #2
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f000 fbaf 	bl	800309e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002940:	4bcf      	ldr	r3, [pc, #828]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	220c      	movs	r2, #12
 8002946:	4013      	ands	r3, r2
 8002948:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294a:	4bcd      	ldr	r3, [pc, #820]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	4013      	ands	r3, r2
 8002954:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	d100      	bne.n	8002962 <HAL_RCC_OscConfig+0x36>
 8002960:	e07e      	b.n	8002a60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d007      	beq.n	8002978 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x68>
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	025b      	lsls	r3, r3, #9
 8002974:	429a      	cmp	r2, r3
 8002976:	d10d      	bne.n	8002994 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4bc1      	ldr	r3, [pc, #772]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	4013      	ands	r3, r2
 8002982:	d100      	bne.n	8002986 <HAL_RCC_OscConfig+0x5a>
 8002984:	e06b      	b.n	8002a5e <HAL_RCC_OscConfig+0x132>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d167      	bne.n	8002a5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 fb85 	bl	800309e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x84>
 80029a0:	4bb7      	ldr	r3, [pc, #732]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4bb6      	ldr	r3, [pc, #728]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	0249      	lsls	r1, r1, #9
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e027      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	23a0      	movs	r3, #160	; 0xa0
 80029b6:	02db      	lsls	r3, r3, #11
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10e      	bne.n	80029da <HAL_RCC_OscConfig+0xae>
 80029bc:	4bb0      	ldr	r3, [pc, #704]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4baf      	ldr	r3, [pc, #700]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	02c9      	lsls	r1, r1, #11
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	4bad      	ldr	r3, [pc, #692]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4bac      	ldr	r3, [pc, #688]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	0249      	lsls	r1, r1, #9
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e012      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029da:	4ba9      	ldr	r3, [pc, #676]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4ba8      	ldr	r3, [pc, #672]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029e0:	49a8      	ldr	r1, [pc, #672]	; (8002c84 <HAL_RCC_OscConfig+0x358>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	4ba6      	ldr	r3, [pc, #664]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	025b      	lsls	r3, r3, #9
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4ba2      	ldr	r3, [pc, #648]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4ba1      	ldr	r3, [pc, #644]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 80029fa:	49a3      	ldr	r1, [pc, #652]	; (8002c88 <HAL_RCC_OscConfig+0x35c>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fae6 	bl	8001fd8 <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a10:	e009      	b.n	8002a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a12:	f7ff fae1 	bl	8001fd8 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d902      	bls.n	8002a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f000 fb3c 	bl	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a26:	4b96      	ldr	r3, [pc, #600]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0ef      	beq.n	8002a12 <HAL_RCC_OscConfig+0xe6>
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fad0 	bl	8001fd8 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3e:	f7ff facb 	bl	8001fd8 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b64      	cmp	r3, #100	; 0x64
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e326      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a50:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	029b      	lsls	r3, r3, #10
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x112>
 8002a5c:	e000      	b.n	8002a60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2202      	movs	r2, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d100      	bne.n	8002a6c <HAL_RCC_OscConfig+0x140>
 8002a6a:	e08b      	b.n	8002b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d13e      	bne.n	8002afc <HAL_RCC_OscConfig+0x1d0>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d13b      	bne.n	8002afc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a84:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_RCC_OscConfig+0x16c>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e302      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a7b      	ldr	r2, [pc, #492]	; (8002c8c <HAL_RCC_OscConfig+0x360>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002aae:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2209      	movs	r2, #9
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac0:	f000 fc40 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8002ac4:	0001      	movs	r1, r0
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	220f      	movs	r2, #15
 8002ace:	4013      	ands	r3, r2
 8002ad0:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x364>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	000a      	movs	r2, r1
 8002ad6:	40da      	lsrs	r2, r3
 8002ad8:	4b6e      	ldr	r3, [pc, #440]	; (8002c94 <HAL_RCC_OscConfig+0x368>)
 8002ada:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002adc:	4b6e      	ldr	r3, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x36c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2513      	movs	r5, #19
 8002ae2:	197c      	adds	r4, r7, r5
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff fa31 	bl	8001f4c <HAL_InitTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002aee:	197b      	adds	r3, r7, r5
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d046      	beq.n	8002b84 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002af6:	197b      	adds	r3, r7, r5
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	e2d0      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d027      	beq.n	8002b52 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b02:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2209      	movs	r2, #9
 8002b08:	4393      	bics	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fa60 	bl	8001fd8 <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7ff fa5b 	bl	8001fd8 <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e2b6      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2204      	movs	r2, #4
 8002b36:	4013      	ands	r3, r2
 8002b38:	d0f1      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a53      	ldr	r2, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x360>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	021a      	lsls	r2, r3, #8
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	e018      	b.n	8002b84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7ff fa3b 	bl	8001fd8 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff fa36 	bl	8001fd8 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e291      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f1      	bne.n	8002b68 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d100      	bne.n	8002b90 <HAL_RCC_OscConfig+0x264>
 8002b8e:	e0a1      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d140      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x282>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e277      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_RCC_OscConfig+0x370>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	0a19      	lsrs	r1, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	061a      	lsls	r2, r3, #24
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	3301      	adds	r3, #1
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	0212      	lsls	r2, r2, #8
 8002be2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	210f      	movs	r1, #15
 8002bec:	400b      	ands	r3, r1
 8002bee:	4928      	ldr	r1, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x364>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x368>)
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x36c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2513      	movs	r5, #19
 8002bfe:	197c      	adds	r4, r7, r5
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff f9a3 	bl	8001f4c <HAL_InitTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c0a:	197b      	adds	r3, r7, r5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d060      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002c12:	197b      	adds	r3, r7, r5
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	e242      	b.n	800309e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03f      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0049      	lsls	r1, r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7ff f9d3 	bl	8001fd8 <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c38:	f7ff f9ce 	bl	8001fd8 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e229      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_RCC_OscConfig+0x370>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	0a19      	lsrs	r1, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	061a      	lsls	r2, r3, #24
 8002c78:	4b01      	ldr	r3, [pc, #4]	; (8002c80 <HAL_RCC_OscConfig+0x354>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e029      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3a8>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	fffeffff 	.word	0xfffeffff
 8002c88:	fffbffff 	.word	0xfffbffff
 8002c8c:	ffffe0ff 	.word	0xffffe0ff
 8002c90:	08005300 	.word	0x08005300
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004
 8002c9c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ca0:	4bbd      	ldr	r3, [pc, #756]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4bbc      	ldr	r3, [pc, #752]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002ca6:	49bd      	ldr	r1, [pc, #756]	; (8002f9c <HAL_RCC_OscConfig+0x670>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff f994 	bl	8001fd8 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb6:	f7ff f98f 	bl	8001fd8 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1ea      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cc8:	4bb3      	ldr	r3, [pc, #716]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d036      	beq.n	8002d4c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4bac      	ldr	r3, [pc, #688]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cea:	4bab      	ldr	r3, [pc, #684]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff f971 	bl	8001fd8 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7ff f96c 	bl	8001fd8 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d0e:	4ba2      	ldr	r3, [pc, #648]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0f1      	beq.n	8002cfc <HAL_RCC_OscConfig+0x3d0>
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b9f      	ldr	r3, [pc, #636]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d1e:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	438a      	bics	r2, r1
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff f957 	bl	8001fd8 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7ff f952 	bl	8001fd8 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1ad      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d42:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d1f1      	bne.n	8002d30 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2204      	movs	r2, #4
 8002d52:	4013      	ands	r3, r2
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_OscConfig+0x42c>
 8002d56:	e0ae      	b.n	8002eb6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	2027      	movs	r0, #39	; 0x27
 8002d5a:	183b      	adds	r3, r7, r0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d60:	4b8d      	ldr	r3, [pc, #564]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b8a      	ldr	r3, [pc, #552]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d70:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	0549      	lsls	r1, r1, #21
 8002d76:	430a      	orrs	r2, r1
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d7a:	183b      	adds	r3, r7, r0
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x674>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8c:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCC_OscConfig+0x674>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <HAL_RCC_OscConfig+0x674>)
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f91d 	bl	8001fd8 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7ff f918 	bl	8001fd8 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e173      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x674>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_OscConfig+0x4b2>
 8002dce:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd2:	4b71      	ldr	r3, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	651a      	str	r2, [r3, #80]	; 0x50
 8002ddc:	e031      	b.n	8002e42 <HAL_RCC_OscConfig+0x516>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4d4>
 8002de6:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dea:	4b6b      	ldr	r3, [pc, #428]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002dec:	496b      	ldr	r1, [pc, #428]	; (8002f9c <HAL_RCC_OscConfig+0x670>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50
 8002df2:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df6:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002df8:	496a      	ldr	r1, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x678>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50
 8002dfe:	e020      	b.n	8002e42 <HAL_RCC_OscConfig+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	23a0      	movs	r3, #160	; 0xa0
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10e      	bne.n	8002e2a <HAL_RCC_OscConfig+0x4fe>
 8002e0c:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e10:	4b61      	ldr	r3, [pc, #388]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	00c9      	lsls	r1, r1, #3
 8002e16:	430a      	orrs	r2, r1
 8002e18:	651a      	str	r2, [r3, #80]	; 0x50
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e1e:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0049      	lsls	r1, r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	651a      	str	r2, [r3, #80]	; 0x50
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0x516>
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e30:	495a      	ldr	r1, [pc, #360]	; (8002f9c <HAL_RCC_OscConfig+0x670>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50
 8002e36:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e3a:	4b57      	ldr	r3, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e3c:	4959      	ldr	r1, [pc, #356]	; (8002fa4 <HAL_RCC_OscConfig+0x678>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d015      	beq.n	8002e76 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f8c5 	bl	8001fd8 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e52:	e009      	b.n	8002e68 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff f8c0 	bl	8001fd8 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_RCC_OscConfig+0x67c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e11a      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e68:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCC_OscConfig+0x528>
 8002e74:	e014      	b.n	8002ea0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7ff f8af 	bl	8001fd8 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7ff f8aa 	bl	8001fd8 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x67c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e104      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d1ef      	bne.n	8002e80 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea0:	2327      	movs	r3, #39	; 0x27
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002eb0:	493e      	ldr	r1, [pc, #248]	; (8002fac <HAL_RCC_OscConfig+0x680>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d049      	beq.n	8002f54 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d026      	beq.n	8002f16 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x684>)
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_OscConfig+0x684>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0189      	lsls	r1, r1, #6
 8002eea:	430a      	orrs	r2, r1
 8002eec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7ff f873 	bl	8001fd8 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef8:	f7ff f86e 	bl	8001fd8 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0c9      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d0f1      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x5cc>
 8002f14:	e01e      	b.n	8002f54 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	438a      	bics	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCC_OscConfig+0x684>)
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_OscConfig+0x684>)
 8002f28:	4922      	ldr	r1, [pc, #136]	; (8002fb4 <HAL_RCC_OscConfig+0x688>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f853 	bl	8001fd8 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f38:	f7ff f84e 	bl	8001fd8 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0a9      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d1f1      	bne.n	8002f38 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d100      	bne.n	8002f5e <HAL_RCC_OscConfig+0x632>
 8002f5c:	e09e      	b.n	800309c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d100      	bne.n	8002f66 <HAL_RCC_OscConfig+0x63a>
 8002f64:	e077      	b.n	8003056 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d158      	bne.n	8003020 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x66c>)
 8002f74:	4910      	ldr	r1, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x68c>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7ff f82d 	bl	8001fd8 <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f82:	e01b      	b.n	8002fbc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff f828 	bl	8001fd8 <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d914      	bls.n	8002fbc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e083      	b.n	800309e <HAL_RCC_OscConfig+0x772>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	fffffeff 	.word	0xfffffeff
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	fffffbff 	.word	0xfffffbff
 8002fa8:	00001388 	.word	0x00001388
 8002fac:	efffffff 	.word	0xefffffff
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	ffffdfff 	.word	0xffffdfff
 8002fb8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fbc:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	049b      	lsls	r3, r3, #18
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d1dd      	bne.n	8002f84 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a37      	ldr	r2, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x780>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0449      	lsls	r1, r1, #17
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe ffef 	bl	8001fd8 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe ffea 	bl	8001fd8 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	049b      	lsls	r3, r3, #18
 800301a:	4013      	ands	r3, r2
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x6d4>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8003026:	4922      	ldr	r1, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x784>)
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe ffd4 	bl	8001fd8 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7fe ffcf 	bl	8001fd8 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e02a      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	049b      	lsls	r3, r3, #18
 8003050:	4013      	ands	r3, r2
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x70a>
 8003054:	e022      	b.n	800309c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01d      	b.n	800309e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_OscConfig+0x77c>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	025b      	lsls	r3, r3, #9
 800306e:	401a      	ands	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d10f      	bne.n	8003098 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	23f0      	movs	r3, #240	; 0xf0
 800307c:	039b      	lsls	r3, r3, #14
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b00a      	add	sp, #40	; 0x28
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40021000 	.word	0x40021000
 80030ac:	ff02ffff 	.word	0xff02ffff
 80030b0:	feffffff 	.word	0xfeffffff

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b5b0      	push	{r4, r5, r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e128      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b96      	ldr	r3, [pc, #600]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d91e      	bls.n	8003114 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b93      	ldr	r3, [pc, #588]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	4393      	bics	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	4b90      	ldr	r3, [pc, #576]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030e8:	f7fe ff76 	bl	8001fd8 <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f0:	e009      	b.n	8003106 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f2:	f7fe ff71 	bl	8001fd8 <HAL_GetTick>
 80030f6:	0002      	movs	r2, r0
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	4a8a      	ldr	r2, [pc, #552]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e109      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b87      	ldr	r3, [pc, #540]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d1ee      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311e:	4b83      	ldr	r3, [pc, #524]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	22f0      	movs	r2, #240	; 0xf0
 8003124:	4393      	bics	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 800312e:	430a      	orrs	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d100      	bne.n	800313e <HAL_RCC_ClockConfig+0x8a>
 800313c:	e089      	b.n	8003252 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003146:	4b79      	ldr	r3, [pc, #484]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4013      	ands	r3, r2
 8003150:	d120      	bne.n	8003194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0e1      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	049b      	lsls	r3, r3, #18
 8003166:	4013      	ands	r3, r2
 8003168:	d114      	bne.n	8003194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0d5      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	4013      	ands	r3, r2
 800317e:	d109      	bne.n	8003194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ca      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003184:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4013      	ands	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0c2      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2203      	movs	r2, #3
 800319a:	4393      	bics	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fe ff16 	bl	8001fd8 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	e009      	b.n	80031ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ba:	f7fe ff0d 	bl	8001fd8 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0a5      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ce:	4b57      	ldr	r3, [pc, #348]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	220c      	movs	r2, #12
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d1ef      	bne.n	80031ba <HAL_RCC_ClockConfig+0x106>
 80031da:	e03a      	b.n	8003252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fe fef7 	bl	8001fd8 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e08f      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	220c      	movs	r2, #12
 8003200:	4013      	ands	r3, r2
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d1ef      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x132>
 8003206:	e024      	b.n	8003252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d11b      	bne.n	8003248 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003210:	e009      	b.n	8003226 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7fe fee1 	bl	8001fd8 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e079      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	220c      	movs	r2, #12
 800322c:	4013      	ands	r3, r2
 800322e:	2b04      	cmp	r3, #4
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_ClockConfig+0x15e>
 8003232:	e00e      	b.n	8003252 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe fed0 	bl	8001fd8 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e068      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	220c      	movs	r2, #12
 800324e:	4013      	ands	r3, r2
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d21e      	bcs.n	800329e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4393      	bics	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003272:	f7fe feb1 	bl	8001fd8 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	e009      	b.n	8003290 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe feac 	bl	8001fd8 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_RCC_ClockConfig+0x274>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e044      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_ClockConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d1ee      	bne.n	800327c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2204      	movs	r2, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x27c>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2208      	movs	r2, #8
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00a      	beq.n	80032dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCC_ClockConfig+0x280>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00da      	lsls	r2, r3, #3
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032dc:	f000 f832 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 80032e0:	0001      	movs	r1, r0
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x278>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	220f      	movs	r2, #15
 80032ea:	4013      	ands	r3, r2
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x284>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	000a      	movs	r2, r1
 80032f2:	40da      	lsrs	r2, r3
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_ClockConfig+0x288>)
 80032f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_ClockConfig+0x28c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	250b      	movs	r5, #11
 80032fe:	197c      	adds	r4, r7, r5
 8003300:	0018      	movs	r0, r3
 8003302:	f7fe fe23 	bl	8001f4c <HAL_InitTick>
 8003306:	0003      	movs	r3, r0
 8003308:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800330a:	197b      	adds	r3, r7, r5
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003312:	197b      	adds	r3, r7, r5
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	e000      	b.n	800331a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bdb0      	pop	{r4, r5, r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40022000 	.word	0x40022000
 8003328:	00001388 	.word	0x00001388
 800332c:	40021000 	.word	0x40021000
 8003330:	fffff8ff 	.word	0xfffff8ff
 8003334:	ffffc7ff 	.word	0xffffc7ff
 8003338:	08005300 	.word	0x08005300
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004

08003344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b08e      	sub	sp, #56	; 0x38
 8003348:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_GetSysClockFreq+0x138>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003352:	230c      	movs	r3, #12
 8003354:	4013      	ands	r3, r2
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d014      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 800335a:	d900      	bls.n	800335e <HAL_RCC_GetSysClockFreq+0x1a>
 800335c:	e07b      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x112>
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x24>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d00b      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x3a>
 8003366:	e076      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003368:	4b44      	ldr	r3, [pc, #272]	; (800347c <HAL_RCC_GetSysClockFreq+0x138>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2210      	movs	r2, #16
 800336e:	4013      	ands	r3, r2
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003376:	e07c      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <HAL_RCC_GetSysClockFreq+0x140>)
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800337c:	e079      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCC_GetSysClockFreq+0x144>)
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003382:	e076      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	0c9a      	lsrs	r2, r3, #18
 8003388:	230f      	movs	r3, #15
 800338a:	401a      	ands	r2, r3
 800338c:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCC_GetSysClockFreq+0x148>)
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	0d9a      	lsrs	r2, r3, #22
 8003396:	2303      	movs	r3, #3
 8003398:	4013      	ands	r3, r2
 800339a:	3301      	adds	r3, #1
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <HAL_RCC_GetSysClockFreq+0x138>)
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	025b      	lsls	r3, r3, #9
 80033a6:	4013      	ands	r3, r2
 80033a8:	d01a      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	4a35      	ldr	r2, [pc, #212]	; (8003488 <HAL_RCC_GetSysClockFreq+0x144>)
 80033b4:	2300      	movs	r3, #0
 80033b6:	69b8      	ldr	r0, [r7, #24]
 80033b8:	69f9      	ldr	r1, [r7, #28]
 80033ba:	f7fd f83b 	bl	8000434 <__aeabi_lmul>
 80033be:	0002      	movs	r2, r0
 80033c0:	000b      	movs	r3, r1
 80033c2:	0010      	movs	r0, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f7fd f80f 	bl	80003f4 <__aeabi_uldivmod>
 80033d6:	0002      	movs	r2, r0
 80033d8:	000b      	movs	r3, r1
 80033da:	0013      	movs	r3, r2
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	e037      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCC_GetSysClockFreq+0x138>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2210      	movs	r2, #16
 80033e6:	4013      	ands	r3, r2
 80033e8:	d01a      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033f4:	2300      	movs	r3, #0
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	f7fd f81b 	bl	8000434 <__aeabi_lmul>
 80033fe:	0002      	movs	r2, r0
 8003400:	000b      	movs	r3, r1
 8003402:	0010      	movs	r0, r2
 8003404:	0019      	movs	r1, r3
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f7fc ffef 	bl	80003f4 <__aeabi_uldivmod>
 8003416:	0002      	movs	r2, r0
 8003418:	000b      	movs	r3, r1
 800341a:	0013      	movs	r3, r2
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
 800341e:	e017      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	0018      	movs	r0, r3
 8003424:	2300      	movs	r3, #0
 8003426:	0019      	movs	r1, r3
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_RCC_GetSysClockFreq+0x140>)
 800342a:	2300      	movs	r3, #0
 800342c:	f7fd f802 	bl	8000434 <__aeabi_lmul>
 8003430:	0002      	movs	r2, r0
 8003432:	000b      	movs	r3, r1
 8003434:	0010      	movs	r0, r2
 8003436:	0019      	movs	r1, r3
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	001c      	movs	r4, r3
 800343c:	2300      	movs	r3, #0
 800343e:	001d      	movs	r5, r3
 8003440:	0022      	movs	r2, r4
 8003442:	002b      	movs	r3, r5
 8003444:	f7fc ffd6 	bl	80003f4 <__aeabi_uldivmod>
 8003448:	0002      	movs	r2, r0
 800344a:	000b      	movs	r3, r1
 800344c:	0013      	movs	r3, r2
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003454:	e00d      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetSysClockFreq+0x138>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	2207      	movs	r2, #7
 800345e:	4013      	ands	r3, r2
 8003460:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	3301      	adds	r3, #1
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	0212      	lsls	r2, r2, #8
 800346a:	409a      	lsls	r2, r3
 800346c:	0013      	movs	r3, r2
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003470:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b00e      	add	sp, #56	; 0x38
 800347a:	bdb0      	pop	{r4, r5, r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	003d0900 	.word	0x003d0900
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200
 800348c:	08005318 	.word	0x08005318

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b02      	ldr	r3, [pc, #8]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	20000000 	.word	0x20000000

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a8:	f7ff fff2 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034ac:	0001      	movs	r1, r0
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	2207      	movs	r2, #7
 80034b6:	4013      	ands	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	40d9      	lsrs	r1, r3
 80034be:	000b      	movs	r3, r1
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08005310 	.word	0x08005310

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	0001      	movs	r1, r0
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	40d9      	lsrs	r1, r3
 80034ea:	000b      	movs	r3, r1
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08005310 	.word	0x08005310

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003504:	2317      	movs	r3, #23
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2220      	movs	r2, #32
 8003512:	4013      	ands	r3, r2
 8003514:	d106      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4013      	ands	r3, r2
 8003520:	d100      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003522:	e0d9      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003524:	4b9c      	ldr	r3, [pc, #624]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	055b      	lsls	r3, r3, #21
 800352c:	4013      	ands	r3, r2
 800352e:	d10a      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	4b99      	ldr	r3, [pc, #612]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003534:	4b98      	ldr	r3, [pc, #608]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	0549      	lsls	r1, r1, #21
 800353a:	430a      	orrs	r2, r1
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800353e:	2317      	movs	r3, #23
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b95      	ldr	r3, [pc, #596]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4013      	ands	r3, r2
 8003550:	d11a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003552:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b91      	ldr	r3, [pc, #580]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0049      	lsls	r1, r1, #1
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003560:	f7fe fd3a 	bl	8001fd8 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fd35 	bl	8001fd8 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e108      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b87      	ldr	r3, [pc, #540]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4013      	ands	r3, r2
 8003586:	d0f0      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003588:	4b83      	ldr	r3, [pc, #524]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	23c0      	movs	r3, #192	; 0xc0
 800358e:	039b      	lsls	r3, r3, #14
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	039b      	lsls	r3, r3, #14
 800359c:	4013      	ands	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	039b      	lsls	r3, r3, #14
 80035ac:	4013      	ands	r3, r2
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d013      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	23c0      	movs	r3, #192	; 0xc0
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	401a      	ands	r2, r3
 80035be:	23c0      	movs	r3, #192	; 0xc0
 80035c0:	029b      	lsls	r3, r3, #10
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	401a      	ands	r2, r3
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d101      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0d8      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035dc:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e0:	23c0      	movs	r3, #192	; 0xc0
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d049      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	23c0      	movs	r3, #192	; 0xc0
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	4013      	ands	r3, r2
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d004      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2220      	movs	r2, #32
 8003604:	4013      	ands	r3, r2
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d034      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4013      	ands	r3, r2
 8003622:	d02e      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003624:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0309      	lsls	r1, r1, #12
 8003638:	430a      	orrs	r2, r1
 800363a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363c:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800363e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003642:	4958      	ldr	r1, [pc, #352]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003644:	400a      	ands	r2, r1
 8003646:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4013      	ands	r3, r2
 8003656:	d014      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fcbe 	bl	8001fd8 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003660:	e009      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe fcb9 	bl	8001fd8 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e08b      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d0ef      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	23c0      	movs	r3, #192	; 0xc0
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	401a      	ands	r2, r3
 800368c:	23c0      	movs	r3, #192	; 0xc0
 800368e:	029b      	lsls	r3, r3, #10
 8003690:	429a      	cmp	r2, r3
 8003692:	d10c      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a44      	ldr	r2, [pc, #272]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	401a      	ands	r2, r3
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	23c0      	movs	r3, #192	; 0xc0
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	401a      	ands	r2, r3
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c2:	2317      	movs	r3, #23
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036d2:	4937      	ldr	r1, [pc, #220]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	2203      	movs	r2, #3
 80036e8:	4393      	bics	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80036f2:	430a      	orrs	r2, r1
 80036f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003700:	4b25      	ldr	r3, [pc, #148]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	220c      	movs	r2, #12
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	4b22      	ldr	r3, [pc, #136]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003710:	430a      	orrs	r2, r1
 8003712:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003722:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800372e:	430a      	orrs	r2, r1
 8003730:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2208      	movs	r2, #8
 8003738:	4013      	ands	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003742:	4013      	ands	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800374c:	430a      	orrs	r2, r1
 800374e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	4013      	ands	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003760:	4013      	ands	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800376a:	430a      	orrs	r2, r1
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	4013      	ands	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003788:	430a      	orrs	r2, r1
 800378a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b006      	add	sp, #24
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	fffcffff 	.word	0xfffcffff
 80037a4:	fff7ffff 	.word	0xfff7ffff
 80037a8:	00001388 	.word	0x00001388
 80037ac:	ffcfffff 	.word	0xffcfffff
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	fffff3ff 	.word	0xfffff3ff
 80037b8:	ffffcfff 	.word	0xffffcfff
 80037bc:	fbffffff 	.word	0xfbffffff
 80037c0:	fff3ffff 	.word	0xfff3ffff

080037c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e083      	b.n	80038de <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	2382      	movs	r3, #130	; 0x82
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d009      	beq.n	80037fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
 80037f0:	e005      	b.n	80037fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2251      	movs	r2, #81	; 0x51
 8003808:	5c9b      	ldrb	r3, [r3, r2]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2250      	movs	r2, #80	; 0x50
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0018      	movs	r0, r3
 800381c:	f7fe f992 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2251      	movs	r2, #81	; 0x51
 8003824:	2102      	movs	r1, #2
 8003826:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	438a      	bics	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	2382      	movs	r3, #130	; 0x82
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	401a      	ands	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	2384      	movs	r3, #132	; 0x84
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	400b      	ands	r3, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68d9      	ldr	r1, [r3, #12]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	400b      	ands	r3, r1
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2102      	movs	r1, #2
 8003860:	400b      	ands	r3, r1
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	2101      	movs	r1, #1
 800386a:	400b      	ands	r3, r1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	400b      	ands	r3, r1
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	2138      	movs	r1, #56	; 0x38
 8003880:	400b      	ands	r3, r1
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	400b      	ands	r3, r1
 800388c:	431a      	orrs	r2, r3
 800388e:	0011      	movs	r1, r2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	401a      	ands	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	2204      	movs	r2, #4
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2210      	movs	r2, #16
 80038b4:	401a      	ands	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <HAL_SPI_Init+0x124>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2251      	movs	r2, #81	; 0x51
 80038d8:	2101      	movs	r1, #1
 80038da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	fffff7ff 	.word	0xfffff7ff

080038ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038fc:	231f      	movs	r3, #31
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2250      	movs	r2, #80	; 0x50
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Transmit+0x26>
 800390e:	2302      	movs	r3, #2
 8003910:	e13e      	b.n	8003b90 <HAL_SPI_Transmit+0x2a4>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2250      	movs	r2, #80	; 0x50
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800391a:	f7fe fb5d 	bl	8001fd8 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003922:	2316      	movs	r3, #22
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2251      	movs	r2, #81	; 0x51
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d004      	beq.n	8003942 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003938:	231f      	movs	r3, #31
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2202      	movs	r2, #2
 800393e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003940:	e11b      	b.n	8003b7a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_SPI_Transmit+0x64>
 8003948:	1dbb      	adds	r3, r7, #6
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003950:	231f      	movs	r3, #31
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
    goto error;
 8003958:	e10f      	b.n	8003b7a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2251      	movs	r2, #81	; 0x51
 800395e:	2103      	movs	r1, #3
 8003960:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1dba      	adds	r2, r7, #6
 8003972:	8812      	ldrh	r2, [r2, #0]
 8003974:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1dba      	adds	r2, r7, #6
 800397a:	8812      	ldrh	r2, [r2, #0]
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d110      	bne.n	80039ca <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	438a      	bics	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	01c9      	lsls	r1, r1, #7
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2240      	movs	r2, #64	; 0x40
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d007      	beq.n	80039e8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d14e      	bne.n	8003a92 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_SPI_Transmit+0x11a>
 80039fc:	2316      	movs	r3, #22
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d13f      	bne.n	8003a86 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a2a:	e02c      	b.n	8003a86 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d112      	bne.n	8003a60 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	881a      	ldrh	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a5e:	e012      	b.n	8003a86 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a60:	f7fe faba 	bl	8001fd8 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d802      	bhi.n	8003a76 <HAL_SPI_Transmit+0x18a>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_Transmit+0x190>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003a7c:	231f      	movs	r3, #31
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2203      	movs	r2, #3
 8003a82:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a84:	e079      	b.n	8003b7a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1cd      	bne.n	8003a2c <HAL_SPI_Transmit+0x140>
 8003a90:	e04f      	b.n	8003b32 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_SPI_Transmit+0x1b8>
 8003a9a:	2316      	movs	r3, #22
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d141      	bne.n	8003b28 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aca:	e02d      	b.n	8003b28 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d113      	bne.n	8003b02 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b00:	e012      	b.n	8003b28 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b02:	f7fe fa69 	bl	8001fd8 <HAL_GetTick>
 8003b06:	0002      	movs	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d802      	bhi.n	8003b18 <HAL_SPI_Transmit+0x22c>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	d102      	bne.n	8003b1e <HAL_SPI_Transmit+0x232>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d104      	bne.n	8003b28 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003b1e:	231f      	movs	r3, #31
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b26:	e028      	b.n	8003b7a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1cc      	bne.n	8003acc <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fc07 	bl	800434c <SPI_EndRxTxTransaction>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003b6e:	231f      	movs	r3, #31
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e000      	b.n	8003b7a <HAL_SPI_Transmit+0x28e>
  }

error:
 8003b78:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2251      	movs	r2, #81	; 0x51
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2250      	movs	r2, #80	; 0x50
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b8a:	231f      	movs	r3, #31
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	781b      	ldrb	r3, [r3, #0]
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b008      	add	sp, #32
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba8:	2317      	movs	r3, #23
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	2382      	movs	r3, #130	; 0x82
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d113      	bne.n	8003be4 <HAL_SPI_Receive+0x4c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10f      	bne.n	8003be4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2251      	movs	r2, #81	; 0x51
 8003bc8:	2104      	movs	r1, #4
 8003bca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	881c      	ldrh	r4, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	0023      	movs	r3, r4
 8003bdc:	f000 f902 	bl	8003de4 <HAL_SPI_TransmitReceive>
 8003be0:	0003      	movs	r3, r0
 8003be2:	e0f9      	b.n	8003dd8 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2250      	movs	r2, #80	; 0x50
 8003be8:	5c9b      	ldrb	r3, [r3, r2]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Receive+0x5a>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0f2      	b.n	8003dd8 <HAL_SPI_Receive+0x240>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2250      	movs	r2, #80	; 0x50
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bfa:	f7fe f9ed 	bl	8001fd8 <HAL_GetTick>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2251      	movs	r2, #81	; 0x51
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d004      	beq.n	8003c18 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003c0e:	2317      	movs	r3, #23
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c16:	e0d4      	b.n	8003dc2 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_SPI_Receive+0x8e>
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003c26:	2317      	movs	r3, #23
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c2e:	e0c8      	b.n	8003dc2 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2251      	movs	r2, #81	; 0x51
 8003c34:	2104      	movs	r1, #4
 8003c36:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1dba      	adds	r2, r7, #6
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1dba      	adds	r2, r7, #6
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10f      	bne.n	8003c9e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4951      	ldr	r1, [pc, #324]	; (8003de0 <HAL_SPI_Receive+0x248>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d164      	bne.n	8003d8e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cc4:	e02f      	b.n	8003d26 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d115      	bne.n	8003d00 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	001a      	movs	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfe:	e012      	b.n	8003d26 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fe f96a 	bl	8001fd8 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d802      	bhi.n	8003d16 <HAL_SPI_Receive+0x17e>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_Receive+0x184>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003d1c:	2317      	movs	r3, #23
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2203      	movs	r2, #3
 8003d22:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d24:	e04d      	b.n	8003dc2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ca      	bne.n	8003cc6 <HAL_SPI_Receive+0x12e>
 8003d30:	e032      	b.n	8003d98 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d113      	bne.n	8003d68 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d66:	e012      	b.n	8003d8e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d68:	f7fe f936 	bl	8001fd8 <HAL_GetTick>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d802      	bhi.n	8003d7e <HAL_SPI_Receive+0x1e6>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_SPI_Receive+0x1ec>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003d84:	2317      	movs	r3, #23
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2203      	movs	r2, #3
 8003d8a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d8c:	e019      	b.n	8003dc2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1cc      	bne.n	8003d32 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 fa6a 	bl	8004278 <SPI_EndRxTransaction>
 8003da4:	1e03      	subs	r3, r0, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003db6:	2317      	movs	r3, #23
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e000      	b.n	8003dc2 <HAL_SPI_Receive+0x22a>
  }

error :
 8003dc0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2251      	movs	r2, #81	; 0x51
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2250      	movs	r2, #80	; 0x50
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dd2:	2317      	movs	r3, #23
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	781b      	ldrb	r3, [r3, #0]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b007      	add	sp, #28
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	ffffbfff 	.word	0xffffbfff

08003de4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	001a      	movs	r2, r3
 8003df2:	1cbb      	adds	r3, r7, #2
 8003df4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003df6:	2301      	movs	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dfa:	232b      	movs	r3, #43	; 0x2b
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2250      	movs	r2, #80	; 0x50
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x2c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e1a0      	b.n	8004152 <HAL_SPI_TransmitReceive+0x36e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2250      	movs	r2, #80	; 0x50
 8003e14:	2101      	movs	r1, #1
 8003e16:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e18:	f7fe f8de 	bl	8001fd8 <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e20:	2023      	movs	r0, #35	; 0x23
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	2151      	movs	r1, #81	; 0x51
 8003e28:	5c52      	ldrb	r2, [r2, r1]
 8003e2a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e32:	231a      	movs	r3, #26
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	1cba      	adds	r2, r7, #2
 8003e38:	8812      	ldrh	r2, [r2, #0]
 8003e3a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d011      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x84>
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	2382      	movs	r3, #130	; 0x82
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d107      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x7a>
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d004      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003e5e:	232b      	movs	r3, #43	; 0x2b
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e66:	e169      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_SPI_TransmitReceive+0x98>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_SPI_TransmitReceive+0x98>
 8003e74:	1cbb      	adds	r3, r7, #2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003e7c:	232b      	movs	r3, #43	; 0x2b
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e84:	e15a      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2251      	movs	r2, #81	; 0x51
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d003      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2251      	movs	r2, #81	; 0x51
 8003e96:	2105      	movs	r1, #5
 8003e98:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1cba      	adds	r2, r7, #2
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1cba      	adds	r2, r7, #2
 8003eb2:	8812      	ldrh	r2, [r2, #0]
 8003eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1cba      	adds	r2, r7, #2
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1cba      	adds	r2, r7, #2
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d007      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d000      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x120>
 8003f02:	e07a      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x132>
 8003f0c:	231a      	movs	r3, #26
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d166      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	e053      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11b      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x19e>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x19e>
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d113      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d119      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x1e0>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d014      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fc4:	f7fe f808 	bl	8001fd8 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d807      	bhi.n	8003fe4 <HAL_SPI_TransmitReceive+0x200>
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	d004      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003fda:	232b      	movs	r3, #43	; 0x2b
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2203      	movs	r2, #3
 8003fe0:	701a      	strb	r2, [r3, #0]
        goto error;
 8003fe2:	e0ab      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1a6      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x158>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1a1      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x158>
 8003ff8:	e07f      	b.n	80040fa <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_SPI_TransmitReceive+0x22a>
 8004002:	231a      	movs	r3, #26
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d000      	beq.n	800400e <HAL_SPI_TransmitReceive+0x22a>
 800400c:	e06b      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004034:	e057      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2202      	movs	r2, #2
 800403e:	4013      	ands	r3, r2
 8004040:	2b02      	cmp	r3, #2
 8004042:	d11c      	bne.n	800407e <HAL_SPI_TransmitReceive+0x29a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d017      	beq.n	800407e <HAL_SPI_TransmitReceive+0x29a>
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d114      	bne.n	800407e <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2201      	movs	r2, #1
 8004086:	4013      	ands	r3, r2
 8004088:	2b01      	cmp	r3, #1
 800408a:	d119      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x2dc>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040c0:	f7fd ff8a 	bl	8001fd8 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d802      	bhi.n	80040d6 <HAL_SPI_TransmitReceive+0x2f2>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	3301      	adds	r3, #1
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x2f8>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80040dc:	232b      	movs	r3, #43	; 0x2b
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2203      	movs	r2, #3
 80040e2:	701a      	strb	r2, [r3, #0]
        goto error;
 80040e4:	e02a      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1a2      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x252>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d19d      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f923 	bl	800434c <SPI_EndRxTxTransaction>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d007      	beq.n	800411a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800410a:	232b      	movs	r3, #43	; 0x2b
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004118:	e010      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	e000      	b.n	800413c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800413a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2251      	movs	r2, #81	; 0x51
 8004140:	2101      	movs	r1, #1
 8004142:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2250      	movs	r2, #80	; 0x50
 8004148:	2100      	movs	r1, #0
 800414a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800414c:	232b      	movs	r3, #43	; 0x2b
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	781b      	ldrb	r3, [r3, #0]
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b00c      	add	sp, #48	; 0x30
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800416c:	f7fd ff34 	bl	8001fd8 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800417c:	f7fd ff2c 	bl	8001fd8 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004184:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	015b      	lsls	r3, r3, #5
 800418a:	0d1b      	lsrs	r3, r3, #20
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	4353      	muls	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004192:	e058      	b.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	d055      	beq.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800419a:	f7fd ff1d 	bl	8001fd8 <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d902      	bls.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d142      	bne.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	21e0      	movs	r1, #224	; 0xe0
 80041bc:	438a      	bics	r2, r1
 80041be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	2382      	movs	r3, #130	; 0x82
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d113      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	019b      	lsls	r3, r3, #6
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d110      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	491a      	ldr	r1, [pc, #104]	; (8004274 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800420c:	400a      	ands	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	0189      	lsls	r1, r1, #6
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2251      	movs	r2, #81	; 0x51
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2250      	movs	r2, #80	; 0x50
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e017      	b.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	425a      	negs	r2, r3
 8004256:	4153      	adcs	r3, r2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	001a      	movs	r2, r3
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d197      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b008      	add	sp, #32
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20000000 	.word	0x20000000
 8004274:	ffffdfff 	.word	0xffffdfff

08004278 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	2382      	movs	r3, #130	; 0x82
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	429a      	cmp	r2, r3
 800428e:	d113      	bne.n	80042b8 <SPI_EndRxTransaction+0x40>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	429a      	cmp	r2, r3
 800429a:	d005      	beq.n	80042a8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d107      	bne.n	80042b8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	438a      	bics	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	2382      	movs	r3, #130	; 0x82
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d12b      	bne.n	800431c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d012      	beq.n	80042f6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	0013      	movs	r3, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	f7ff ff3d 	bl	800415c <SPI_WaitFlagStateUntilTimeout>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d02d      	beq.n	8004342 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	2220      	movs	r2, #32
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e026      	b.n	8004344 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	0013      	movs	r3, r2
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	f7ff ff2a 	bl	800415c <SPI_WaitFlagStateUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d01a      	beq.n	8004342 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	2220      	movs	r2, #32
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e013      	b.n	8004344 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	0013      	movs	r3, r2
 8004326:	2200      	movs	r2, #0
 8004328:	2101      	movs	r1, #1
 800432a:	f7ff ff17 	bl	800415c <SPI_WaitFlagStateUntilTimeout>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d007      	beq.n	8004342 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	2220      	movs	r2, #32
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e000      	b.n	8004344 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}

0800434c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <SPI_EndRxTxTransaction+0x84>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	491d      	ldr	r1, [pc, #116]	; (80043d4 <SPI_EndRxTxTransaction+0x88>)
 800435e:	0018      	movs	r0, r3
 8004360:	f7fb fed2 	bl	8000108 <__udivsi3>
 8004364:	0003      	movs	r3, r0
 8004366:	001a      	movs	r2, r3
 8004368:	0013      	movs	r3, r2
 800436a:	015b      	lsls	r3, r3, #5
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	189b      	adds	r3, r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	2382      	movs	r3, #130	; 0x82
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	429a      	cmp	r2, r3
 8004380:	d112      	bne.n	80043a8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	0013      	movs	r3, r2
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	f7ff fee4 	bl	800415c <SPI_WaitFlagStateUntilTimeout>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d016      	beq.n	80043c6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	2220      	movs	r2, #32
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e00f      	b.n	80043c8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	4013      	ands	r3, r2
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d0f2      	beq.n	80043a8 <SPI_EndRxTxTransaction+0x5c>
 80043c2:	e000      	b.n	80043c6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80043c4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b006      	add	sp, #24
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000000 	.word	0x20000000
 80043d4:	016e3600 	.word	0x016e3600

080043d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e032      	b.n	8004450 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2239      	movs	r2, #57	; 0x39
 80043ee:	5c9b      	ldrb	r3, [r3, r2]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2238      	movs	r2, #56	; 0x38
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f7fd fc95 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2239      	movs	r2, #57	; 0x39
 800440a:	2102      	movs	r1, #2
 800440c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	0019      	movs	r1, r3
 8004418:	0010      	movs	r0, r2
 800441a:	f000 f9ff 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	223e      	movs	r2, #62	; 0x3e
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	223a      	movs	r2, #58	; 0x3a
 800442a:	2101      	movs	r1, #1
 800442c:	5499      	strb	r1, [r3, r2]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	223b      	movs	r2, #59	; 0x3b
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	223c      	movs	r2, #60	; 0x3c
 800443a:	2101      	movs	r1, #1
 800443c:	5499      	strb	r1, [r3, r2]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	223d      	movs	r2, #61	; 0x3d
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2239      	movs	r2, #57	; 0x39
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e032      	b.n	80044d0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2239      	movs	r2, #57	; 0x39
 800446e:	5c9b      	ldrb	r3, [r3, r2]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2238      	movs	r2, #56	; 0x38
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 f829 	bl	80044d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2239      	movs	r2, #57	; 0x39
 800448a:	2102      	movs	r1, #2
 800448c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f000 f9bf 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223e      	movs	r2, #62	; 0x3e
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223a      	movs	r2, #58	; 0x3a
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223b      	movs	r2, #59	; 0x3b
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	223d      	movs	r2, #61	; 0x3d
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2239      	movs	r2, #57	; 0x39
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2317      	movs	r3, #23
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2238      	movs	r2, #56	; 0x38
 8004500:	5c9b      	ldrb	r3, [r3, r2]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004506:	2302      	movs	r3, #2
 8004508:	e0ad      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2238      	movs	r2, #56	; 0x38
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d100      	bne.n	800451a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004518:	e076      	b.n	8004608 <HAL_TIM_PWM_ConfigChannel+0x120>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d900      	bls.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004520:	e095      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d04e      	beq.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d900      	bls.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x48>
 800452e:	e08e      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d021      	beq.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x98>
 800453c:	e087      	b.n	800464e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0011      	movs	r1, r2
 8004546:	0018      	movs	r0, r3
 8004548:	f000 f9bc 	bl	80048c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2108      	movs	r1, #8
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2104      	movs	r1, #4
 8004568:	438a      	bics	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6999      	ldr	r1, [r3, #24]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	619a      	str	r2, [r3, #24]
      break;
 800457e:	e06b      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f9d7 	bl	800493c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	0109      	lsls	r1, r1, #4
 800459c:	430a      	orrs	r2, r1
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4931      	ldr	r1, [pc, #196]	; (8004670 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	619a      	str	r2, [r3, #24]
      break;
 80045c4:	e048      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 f9f6 	bl	80049c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2108      	movs	r1, #8
 80045e0:	430a      	orrs	r2, r1
 80045e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2104      	movs	r1, #4
 80045f0:	438a      	bics	r2, r1
 80045f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69d9      	ldr	r1, [r3, #28]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	61da      	str	r2, [r3, #28]
      break;
 8004606:	e027      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fa15 	bl	8004a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	0109      	lsls	r1, r1, #4
 8004624:	430a      	orrs	r2, r1
 8004626:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	490f      	ldr	r1, [pc, #60]	; (8004670 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004634:	400a      	ands	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69d9      	ldr	r1, [r3, #28]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	61da      	str	r2, [r3, #28]
      break;
 800464c:	e004      	b.n	8004658 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800464e:	2317      	movs	r3, #23
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
      break;
 8004656:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2238      	movs	r2, #56	; 0x38
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

  return status;
 8004660:	2317      	movs	r3, #23
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	fffffbff 	.word	0xfffffbff

08004674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	230f      	movs	r3, #15
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2238      	movs	r2, #56	; 0x38
 800468a:	5c9b      	ldrb	r3, [r3, r2]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIM_ConfigClockSource+0x20>
 8004690:	2302      	movs	r3, #2
 8004692:	e0bc      	b.n	800480e <HAL_TIM_ConfigClockSource+0x19a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2238      	movs	r2, #56	; 0x38
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2239      	movs	r2, #57	; 0x39
 80046a0:	2102      	movs	r1, #2
 80046a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2277      	movs	r2, #119	; 0x77
 80046b0:	4393      	bics	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_TIM_ConfigClockSource+0x1a4>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	0192      	lsls	r2, r2, #6
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d040      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xde>
 80046d0:	2280      	movs	r2, #128	; 0x80
 80046d2:	0192      	lsls	r2, r2, #6
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d900      	bls.n	80046da <HAL_TIM_ConfigClockSource+0x66>
 80046d8:	e088      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0152      	lsls	r2, r2, #5
 80046de:	4293      	cmp	r3, r2
 80046e0:	d100      	bne.n	80046e4 <HAL_TIM_ConfigClockSource+0x70>
 80046e2:	e088      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x182>
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	0152      	lsls	r2, r2, #5
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d900      	bls.n	80046ee <HAL_TIM_ConfigClockSource+0x7a>
 80046ec:	e07e      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 80046ee:	2b70      	cmp	r3, #112	; 0x70
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0xb0>
 80046f2:	d900      	bls.n	80046f6 <HAL_TIM_ConfigClockSource+0x82>
 80046f4:	e07a      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 80046f6:	2b60      	cmp	r3, #96	; 0x60
 80046f8:	d04f      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x126>
 80046fa:	d900      	bls.n	80046fe <HAL_TIM_ConfigClockSource+0x8a>
 80046fc:	e076      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 80046fe:	2b50      	cmp	r3, #80	; 0x50
 8004700:	d03b      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x106>
 8004702:	d900      	bls.n	8004706 <HAL_TIM_ConfigClockSource+0x92>
 8004704:	e072      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d057      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x146>
 800470a:	d900      	bls.n	800470e <HAL_TIM_ConfigClockSource+0x9a>
 800470c:	e06e      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 800470e:	2b30      	cmp	r3, #48	; 0x30
 8004710:	d063      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x166>
 8004712:	d86b      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d060      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x166>
 8004718:	d868      	bhi.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d05d      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x166>
 800471e:	2b10      	cmp	r3, #16
 8004720:	d05b      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x166>
 8004722:	e063      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6899      	ldr	r1, [r3, #8]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 fa44 	bl	8004bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2277      	movs	r2, #119	; 0x77
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e052      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f000 fa2d 	bl	8004bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	01c9      	lsls	r1, r1, #7
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
      break;
 8004778:	e03e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	001a      	movs	r2, r3
 8004788:	f000 f9a0 	bl	8004acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2150      	movs	r1, #80	; 0x50
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f9fa 	bl	8004b8c <TIM_ITRx_SetConfig>
      break;
 8004798:	e02e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	001a      	movs	r2, r3
 80047a8:	f000 f9be 	bl	8004b28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2160      	movs	r1, #96	; 0x60
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 f9ea 	bl	8004b8c <TIM_ITRx_SetConfig>
      break;
 80047b8:	e01e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	001a      	movs	r2, r3
 80047c8:	f000 f980 	bl	8004acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f9da 	bl	8004b8c <TIM_ITRx_SetConfig>
      break;
 80047d8:	e00e      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0019      	movs	r1, r3
 80047e4:	0010      	movs	r0, r2
 80047e6:	f000 f9d1 	bl	8004b8c <TIM_ITRx_SetConfig>
      break;
 80047ea:	e005      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80047ec:	230f      	movs	r3, #15
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
      break;
 80047f4:	e000      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80047f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2239      	movs	r2, #57	; 0x39
 80047fc:	2101      	movs	r1, #1
 80047fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2238      	movs	r2, #56	; 0x38
 8004804:	2100      	movs	r1, #0
 8004806:	5499      	strb	r1, [r3, r2]

  return status;
 8004808:	230f      	movs	r3, #15
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	781b      	ldrb	r3, [r3, #0]
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b004      	add	sp, #16
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	ffff00ff 	.word	0xffff00ff

0800481c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	05db      	lsls	r3, r3, #23
 8004832:	429a      	cmp	r2, r3
 8004834:	d007      	beq.n	8004846 <TIM_Base_SetConfig+0x2a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <TIM_Base_SetConfig+0x9c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_Base_SetConfig+0x2a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <TIM_Base_SetConfig+0xa0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2270      	movs	r2, #112	; 0x70
 800484a:	4393      	bics	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	05db      	lsls	r3, r3, #23
 800485e:	429a      	cmp	r2, r3
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0x56>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <TIM_Base_SetConfig+0x9c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0x56>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <TIM_Base_SetConfig+0xa0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <TIM_Base_SetConfig+0xa4>)
 8004876:	4013      	ands	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	4393      	bics	r3, r2
 800488a:	001a      	movs	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	615a      	str	r2, [r3, #20]
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40010800 	.word	0x40010800
 80048bc:	40011400 	.word	0x40011400
 80048c0:	fffffcff 	.word	0xfffffcff

080048c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	2201      	movs	r2, #1
 80048d4:	4393      	bics	r3, r2
 80048d6:	001a      	movs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2270      	movs	r2, #112	; 0x70
 80048f2:	4393      	bics	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2203      	movs	r2, #3
 80048fa:	4393      	bics	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2202      	movs	r2, #2
 800490c:	4393      	bics	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	b006      	add	sp, #24
 800493a:	bd80      	pop	{r7, pc}

0800493c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	2210      	movs	r2, #16
 800494c:	4393      	bics	r3, r2
 800494e:	001a      	movs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <TIM_OC2_SetConfig+0x7c>)
 800496a:	4013      	ands	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4a12      	ldr	r2, [pc, #72]	; (80049bc <TIM_OC2_SetConfig+0x80>)
 8004972:	4013      	ands	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2220      	movs	r2, #32
 8004986:	4393      	bics	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	ffff8fff 	.word	0xffff8fff
 80049bc:	fffffcff 	.word	0xfffffcff

080049c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_OC3_SetConfig+0x78>)
 80049d0:	401a      	ands	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2270      	movs	r2, #112	; 0x70
 80049ec:	4393      	bics	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2203      	movs	r2, #3
 80049f4:	4393      	bics	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <TIM_OC3_SetConfig+0x7c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b006      	add	sp, #24
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	fffffeff 	.word	0xfffffeff
 8004a3c:	fffffdff 	.word	0xfffffdff

08004a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <TIM_OC4_SetConfig+0x7c>)
 8004a50:	401a      	ands	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <TIM_OC4_SetConfig+0x80>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <TIM_OC4_SetConfig+0x84>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <TIM_OC4_SetConfig+0x88>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	031b      	lsls	r3, r3, #12
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b006      	add	sp, #24
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	ffffefff 	.word	0xffffefff
 8004ac0:	ffff8fff 	.word	0xffff8fff
 8004ac4:	fffffcff 	.word	0xfffffcff
 8004ac8:	ffffdfff 	.word	0xffffdfff

08004acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4393      	bics	r3, r2
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	22f0      	movs	r2, #240	; 0xf0
 8004af6:	4393      	bics	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	220a      	movs	r2, #10
 8004b08:	4393      	bics	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	621a      	str	r2, [r3, #32]
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b006      	add	sp, #24
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4a0d      	ldr	r2, [pc, #52]	; (8004b88 <TIM_TI2_ConfigInputStage+0x60>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	22a0      	movs	r2, #160	; 0xa0
 8004b64:	4393      	bics	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b006      	add	sp, #24
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	ffff0fff 	.word	0xffff0fff

08004b8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2270      	movs	r2, #112	; 0x70
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	2207      	movs	r2, #7
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <TIM_ETR_SetConfig+0x3c>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	ffff00ff 	.word	0xffff00ff

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2238      	movs	r2, #56	; 0x38
 8004c0e:	5c9b      	ldrb	r3, [r3, r2]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e042      	b.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2238      	movs	r2, #56	; 0x38
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2239      	movs	r2, #57	; 0x39
 8004c24:	2102      	movs	r1, #2
 8004c26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2270      	movs	r2, #112	; 0x70
 8004c3c:	4393      	bics	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	05db      	lsls	r3, r3, #23
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d009      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0f      	ldr	r2, [pc, #60]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10c      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	4393      	bics	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2239      	movs	r2, #57	; 0x39
 8004c90:	2101      	movs	r1, #1
 8004c92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2238      	movs	r2, #56	; 0x38
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b004      	add	sp, #16
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	40010800 	.word	0x40010800
 8004cac:	40011400 	.word	0x40011400

08004cb0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e03f      	b.n	8004d42 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2249      	movs	r2, #73	; 0x49
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2248      	movs	r2, #72	; 0x48
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7fd f8a9 	bl	8001e30 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2249      	movs	r2, #73	; 0x49
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f91d 	bl	8004f38 <USART_SetConfig>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e01c      	b.n	8004d42 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_USART_Init+0x9c>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	212a      	movs	r1, #42	; 0x2a
 8004d24:	438a      	bics	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2101      	movs	r1, #1
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fa54 	bl	80051e8 <USART_CheckIdleState>
 8004d40:	0003      	movs	r3, r0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b002      	add	sp, #8
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	ffffbfff 	.word	0xffffbfff

08004d50 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2249      	movs	r2, #73	; 0x49
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d000      	beq.n	8004d6e <HAL_USART_Transmit+0x1e>
 8004d6c:	e0a9      	b.n	8004ec2 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_USART_Transmit+0x2c>
 8004d74:	1dbb      	adds	r3, r7, #6
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0a1      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d109      	bne.n	8004da0 <HAL_USART_Transmit+0x50>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d001      	beq.n	8004da0 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e091      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2248      	movs	r2, #72	; 0x48
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_USART_Transmit+0x5e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e08a      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2248      	movs	r2, #72	; 0x48
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2249      	movs	r2, #73	; 0x49
 8004dc0:	2112      	movs	r1, #18
 8004dc2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc4:	f7fd f908 	bl	8001fd8 <HAL_GetTick>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1dba      	adds	r2, r7, #6
 8004dd0:	8812      	ldrh	r2, [r2, #0]
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1dba      	adds	r2, r7, #6
 8004dd8:	8812      	ldrh	r2, [r2, #0]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	015b      	lsls	r3, r3, #5
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d108      	bne.n	8004dfa <HAL_USART_Transmit+0xaa>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e003      	b.n	8004e02 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8004e02:	e02a      	b.n	8004e5a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	0013      	movs	r3, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2180      	movs	r1, #128	; 0x80
 8004e12:	f000 f85b 	bl	8004ecc <USART_WaitOnFlagUntilTimeout>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e052      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	001a      	movs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	05d2      	lsls	r2, r2, #23
 8004e30:	0dd2      	lsrs	r2, r2, #23
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3302      	adds	r3, #2
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e007      	b.n	8004e4c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1cf      	bne.n	8004e04 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	0013      	movs	r3, r2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	f000 f82b 	bl	8004ecc <USART_WaitOnFlagUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e022      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2240      	movs	r2, #64	; 0x40
 8004e84:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2108      	movs	r1, #8
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2249      	movs	r2, #73	; 0x49
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2248      	movs	r2, #72	; 0x48
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b008      	add	sp, #32
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004edc:	e017      	b.n	8004f0e <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	d014      	beq.n	8004f0e <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fd f878 	bl	8001fd8 <HAL_GetTick>
 8004ee8:	0002      	movs	r2, r0
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <USART_WaitOnFlagUntilTimeout+0x2e>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2249      	movs	r2, #73	; 0x49
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2248      	movs	r2, #72	; 0x48
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e00f      	b.n	8004f2e <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	425a      	negs	r2, r3
 8004f1e:	4153      	adcs	r3, r2
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	001a      	movs	r2, r3
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d0d8      	beq.n	8004ede <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b004      	add	sp, #16
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004f40:	231e      	movs	r3, #30
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	2280      	movs	r2, #128	; 0x80
 8004f5e:	0212      	lsls	r2, r2, #8
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a97      	ldr	r2, [pc, #604]	; (80051c8 <USART_SetConfig+0x290>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4a88      	ldr	r2, [pc, #544]	; (80051cc <USART_SetConfig+0x294>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a84      	ldr	r2, [pc, #528]	; (80051d0 <USART_SetConfig+0x298>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d127      	bne.n	8005014 <USART_SetConfig+0xdc>
 8004fc4:	4b83      	ldr	r3, [pc, #524]	; (80051d4 <USART_SetConfig+0x29c>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d017      	beq.n	8005000 <USART_SetConfig+0xc8>
 8004fd0:	d81b      	bhi.n	800500a <USART_SetConfig+0xd2>
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d00a      	beq.n	8004fec <USART_SetConfig+0xb4>
 8004fd6:	d818      	bhi.n	800500a <USART_SetConfig+0xd2>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <USART_SetConfig+0xaa>
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d00a      	beq.n	8004ff6 <USART_SetConfig+0xbe>
 8004fe0:	e013      	b.n	800500a <USART_SetConfig+0xd2>
 8004fe2:	231f      	movs	r3, #31
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e044      	b.n	8005076 <USART_SetConfig+0x13e>
 8004fec:	231f      	movs	r3, #31
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e03f      	b.n	8005076 <USART_SetConfig+0x13e>
 8004ff6:	231f      	movs	r3, #31
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e03a      	b.n	8005076 <USART_SetConfig+0x13e>
 8005000:	231f      	movs	r3, #31
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	2208      	movs	r2, #8
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e035      	b.n	8005076 <USART_SetConfig+0x13e>
 800500a:	231f      	movs	r3, #31
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	2210      	movs	r2, #16
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e030      	b.n	8005076 <USART_SetConfig+0x13e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6f      	ldr	r2, [pc, #444]	; (80051d8 <USART_SetConfig+0x2a0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d127      	bne.n	800506e <USART_SetConfig+0x136>
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <USART_SetConfig+0x29c>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	220c      	movs	r2, #12
 8005024:	4013      	ands	r3, r2
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d017      	beq.n	800505a <USART_SetConfig+0x122>
 800502a:	d81b      	bhi.n	8005064 <USART_SetConfig+0x12c>
 800502c:	2b08      	cmp	r3, #8
 800502e:	d00a      	beq.n	8005046 <USART_SetConfig+0x10e>
 8005030:	d818      	bhi.n	8005064 <USART_SetConfig+0x12c>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <USART_SetConfig+0x104>
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00a      	beq.n	8005050 <USART_SetConfig+0x118>
 800503a:	e013      	b.n	8005064 <USART_SetConfig+0x12c>
 800503c:	231f      	movs	r3, #31
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e017      	b.n	8005076 <USART_SetConfig+0x13e>
 8005046:	231f      	movs	r3, #31
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e012      	b.n	8005076 <USART_SetConfig+0x13e>
 8005050:	231f      	movs	r3, #31
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e00d      	b.n	8005076 <USART_SetConfig+0x13e>
 800505a:	231f      	movs	r3, #31
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2208      	movs	r2, #8
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e008      	b.n	8005076 <USART_SetConfig+0x13e>
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2210      	movs	r2, #16
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e003      	b.n	8005076 <USART_SetConfig+0x13e>
 800506e:	231f      	movs	r3, #31
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2210      	movs	r2, #16
 8005074:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8005076:	231f      	movs	r3, #31
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d86d      	bhi.n	800515c <USART_SetConfig+0x224>
 8005080:	009a      	lsls	r2, r3, #2
 8005082:	4b56      	ldr	r3, [pc, #344]	; (80051dc <USART_SetConfig+0x2a4>)
 8005084:	18d3      	adds	r3, r2, r3
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fe fa0b 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 800508e:	0003      	movs	r3, r0
 8005090:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	18d2      	adds	r2, r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	0019      	movs	r1, r3
 80050a4:	0010      	movs	r0, r2
 80050a6:	f7fb f82f 	bl	8000108 <__udivsi3>
 80050aa:	0003      	movs	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]
      break;
 80050ae:	e05a      	b.n	8005166 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fe fa0e 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80050b4:	0003      	movs	r3, r0
 80050b6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	005a      	lsls	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	18d2      	adds	r2, r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	0019      	movs	r1, r3
 80050ca:	0010      	movs	r0, r2
 80050cc:	f7fb f81c 	bl	8000108 <__udivsi3>
 80050d0:	0003      	movs	r3, r0
 80050d2:	61bb      	str	r3, [r7, #24]
      break;
 80050d4:	e047      	b.n	8005166 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d6:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <USART_SetConfig+0x29c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	4013      	ands	r3, r2
 80050de:	d00d      	beq.n	80050fc <USART_SetConfig+0x1c4>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <USART_SetConfig+0x2a8>)
 80050e8:	189a      	adds	r2, r3, r2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	0019      	movs	r1, r3
 80050f0:	0010      	movs	r0, r2
 80050f2:	f7fb f809 	bl	8000108 <__udivsi3>
 80050f6:	0003      	movs	r3, r0
 80050f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 80050fa:	e034      	b.n	8005166 <USART_SetConfig+0x22e>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <USART_SetConfig+0x2ac>)
 8005104:	189a      	adds	r2, r3, r2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	0019      	movs	r1, r3
 800510c:	0010      	movs	r0, r2
 800510e:	f7fa fffb 	bl	8000108 <__udivsi3>
 8005112:	0003      	movs	r3, r0
 8005114:	61bb      	str	r3, [r7, #24]
      break;
 8005116:	e026      	b.n	8005166 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005118:	f7fe f914 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 800511c:	0003      	movs	r3, r0
 800511e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	005a      	lsls	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	18d2      	adds	r2, r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0019      	movs	r1, r3
 8005132:	0010      	movs	r0, r2
 8005134:	f7fa ffe8 	bl	8000108 <__udivsi3>
 8005138:	0003      	movs	r3, r0
 800513a:	61bb      	str	r3, [r7, #24]
      break;
 800513c:	e013      	b.n	8005166 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	0252      	lsls	r2, r2, #9
 8005148:	189a      	adds	r2, r3, r2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	0019      	movs	r1, r3
 8005150:	0010      	movs	r0, r2
 8005152:	f7fa ffd9 	bl	8000108 <__udivsi3>
 8005156:	0003      	movs	r3, r0
 8005158:	61bb      	str	r3, [r7, #24]
      break;
 800515a:	e004      	b.n	8005166 <USART_SetConfig+0x22e>
    default:
      ret = HAL_ERROR;
 800515c:	231e      	movs	r3, #30
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
      break;
 8005164:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d91c      	bls.n	80051a6 <USART_SetConfig+0x26e>
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	025b      	lsls	r3, r3, #9
 8005172:	429a      	cmp	r2, r3
 8005174:	d217      	bcs.n	80051a6 <USART_SetConfig+0x26e>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	b29a      	uxth	r2, r3
 800517a:	200e      	movs	r0, #14
 800517c:	183b      	adds	r3, r7, r0
 800517e:	210f      	movs	r1, #15
 8005180:	438a      	bics	r2, r1
 8005182:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	2207      	movs	r2, #7
 800518c:	4013      	ands	r3, r2
 800518e:	b299      	uxth	r1, r3
 8005190:	183b      	adds	r3, r7, r0
 8005192:	183a      	adds	r2, r7, r0
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	183a      	adds	r2, r7, r0
 80051a0:	8812      	ldrh	r2, [r2, #0]
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	e003      	b.n	80051ae <USART_SetConfig+0x276>
  }
  else
  {
    ret = HAL_ERROR;
 80051a6:	231e      	movs	r3, #30
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80051ba:	231e      	movs	r3, #30
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	781b      	ldrb	r3, [r3, #0]
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b008      	add	sp, #32
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	efff69f3 	.word	0xefff69f3
 80051cc:	ffffc0ff 	.word	0xffffc0ff
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40004400 	.word	0x40004400
 80051dc:	08005324 	.word	0x08005324
 80051e0:	007a1200 	.word	0x007a1200
 80051e4:	01e84800 	.word	0x01e84800

080051e8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f6:	f7fc feef 	bl	8001fd8 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2208      	movs	r2, #8
 8005206:	4013      	ands	r3, r2
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10e      	bne.n	800522a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	0399      	lsls	r1, r3, #14
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	23fa      	movs	r3, #250	; 0xfa
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	0013      	movs	r3, r2
 800521c:	2200      	movs	r2, #0
 800521e:	f7ff fe55 	bl	8004ecc <USART_WaitOnFlagUntilTimeout>
 8005222:	1e03      	subs	r3, r0, #0
 8005224:	d001      	beq.n	800522a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e01e      	b.n	8005268 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2204      	movs	r2, #4
 8005232:	4013      	ands	r3, r2
 8005234:	2b04      	cmp	r3, #4
 8005236:	d10e      	bne.n	8005256 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	03d9      	lsls	r1, r3, #15
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	23fa      	movs	r3, #250	; 0xfa
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	0013      	movs	r3, r2
 8005248:	2200      	movs	r2, #0
 800524a:	f7ff fe3f 	bl	8004ecc <USART_WaitOnFlagUntilTimeout>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d001      	beq.n	8005256 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e008      	b.n	8005268 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2249      	movs	r2, #73	; 0x49
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2248      	movs	r2, #72	; 0x48
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b004      	add	sp, #16
 800526e:	bd80      	pop	{r7, pc}

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	2600      	movs	r6, #0
 8005274:	4d0c      	ldr	r5, [pc, #48]	; (80052a8 <__libc_init_array+0x38>)
 8005276:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005278:	1b64      	subs	r4, r4, r5
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	42a6      	cmp	r6, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	2600      	movs	r6, #0
 8005282:	f000 f821 	bl	80052c8 <_init>
 8005286:	4d0a      	ldr	r5, [pc, #40]	; (80052b0 <__libc_init_array+0x40>)
 8005288:	4c0a      	ldr	r4, [pc, #40]	; (80052b4 <__libc_init_array+0x44>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	42a6      	cmp	r6, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	00b3      	lsls	r3, r6, #2
 8005296:	58eb      	ldr	r3, [r5, r3]
 8005298:	4798      	blx	r3
 800529a:	3601      	adds	r6, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	00b3      	lsls	r3, r6, #2
 80052a0:	58eb      	ldr	r3, [r5, r3]
 80052a2:	4798      	blx	r3
 80052a4:	3601      	adds	r6, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	08005350 	.word	0x08005350
 80052ac:	08005350 	.word	0x08005350
 80052b0:	08005350 	.word	0x08005350
 80052b4:	08005354 	.word	0x08005354

080052b8 <memset>:
 80052b8:	0003      	movs	r3, r0
 80052ba:	1882      	adds	r2, r0, r2
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	7019      	strb	r1, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
