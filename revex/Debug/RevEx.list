
RevEx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e0  080053e0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200000d0  080054b8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080054b8  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f9c  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030da  00000000  00000000  00038094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001514f  00000000  00000000  0003d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167f1  00000000  00000000  000525c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cce9  00000000  00000000  00068db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004194  00000000  00000000  000e5af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005350 	.word	0x08005350

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	08005350 	.word	0x08005350

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 fada 	bl	8000a5c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 fad5 	bl	8000a5c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fadd>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	4646      	mov	r6, r8
 8000620:	46d6      	mov	lr, sl
 8000622:	464f      	mov	r7, r9
 8000624:	024d      	lsls	r5, r1, #9
 8000626:	0242      	lsls	r2, r0, #9
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a52      	lsrs	r2, r2, #9
 800062c:	0a6e      	lsrs	r6, r5, #9
 800062e:	0047      	lsls	r7, r0, #1
 8000630:	46b0      	mov	r8, r6
 8000632:	0e3f      	lsrs	r7, r7, #24
 8000634:	004e      	lsls	r6, r1, #1
 8000636:	0fc4      	lsrs	r4, r0, #31
 8000638:	00d0      	lsls	r0, r2, #3
 800063a:	4694      	mov	ip, r2
 800063c:	003b      	movs	r3, r7
 800063e:	4682      	mov	sl, r0
 8000640:	0e36      	lsrs	r6, r6, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	09ad      	lsrs	r5, r5, #6
 8000646:	428c      	cmp	r4, r1
 8000648:	d06d      	beq.n	8000726 <__aeabi_fadd+0x10a>
 800064a:	1bb8      	subs	r0, r7, r6
 800064c:	4681      	mov	r9, r0
 800064e:	2800      	cmp	r0, #0
 8000650:	dd4d      	ble.n	80006ee <__aeabi_fadd+0xd2>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x3c>
 8000656:	e088      	b.n	800076a <__aeabi_fadd+0x14e>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d05a      	beq.n	8000712 <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	464b      	mov	r3, r9
 8000664:	2201      	movs	r2, #1
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dc0a      	bgt.n	8000680 <__aeabi_fadd+0x64>
 800066a:	002b      	movs	r3, r5
 800066c:	464a      	mov	r2, r9
 800066e:	4649      	mov	r1, r9
 8000670:	40d3      	lsrs	r3, r2
 8000672:	2220      	movs	r2, #32
 8000674:	1a52      	subs	r2, r2, r1
 8000676:	4095      	lsls	r5, r2
 8000678:	002a      	movs	r2, r5
 800067a:	1e55      	subs	r5, r2, #1
 800067c:	41aa      	sbcs	r2, r5
 800067e:	431a      	orrs	r2, r3
 8000680:	4653      	mov	r3, sl
 8000682:	1a9a      	subs	r2, r3, r2
 8000684:	0153      	lsls	r3, r2, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x6e>
 8000688:	e0b9      	b.n	80007fe <__aeabi_fadd+0x1e2>
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	0996      	lsrs	r6, r2, #6
 800068e:	0030      	movs	r0, r6
 8000690:	f000 f9c6 	bl	8000a20 <__clzsi2>
 8000694:	3805      	subs	r0, #5
 8000696:	4086      	lsls	r6, r0
 8000698:	4287      	cmp	r7, r0
 800069a:	dd00      	ble.n	800069e <__aeabi_fadd+0x82>
 800069c:	e0d4      	b.n	8000848 <__aeabi_fadd+0x22c>
 800069e:	0033      	movs	r3, r6
 80006a0:	1bc7      	subs	r7, r0, r7
 80006a2:	2020      	movs	r0, #32
 80006a4:	3701      	adds	r7, #1
 80006a6:	40fb      	lsrs	r3, r7
 80006a8:	1bc7      	subs	r7, r0, r7
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1e56      	subs	r6, r2, #1
 80006b0:	41b2      	sbcs	r2, r6
 80006b2:	2700      	movs	r7, #0
 80006b4:	431a      	orrs	r2, r3
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0xae>
 80006c8:	e09c      	b.n	8000804 <__aeabi_fadd+0x1e8>
 80006ca:	1c7b      	adds	r3, r7, #1
 80006cc:	2ffe      	cmp	r7, #254	; 0xfe
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0xb6>
 80006d0:	e09a      	b.n	8000808 <__aeabi_fadd+0x1ec>
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	0a52      	lsrs	r2, r2, #9
 80006d6:	4694      	mov	ip, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	05d8      	lsls	r0, r3, #23
 80006dc:	4663      	mov	r3, ip
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4320      	orrs	r0, r4
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d049      	beq.n	8000786 <__aeabi_fadd+0x16a>
 80006f2:	1bf3      	subs	r3, r6, r7
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xde>
 80006f8:	e0b6      	b.n	8000868 <__aeabi_fadd+0x24c>
 80006fa:	4652      	mov	r2, sl
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d060      	beq.n	80007c2 <__aeabi_fadd+0x1a6>
 8000700:	3b01      	subs	r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0xec>
 8000706:	e0fc      	b.n	8000902 <__aeabi_fadd+0x2e6>
 8000708:	2eff      	cmp	r6, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xf2>
 800070c:	e0b4      	b.n	8000878 <__aeabi_fadd+0x25c>
 800070e:	000c      	movs	r4, r1
 8000710:	4642      	mov	r2, r8
 8000712:	2a00      	cmp	r2, #0
 8000714:	d078      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 8000716:	2080      	movs	r0, #128	; 0x80
 8000718:	03c0      	lsls	r0, r0, #15
 800071a:	4310      	orrs	r0, r2
 800071c:	0242      	lsls	r2, r0, #9
 800071e:	0a53      	lsrs	r3, r2, #9
 8000720:	469c      	mov	ip, r3
 8000722:	23ff      	movs	r3, #255	; 0xff
 8000724:	e7d9      	b.n	80006da <__aeabi_fadd+0xbe>
 8000726:	1bb9      	subs	r1, r7, r6
 8000728:	2900      	cmp	r1, #0
 800072a:	dd71      	ble.n	8000810 <__aeabi_fadd+0x1f4>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d03f      	beq.n	80007b0 <__aeabi_fadd+0x194>
 8000730:	2fff      	cmp	r7, #255	; 0xff
 8000732:	d0ee      	beq.n	8000712 <__aeabi_fadd+0xf6>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431d      	orrs	r5, r3
 800073a:	2201      	movs	r2, #1
 800073c:	291b      	cmp	r1, #27
 800073e:	dc07      	bgt.n	8000750 <__aeabi_fadd+0x134>
 8000740:	002a      	movs	r2, r5
 8000742:	2320      	movs	r3, #32
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a59      	subs	r1, r3, r1
 8000748:	408d      	lsls	r5, r1
 800074a:	1e6b      	subs	r3, r5, #1
 800074c:	419d      	sbcs	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	4452      	add	r2, sl
 8000752:	0153      	lsls	r3, r2, #5
 8000754:	d553      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 8000756:	3701      	adds	r7, #1
 8000758:	2fff      	cmp	r7, #255	; 0xff
 800075a:	d055      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 800075c:	2301      	movs	r3, #1
 800075e:	497b      	ldr	r1, [pc, #492]	; (800094c <__aeabi_fadd+0x330>)
 8000760:	4013      	ands	r3, r2
 8000762:	0852      	lsrs	r2, r2, #1
 8000764:	400a      	ands	r2, r1
 8000766:	431a      	orrs	r2, r3
 8000768:	e7a5      	b.n	80006b6 <__aeabi_fadd+0x9a>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d02c      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	469c      	mov	ip, r3
 8000774:	44e1      	add	r9, ip
 8000776:	464b      	mov	r3, r9
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x162>
 800077c:	e0ad      	b.n	80008da <__aeabi_fadd+0x2be>
 800077e:	2fff      	cmp	r7, #255	; 0xff
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x168>
 8000782:	e76e      	b.n	8000662 <__aeabi_fadd+0x46>
 8000784:	e7c5      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000786:	20fe      	movs	r0, #254	; 0xfe
 8000788:	1c7e      	adds	r6, r7, #1
 800078a:	4230      	tst	r0, r6
 800078c:	d160      	bne.n	8000850 <__aeabi_fadd+0x234>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fadd+0x178>
 8000792:	e093      	b.n	80008bc <__aeabi_fadd+0x2a0>
 8000794:	4652      	mov	r2, sl
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x180>
 800079a:	e0b6      	b.n	800090a <__aeabi_fadd+0x2ee>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d09c      	beq.n	80006da <__aeabi_fadd+0xbe>
 80007a0:	1b52      	subs	r2, r2, r5
 80007a2:	0150      	lsls	r0, r2, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x18c>
 80007a6:	e0c3      	b.n	8000930 <__aeabi_fadd+0x314>
 80007a8:	4653      	mov	r3, sl
 80007aa:	000c      	movs	r4, r1
 80007ac:	1aea      	subs	r2, r5, r3
 80007ae:	e782      	b.n	80006b6 <__aeabi_fadd+0x9a>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d009      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 80007b4:	3901      	subs	r1, #1
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x1a0>
 80007ba:	e08b      	b.n	80008d4 <__aeabi_fadd+0x2b8>
 80007bc:	2fff      	cmp	r7, #255	; 0xff
 80007be:	d1bc      	bne.n	800073a <__aeabi_fadd+0x11e>
 80007c0:	e7a7      	b.n	8000712 <__aeabi_fadd+0xf6>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	0037      	movs	r7, r6
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d0a2      	beq.n	8000712 <__aeabi_fadd+0xf6>
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	0a53      	lsrs	r3, r2, #9
 80007d0:	469c      	mov	ip, r3
 80007d2:	b2fb      	uxtb	r3, r7
 80007d4:	e781      	b.n	80006da <__aeabi_fadd+0xbe>
 80007d6:	21fe      	movs	r1, #254	; 0xfe
 80007d8:	3701      	adds	r7, #1
 80007da:	4239      	tst	r1, r7
 80007dc:	d165      	bne.n	80008aa <__aeabi_fadd+0x28e>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d17e      	bne.n	80008e0 <__aeabi_fadd+0x2c4>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x1cc>
 80007e6:	e0aa      	b.n	800093e <__aeabi_fadd+0x322>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x1d2>
 80007ec:	e775      	b.n	80006da <__aeabi_fadd+0xbe>
 80007ee:	002a      	movs	r2, r5
 80007f0:	4452      	add	r2, sl
 80007f2:	2700      	movs	r7, #0
 80007f4:	0153      	lsls	r3, r2, #5
 80007f6:	d502      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <__aeabi_fadd+0x334>)
 80007fa:	3701      	adds	r7, #1
 80007fc:	401a      	ands	r2, r3
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x1e8>
 8000802:	e75a      	b.n	80006ba <__aeabi_fadd+0x9e>
 8000804:	08d2      	lsrs	r2, r2, #3
 8000806:	e7df      	b.n	80007c8 <__aeabi_fadd+0x1ac>
 8000808:	2200      	movs	r2, #0
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	4694      	mov	ip, r2
 800080e:	e764      	b.n	80006da <__aeabi_fadd+0xbe>
 8000810:	2900      	cmp	r1, #0
 8000812:	d0e0      	beq.n	80007d6 <__aeabi_fadd+0x1ba>
 8000814:	1bf3      	subs	r3, r6, r7
 8000816:	2f00      	cmp	r7, #0
 8000818:	d03e      	beq.n	8000898 <__aeabi_fadd+0x27c>
 800081a:	2eff      	cmp	r6, #255	; 0xff
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x204>
 800081e:	e777      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0001      	movs	r1, r0
 8000824:	04d2      	lsls	r2, r2, #19
 8000826:	4311      	orrs	r1, r2
 8000828:	468a      	mov	sl, r1
 800082a:	2201      	movs	r2, #1
 800082c:	2b1b      	cmp	r3, #27
 800082e:	dc08      	bgt.n	8000842 <__aeabi_fadd+0x226>
 8000830:	4652      	mov	r2, sl
 8000832:	2120      	movs	r1, #32
 8000834:	4650      	mov	r0, sl
 8000836:	40da      	lsrs	r2, r3
 8000838:	1acb      	subs	r3, r1, r3
 800083a:	4098      	lsls	r0, r3
 800083c:	1e43      	subs	r3, r0, #1
 800083e:	4198      	sbcs	r0, r3
 8000840:	4302      	orrs	r2, r0
 8000842:	0037      	movs	r7, r6
 8000844:	1952      	adds	r2, r2, r5
 8000846:	e784      	b.n	8000752 <__aeabi_fadd+0x136>
 8000848:	4a41      	ldr	r2, [pc, #260]	; (8000950 <__aeabi_fadd+0x334>)
 800084a:	1a3f      	subs	r7, r7, r0
 800084c:	4032      	ands	r2, r6
 800084e:	e732      	b.n	80006b6 <__aeabi_fadd+0x9a>
 8000850:	4653      	mov	r3, sl
 8000852:	1b5e      	subs	r6, r3, r5
 8000854:	0173      	lsls	r3, r6, #5
 8000856:	d42d      	bmi.n	80008b4 <__aeabi_fadd+0x298>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x242>
 800085c:	e717      	b.n	800068e <__aeabi_fadd+0x72>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	2300      	movs	r3, #0
 8000864:	4694      	mov	ip, r2
 8000866:	e738      	b.n	80006da <__aeabi_fadd+0xbe>
 8000868:	2eff      	cmp	r6, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fadd+0x252>
 800086c:	e74f      	b.n	800070e <__aeabi_fadd+0xf2>
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	4650      	mov	r0, sl
 8000872:	04d2      	lsls	r2, r2, #19
 8000874:	4310      	orrs	r0, r2
 8000876:	4682      	mov	sl, r0
 8000878:	2201      	movs	r2, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x274>
 800087e:	4652      	mov	r2, sl
 8000880:	2420      	movs	r4, #32
 8000882:	4650      	mov	r0, sl
 8000884:	40da      	lsrs	r2, r3
 8000886:	1ae3      	subs	r3, r4, r3
 8000888:	4098      	lsls	r0, r3
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4198      	sbcs	r0, r3
 800088e:	4302      	orrs	r2, r0
 8000890:	000c      	movs	r4, r1
 8000892:	0037      	movs	r7, r6
 8000894:	1aaa      	subs	r2, r5, r2
 8000896:	e6f5      	b.n	8000684 <__aeabi_fadd+0x68>
 8000898:	2800      	cmp	r0, #0
 800089a:	d093      	beq.n	80007c4 <__aeabi_fadd+0x1a8>
 800089c:	3b01      	subs	r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d04f      	beq.n	8000942 <__aeabi_fadd+0x326>
 80008a2:	2eff      	cmp	r6, #255	; 0xff
 80008a4:	d1c1      	bne.n	800082a <__aeabi_fadd+0x20e>
 80008a6:	4642      	mov	r2, r8
 80008a8:	e733      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d0ac      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 80008ae:	4455      	add	r5, sl
 80008b0:	086a      	lsrs	r2, r5, #1
 80008b2:	e7a4      	b.n	80007fe <__aeabi_fadd+0x1e2>
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	1aee      	subs	r6, r5, r3
 80008ba:	e6e8      	b.n	800068e <__aeabi_fadd+0x72>
 80008bc:	4653      	mov	r3, sl
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d128      	bne.n	8000914 <__aeabi_fadd+0x2f8>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x2ac>
 80008c6:	e722      	b.n	800070e <__aeabi_fadd+0xf2>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	469c      	mov	ip, r3
 80008ce:	2400      	movs	r4, #0
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	e702      	b.n	80006da <__aeabi_fadd+0xbe>
 80008d4:	002a      	movs	r2, r5
 80008d6:	4452      	add	r2, sl
 80008d8:	e73b      	b.n	8000752 <__aeabi_fadd+0x136>
 80008da:	4653      	mov	r3, sl
 80008dc:	1b5a      	subs	r2, r3, r5
 80008de:	e6d1      	b.n	8000684 <__aeabi_fadd+0x68>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2ca>
 80008e4:	e714      	b.n	8000710 <__aeabi_fadd+0xf4>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2d0>
 80008ea:	e712      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	03db      	lsls	r3, r3, #15
 80008f0:	421a      	tst	r2, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2da>
 80008f4:	e70d      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008f6:	4641      	mov	r1, r8
 80008f8:	4219      	tst	r1, r3
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x2e2>
 80008fc:	e709      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008fe:	4642      	mov	r2, r8
 8000900:	e707      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000902:	000c      	movs	r4, r1
 8000904:	0037      	movs	r7, r6
 8000906:	1aaa      	subs	r2, r5, r2
 8000908:	e6bc      	b.n	8000684 <__aeabi_fadd+0x68>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d013      	beq.n	8000936 <__aeabi_fadd+0x31a>
 800090e:	000c      	movs	r4, r1
 8000910:	46c4      	mov	ip, r8
 8000912:	e6e2      	b.n	80006da <__aeabi_fadd+0xbe>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x2fe>
 8000918:	e6fb      	b.n	8000712 <__aeabi_fadd+0xf6>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	03db      	lsls	r3, r3, #15
 800091e:	421a      	tst	r2, r3
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x308>
 8000922:	e6f6      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000924:	4640      	mov	r0, r8
 8000926:	4218      	tst	r0, r3
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x310>
 800092a:	e6f2      	b.n	8000712 <__aeabi_fadd+0xf6>
 800092c:	000c      	movs	r4, r1
 800092e:	e6ef      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000930:	2a00      	cmp	r2, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x31a>
 8000934:	e763      	b.n	80007fe <__aeabi_fadd+0x1e2>
 8000936:	2200      	movs	r2, #0
 8000938:	2400      	movs	r4, #0
 800093a:	4694      	mov	ip, r2
 800093c:	e6cd      	b.n	80006da <__aeabi_fadd+0xbe>
 800093e:	46c4      	mov	ip, r8
 8000940:	e6cb      	b.n	80006da <__aeabi_fadd+0xbe>
 8000942:	002a      	movs	r2, r5
 8000944:	0037      	movs	r7, r6
 8000946:	4452      	add	r2, sl
 8000948:	e703      	b.n	8000752 <__aeabi_fadd+0x136>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	7dffffff 	.word	0x7dffffff
 8000950:	fbffffff 	.word	0xfbffffff

08000954 <__aeabi_f2iz>:
 8000954:	0241      	lsls	r1, r0, #9
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0fc3      	lsrs	r3, r0, #31
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	2000      	movs	r0, #0
 800095e:	0e12      	lsrs	r2, r2, #24
 8000960:	2a7e      	cmp	r2, #126	; 0x7e
 8000962:	d903      	bls.n	800096c <__aeabi_f2iz+0x18>
 8000964:	2a9d      	cmp	r2, #157	; 0x9d
 8000966:	d902      	bls.n	800096e <__aeabi_f2iz+0x1a>
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <__aeabi_f2iz+0x3c>)
 800096a:	1898      	adds	r0, r3, r2
 800096c:	4770      	bx	lr
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	0400      	lsls	r0, r0, #16
 8000972:	4301      	orrs	r1, r0
 8000974:	2a95      	cmp	r2, #149	; 0x95
 8000976:	dc07      	bgt.n	8000988 <__aeabi_f2iz+0x34>
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	40d1      	lsrs	r1, r2
 800097e:	4248      	negs	r0, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <__aeabi_f2iz+0x18>
 8000984:	0008      	movs	r0, r1
 8000986:	e7f1      	b.n	800096c <__aeabi_f2iz+0x18>
 8000988:	3a96      	subs	r2, #150	; 0x96
 800098a:	4091      	lsls	r1, r2
 800098c:	e7f7      	b.n	800097e <__aeabi_f2iz+0x2a>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	7fffffff 	.word	0x7fffffff

08000994 <__aeabi_i2f>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2800      	cmp	r0, #0
 8000998:	d013      	beq.n	80009c2 <__aeabi_i2f+0x2e>
 800099a:	17c3      	asrs	r3, r0, #31
 800099c:	18c5      	adds	r5, r0, r3
 800099e:	405d      	eors	r5, r3
 80009a0:	0fc4      	lsrs	r4, r0, #31
 80009a2:	0028      	movs	r0, r5
 80009a4:	f000 f83c 	bl	8000a20 <__clzsi2>
 80009a8:	239e      	movs	r3, #158	; 0x9e
 80009aa:	0001      	movs	r1, r0
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2b96      	cmp	r3, #150	; 0x96
 80009b0:	dc0f      	bgt.n	80009d2 <__aeabi_i2f+0x3e>
 80009b2:	2808      	cmp	r0, #8
 80009b4:	dd01      	ble.n	80009ba <__aeabi_i2f+0x26>
 80009b6:	3908      	subs	r1, #8
 80009b8:	408d      	lsls	r5, r1
 80009ba:	026d      	lsls	r5, r5, #9
 80009bc:	0a6d      	lsrs	r5, r5, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e002      	b.n	80009c8 <__aeabi_i2f+0x34>
 80009c2:	2400      	movs	r4, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	2500      	movs	r5, #0
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4328      	orrs	r0, r5
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
 80009d2:	2b99      	cmp	r3, #153	; 0x99
 80009d4:	dd0b      	ble.n	80009ee <__aeabi_i2f+0x5a>
 80009d6:	2205      	movs	r2, #5
 80009d8:	002e      	movs	r6, r5
 80009da:	1a12      	subs	r2, r2, r0
 80009dc:	40d6      	lsrs	r6, r2
 80009de:	0002      	movs	r2, r0
 80009e0:	321b      	adds	r2, #27
 80009e2:	4095      	lsls	r5, r2
 80009e4:	0028      	movs	r0, r5
 80009e6:	1e45      	subs	r5, r0, #1
 80009e8:	41a8      	sbcs	r0, r5
 80009ea:	0035      	movs	r5, r6
 80009ec:	4305      	orrs	r5, r0
 80009ee:	2905      	cmp	r1, #5
 80009f0:	dd01      	ble.n	80009f6 <__aeabi_i2f+0x62>
 80009f2:	1f4a      	subs	r2, r1, #5
 80009f4:	4095      	lsls	r5, r2
 80009f6:	002a      	movs	r2, r5
 80009f8:	4e08      	ldr	r6, [pc, #32]	; (8000a1c <__aeabi_i2f+0x88>)
 80009fa:	4032      	ands	r2, r6
 80009fc:	0768      	lsls	r0, r5, #29
 80009fe:	d009      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a00:	200f      	movs	r0, #15
 8000a02:	4028      	ands	r0, r5
 8000a04:	2804      	cmp	r0, #4
 8000a06:	d005      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a08:	3204      	adds	r2, #4
 8000a0a:	0150      	lsls	r0, r2, #5
 8000a0c:	d502      	bpl.n	8000a14 <__aeabi_i2f+0x80>
 8000a0e:	239f      	movs	r3, #159	; 0x9f
 8000a10:	4032      	ands	r2, r6
 8000a12:	1a5b      	subs	r3, r3, r1
 8000a14:	0192      	lsls	r2, r2, #6
 8000a16:	0a55      	lsrs	r5, r2, #9
 8000a18:	b2d8      	uxtb	r0, r3
 8000a1a:	e7d5      	b.n	80009c8 <__aeabi_i2f+0x34>
 8000a1c:	fbffffff 	.word	0xfbffffff

08000a20 <__clzsi2>:
 8000a20:	211c      	movs	r1, #28
 8000a22:	2301      	movs	r3, #1
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d301      	bcc.n	8000a2e <__clzsi2+0xe>
 8000a2a:	0c00      	lsrs	r0, r0, #16
 8000a2c:	3910      	subs	r1, #16
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	4298      	cmp	r0, r3
 8000a32:	d301      	bcc.n	8000a38 <__clzsi2+0x18>
 8000a34:	0a00      	lsrs	r0, r0, #8
 8000a36:	3908      	subs	r1, #8
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d301      	bcc.n	8000a42 <__clzsi2+0x22>
 8000a3e:	0900      	lsrs	r0, r0, #4
 8000a40:	3904      	subs	r1, #4
 8000a42:	a202      	add	r2, pc, #8	; (adr r2, 8000a4c <__clzsi2+0x2c>)
 8000a44:	5c10      	ldrb	r0, [r2, r0]
 8000a46:	1840      	adds	r0, r0, r1
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	02020304 	.word	0x02020304
 8000a50:	01010101 	.word	0x01010101
	...

08000a5c <__clzdi2>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d103      	bne.n	8000a6a <__clzdi2+0xe>
 8000a62:	f7ff ffdd 	bl	8000a20 <__clzsi2>
 8000a66:	3020      	adds	r0, #32
 8000a68:	e002      	b.n	8000a70 <__clzdi2+0x14>
 8000a6a:	1c08      	adds	r0, r1, #0
 8000a6c:	f7ff ffd8 	bl	8000a20 <__clzsi2>
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <BLE_Init>:
char Characteristic[43] = "PC,12345678901234567890123456789011,12,12\r\n";
char cmd[9] = "SHW,0018,";
char ret[2] = "\n\r";

void BLE_Init()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <BLE_Init+0x104>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fba8 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000a80:	493e      	ldr	r1, [pc, #248]	; (8000b7c <BLE_Init+0x108>)
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <BLE_Init+0x10c>)
 8000a84:	230a      	movs	r3, #10
 8000a86:	2205      	movs	r2, #5
 8000a88:	f003 ff10 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a8c:	23fa      	movs	r3, #250	; 0xfa
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fb9d 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset, 6, 10);
 8000a96:	493b      	ldr	r1, [pc, #236]	; (8000b84 <BLE_Init+0x110>)
 8000a98:	4839      	ldr	r0, [pc, #228]	; (8000b80 <BLE_Init+0x10c>)
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2206      	movs	r2, #6
 8000a9e:	f003 ff05 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000aa2:	23fa      	movs	r3, #250	; 0xfa
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fb92 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset2, 4, 10);
 8000aac:	4936      	ldr	r1, [pc, #216]	; (8000b88 <BLE_Init+0x114>)
 8000aae:	4834      	ldr	r0, [pc, #208]	; (8000b80 <BLE_Init+0x10c>)
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	f003 fefa 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ab8:	23fa      	movs	r3, #250	; 0xfa
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 fb87 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <BLE_Init+0x108>)
 8000ac4:	482e      	ldr	r0, [pc, #184]	; (8000b80 <BLE_Init+0x10c>)
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	2205      	movs	r2, #5
 8000aca:	f003 feef 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000ace:	23fa      	movs	r3, #250	; 0xfa
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fb7c 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config2, 13, 10);
 8000ad8:	492c      	ldr	r1, [pc, #176]	; (8000b8c <BLE_Init+0x118>)
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <BLE_Init+0x10c>)
 8000adc:	230a      	movs	r3, #10
 8000ade:	220d      	movs	r2, #13
 8000ae0:	f003 fee4 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ae4:	23fa      	movs	r3, #250	; 0xfa
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fb71 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config1, 13, 10);
 8000aee:	4928      	ldr	r1, [pc, #160]	; (8000b90 <BLE_Init+0x11c>)
 8000af0:	4823      	ldr	r0, [pc, #140]	; (8000b80 <BLE_Init+0x10c>)
 8000af2:	230a      	movs	r3, #10
 8000af4:	220d      	movs	r2, #13
 8000af6:	f003 fed9 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fb66 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)name, 8, 10);
 8000b04:	4923      	ldr	r1, [pc, #140]	; (8000b94 <BLE_Init+0x120>)
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <BLE_Init+0x10c>)
 8000b08:	230a      	movs	r3, #10
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	f003 fece 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b10:	23fa      	movs	r3, #250	; 0xfa
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fb5b 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000b1a:	4918      	ldr	r1, [pc, #96]	; (8000b7c <BLE_Init+0x108>)
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <BLE_Init+0x10c>)
 8000b1e:	230a      	movs	r3, #10
 8000b20:	2205      	movs	r2, #5
 8000b22:	f003 fec3 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b26:	23fa      	movs	r3, #250	; 0xfa
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 fb50 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Service, 37, 10);
 8000b30:	4919      	ldr	r1, [pc, #100]	; (8000b98 <BLE_Init+0x124>)
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <BLE_Init+0x10c>)
 8000b34:	230a      	movs	r3, #10
 8000b36:	2225      	movs	r2, #37	; 0x25
 8000b38:	f003 feb8 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b3c:	23fa      	movs	r3, #250	; 0xfa
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 fb45 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Characteristic, 43, 10);
 8000b46:	4915      	ldr	r1, [pc, #84]	; (8000b9c <BLE_Init+0x128>)
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <BLE_Init+0x10c>)
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	222b      	movs	r2, #43	; 0x2b
 8000b4e:	f003 fead 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b52:	23fa      	movs	r3, #250	; 0xfa
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fb3a 	bl	80021d0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <BLE_Init+0x108>)
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <BLE_Init+0x10c>)
 8000b60:	230a      	movs	r3, #10
 8000b62:	2205      	movs	r2, #5
 8000b64:	f003 fea2 	bl	80048ac <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b68:	23fa      	movs	r3, #250	; 0xfa
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fb2f 	bl	80021d0 <HAL_Delay>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00001388 	.word	0x00001388
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000224 	.word	0x20000224
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000038 	.word	0x20000038
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000028 	.word	0x20000028
 8000b98:	2000003c 	.word	0x2000003c
 8000b9c:	20000064 	.word	0x20000064

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_I2C1_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <MX_I2C1_Init+0x7c>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fd73 	bl	800270c <HAL_I2C_Init>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2a:	f001 f865 	bl	8001cf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fe00 	bl	8002838 <HAL_I2CEx_ConfigAnalogFilter>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f001 f85c 	bl	8001cf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fe43 	bl	80028d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c4e:	f001 f853 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000100 	.word	0x20000100
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	00303d5b 	.word	0x00303d5b

08000c64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	240c      	movs	r4, #12
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 fb62 	bl	8005340 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_I2C_MspInit+0x7c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d128      	bne.n	8000cd8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2202      	movs	r2, #2
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	22c0      	movs	r2, #192	; 0xc0
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2212      	movs	r2, #18
 8000caa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	0010      	movs	r0, r2
 8000cc6:	f001 fb85 	bl	80023d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	0389      	lsls	r1, r1, #14
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b009      	add	sp, #36	; 0x24
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	50000400 	.word	0x50000400

08000cec <icm20948_gyro_read>:

	return true;
}

void icm20948_gyro_read(axises* data)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000cf4:	2206      	movs	r2, #6
 8000cf6:	2133      	movs	r1, #51	; 0x33
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fd7d 	bl	80017f8 <read_multiple_icm20948_reg>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fe3c 	bl	8000994 <__aeabi_i2f>
 8000d1c:	1c02      	adds	r2, r0, #0
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3302      	adds	r3, #2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3303      	adds	r3, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fe2b 	bl	8000994 <__aeabi_i2f>
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3304      	adds	r3, #4
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3305      	adds	r3, #5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fe1a 	bl	8000994 <__aeabi_i2f>
 8000d60:	1c02      	adds	r2, r0, #0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000d78:	2206      	movs	r2, #6
 8000d7a:	212d      	movs	r1, #45	; 0x2d
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 fd3b 	bl	80017f8 <read_multiple_icm20948_reg>
 8000d82:	0003      	movs	r3, r0
 8000d84:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fdfa 	bl	8000994 <__aeabi_i2f>
 8000da0:	1c02      	adds	r2, r0, #0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3303      	adds	r3, #3
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fde9 	bl	8000994 <__aeabi_i2f>
 8000dc2:	1c02      	adds	r2, r0, #0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3305      	adds	r3, #5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fdd8 	bl	8000994 <__aeabi_i2f>
 8000de4:	1c02      	adds	r2, r0, #0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <icm20948_accel_read+0x94>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1c19      	adds	r1, r3, #0
 8000dec:	1c10      	adds	r0, r2, #0
 8000dee:	f7ff fc15 	bl	800061c <__aeabi_fadd>
 8000df2:	1c03      	adds	r3, r0, #0
 8000df4:	1c1a      	adds	r2, r3, #0
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	609a      	str	r2, [r3, #8]
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200000f0 	.word	0x200000f0

08000e08 <icm20948_who_am_i>:
	return true;
}


bool icm20948_who_am_i()
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000e0e:	1dfc      	adds	r4, r7, #7
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fc90 	bl	8001738 <read_single_icm20948_reg>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2bea      	cmp	r3, #234	; 0xea
 8000e22:	d101      	bne.n	8000e28 <icm20948_who_am_i+0x20>
		return true;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <icm20948_who_am_i+0x22>
	else
		return false;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b003      	add	sp, #12
 8000e30:	bd90      	pop	{r4, r7, pc}

08000e32 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000e32:	b590      	push	{r4, r7, lr}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000e38:	1dfc      	adds	r4, r7, #7
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fd4a 	bl	80018d4 <read_single_ak09916_reg>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d101      	bne.n	8000e50 <ak09916_who_am_i+0x1e>
		return true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <ak09916_who_am_i+0x20>
	else
		return false;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b003      	add	sp, #12
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000e5e:	22c1      	movs	r2, #193	; 0xc1
 8000e60:	2106      	movs	r1, #6
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 fc9a 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000e68:	2064      	movs	r0, #100	; 0x64
 8000e6a:	f001 f9b1 	bl	80021d0 <HAL_Delay>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f000 fd4e 	bl	800191c <write_single_ak09916_reg>
	HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f001 f9a5 	bl	80021d0 <HAL_Delay>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000e92:	1dfc      	adds	r4, r7, #7
 8000e94:	2106      	movs	r1, #6
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fc4e 	bl	8001738 <read_single_icm20948_reg>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2106      	movs	r1, #6
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fc71 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f001 f988 	bl	80021d0 <HAL_Delay>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000ece:	1dfc      	adds	r4, r7, #7
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 fc30 	bl	8001738 <read_single_icm20948_reg>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	2103      	movs	r1, #3
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 fc53 	bl	800179c <write_single_icm20948_reg>
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b003      	add	sp, #12
 8000efc:	bd90      	pop	{r4, r7, pc}

08000efe <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000efe:	b590      	push	{r4, r7, lr}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f04:	1dfc      	adds	r4, r7, #7
 8000f06:	2103      	movs	r1, #3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 fc15 	bl	8001738 <read_single_icm20948_reg>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	1dfa      	adds	r2, r7, #7
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	2102      	movs	r1, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001a      	movs	r2, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 fc38 	bl	800179c <write_single_icm20948_reg>
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b003      	add	sp, #12
 8000f32:	bd90      	pop	{r4, r7, pc}

08000f34 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f3a:	1dfc      	adds	r4, r7, #7
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 fbfa 	bl	8001738 <read_single_icm20948_reg>
 8000f44:	0003      	movs	r3, r0
 8000f46:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	2120      	movs	r1, #32
 8000f50:	430a      	orrs	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fc1d 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f001 f934 	bl	80021d0 <HAL_Delay>
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000f7c:	250f      	movs	r5, #15
 8000f7e:	197c      	adds	r4, r7, r5
 8000f80:	2101      	movs	r1, #1
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	f000 fbd8 	bl	8001738 <read_single_icm20948_reg>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 8000f8c:	0028      	movs	r0, r5
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	1839      	adds	r1, r7, r0
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7809      	ldrb	r1, [r1, #0]
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8000f9c:	183b      	adds	r3, r7, r0
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2030      	movs	r0, #48	; 0x30
 8000fa6:	f000 fbf9 	bl	800179c <write_single_icm20948_reg>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}

08000fb2 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000fb2:	b5b0      	push	{r4, r5, r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	0002      	movs	r2, r0
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000fbe:	250f      	movs	r5, #15
 8000fc0:	197c      	adds	r4, r7, r5
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 fbb7 	bl	8001738 <read_single_icm20948_reg>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8000fce:	0028      	movs	r0, r5
 8000fd0:	183b      	adds	r3, r7, r0
 8000fd2:	1839      	adds	r1, r7, r0
 8000fd4:	1dfa      	adds	r2, r7, #7
 8000fd6:	7809      	ldrb	r1, [r1, #0]
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000fde:	183b      	adds	r3, r7, r0
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	2106      	movs	r1, #6
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fbd8 	bl	800179c <write_single_icm20948_reg>
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}

08000ff4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2109      	movs	r1, #9
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f000 fbcd 	bl	800179c <write_single_icm20948_reg>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001014:	250f      	movs	r5, #15
 8001016:	197c      	adds	r4, r7, r5
 8001018:	2101      	movs	r1, #1
 800101a:	2020      	movs	r0, #32
 800101c:	f000 fb8c 	bl	8001738 <read_single_icm20948_reg>
 8001020:	0003      	movs	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	b25a      	sxtb	r2, r3
 800102c:	197b      	adds	r3, r7, r5
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	197b      	adds	r3, r7, r5
 8001038:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800103a:	197b      	adds	r3, r7, r5
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	2101      	movs	r1, #1
 8001042:	2020      	movs	r0, #32
 8001044:	f000 fbaa 	bl	800179c <write_single_icm20948_reg>
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b004      	add	sp, #16
 800104e:	bdb0      	pop	{r4, r5, r7, pc}

08001050 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800105c:	250f      	movs	r5, #15
 800105e:	197c      	adds	r4, r7, r5
 8001060:	2114      	movs	r1, #20
 8001062:	2020      	movs	r0, #32
 8001064:	f000 fb68 	bl	8001738 <read_single_icm20948_reg>
 8001068:	0003      	movs	r3, r0
 800106a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	b25a      	sxtb	r2, r3
 8001074:	197b      	adds	r3, r7, r5
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b25a      	sxtb	r2, r3
 800107e:	197b      	adds	r3, r7, r5
 8001080:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001082:	197b      	adds	r3, r7, r5
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	2101      	movs	r1, #1
 800108a:	2020      	movs	r0, #32
 800108c:	f000 fb86 	bl	800179c <write_single_icm20948_reg>
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bdb0      	pop	{r4, r5, r7, pc}

08001098 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	2020      	movs	r0, #32
 80010ae:	f000 fb75 	bl	800179c <write_single_icm20948_reg>
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	0002      	movs	r2, r0
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	200f      	movs	r0, #15
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	240e      	movs	r4, #14
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	210f      	movs	r1, #15
 80010e0:	400a      	ands	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	2110      	movs	r1, #16
 80010ec:	2020      	movs	r0, #32
 80010ee:	f000 fb55 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	001a      	movs	r2, r3
 80010f8:	2111      	movs	r1, #17
 80010fa:	2020      	movs	r0, #32
 80010fc:	f000 fb4e 	bl	800179c <write_single_icm20948_reg>
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b005      	add	sp, #20
 8001106:	bd90      	pop	{r4, r7, pc}

08001108 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	0019      	movs	r1, r3
 800111a:	2031      	movs	r0, #49	; 0x31
 800111c:	f000 fbfe 	bl	800191c <write_single_ak09916_reg>
	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f001 f855 	bl	80021d0 <HAL_Delay>
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b08a      	sub	sp, #40	; 0x28
 8001132:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8001134:	230c      	movs	r3, #12
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	0018      	movs	r0, r3
 800113a:	230c      	movs	r3, #12
 800113c:	001a      	movs	r2, r3
 800113e:	2100      	movs	r1, #0
 8001140:	f004 f8fe 	bl	8005340 <memset>
	uint8_t gyro_offset[6] = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e041      	b.n	80011d8 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8001154:	2518      	movs	r5, #24
 8001156:	197b      	adds	r3, r7, r5
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fdc7 	bl	8000cec <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800115e:	240c      	movs	r4, #12
 8001160:	193b      	adds	r3, r7, r4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fc15 	bl	8000994 <__aeabi_i2f>
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	197b      	adds	r3, r7, r5
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1c19      	adds	r1, r3, #0
 8001172:	1c10      	adds	r0, r2, #0
 8001174:	f7ff fa52 	bl	800061c <__aeabi_fadd>
 8001178:	1c03      	adds	r3, r0, #0
 800117a:	1c18      	adds	r0, r3, #0
 800117c:	f7ff fbea 	bl	8000954 <__aeabi_f2iz>
 8001180:	0002      	movs	r2, r0
 8001182:	193b      	adds	r3, r7, r4
 8001184:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff fc02 	bl	8000994 <__aeabi_i2f>
 8001190:	1c02      	adds	r2, r0, #0
 8001192:	197b      	adds	r3, r7, r5
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	1c19      	adds	r1, r3, #0
 8001198:	1c10      	adds	r0, r2, #0
 800119a:	f7ff fa3f 	bl	800061c <__aeabi_fadd>
 800119e:	1c03      	adds	r3, r0, #0
 80011a0:	1c18      	adds	r0, r3, #0
 80011a2:	f7ff fbd7 	bl	8000954 <__aeabi_f2iz>
 80011a6:	0002      	movs	r2, r0
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fbef 	bl	8000994 <__aeabi_i2f>
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	197b      	adds	r3, r7, r5
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	1c19      	adds	r1, r3, #0
 80011be:	1c10      	adds	r0, r2, #0
 80011c0:	f7ff fa2c 	bl	800061c <__aeabi_fadd>
 80011c4:	1c03      	adds	r3, r0, #0
 80011c6:	1c18      	adds	r0, r3, #0
 80011c8:	f7ff fbc4 	bl	8000954 <__aeabi_f2iz>
 80011cc:	0002      	movs	r2, r0
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	ddba      	ble.n	8001154 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 80011de:	240c      	movs	r4, #12
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2164      	movs	r1, #100	; 0x64
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff f818 	bl	800021c <__divsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	001a      	movs	r2, r3
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2164      	movs	r1, #100	; 0x64
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff f80e 	bl	800021c <__divsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	001a      	movs	r2, r3
 8001204:	193b      	adds	r3, r7, r4
 8001206:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8001208:	193b      	adds	r3, r7, r4
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f804 	bl	800021c <__divsi3>
 8001214:	0003      	movs	r3, r0
 8001216:	001a      	movs	r2, r3
 8001218:	193b      	adds	r3, r7, r4
 800121a:	609a      	str	r2, [r3, #8]

	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	425b      	negs	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	da00      	bge.n	8001228 <icm20948_gyro_calibration+0xfa>
 8001226:	3303      	adds	r3, #3
 8001228:	109b      	asrs	r3, r3, #2
 800122a:	121b      	asrs	r3, r3, #8
 800122c:	b2da      	uxtb	r2, r3
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8001232:	230c      	movs	r3, #12
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	425b      	negs	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	da00      	bge.n	8001240 <icm20948_gyro_calibration+0x112>
 800123e:	3303      	adds	r3, #3
 8001240:	109b      	asrs	r3, r3, #2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001248:	230c      	movs	r3, #12
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	425b      	negs	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	da00      	bge.n	8001256 <icm20948_gyro_calibration+0x128>
 8001254:	3303      	adds	r3, #3
 8001256:	109b      	asrs	r3, r3, #2
 8001258:	121b      	asrs	r3, r3, #8
 800125a:	b2da      	uxtb	r2, r3
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001260:	230c      	movs	r3, #12
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	425b      	negs	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	da00      	bge.n	800126e <icm20948_gyro_calibration+0x140>
 800126c:	3303      	adds	r3, #3
 800126e:	109b      	asrs	r3, r3, #2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001276:	230c      	movs	r3, #12
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	425b      	negs	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	da00      	bge.n	8001284 <icm20948_gyro_calibration+0x156>
 8001282:	3303      	adds	r3, #3
 8001284:	109b      	asrs	r3, r3, #2
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	b2da      	uxtb	r2, r3
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800128e:	230c      	movs	r3, #12
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	425b      	negs	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	da00      	bge.n	800129c <icm20948_gyro_calibration+0x16e>
 800129a:	3303      	adds	r3, #3
 800129c:	109b      	asrs	r3, r3, #2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	2306      	movs	r3, #6
 80012a8:	2103      	movs	r1, #3
 80012aa:	2020      	movs	r0, #32
 80012ac:	f000 fade 	bl	800186c <write_multiple_icm20948_reg>
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b00a      	add	sp, #40	; 0x28
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}

080012b8 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80012be:	2318      	movs	r3, #24
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	0018      	movs	r0, r3
 80012c4:	230c      	movs	r3, #12
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f004 f839 	bl	8005340 <memset>
	int32_t accel_bias_reg[3] = {0};
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	230c      	movs	r3, #12
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f004 f831 	bl	8005340 <memset>
	uint8_t accel_offset[6] = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ec:	e041      	b.n	8001372 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 80012ee:	2524      	movs	r5, #36	; 0x24
 80012f0:	197b      	adds	r3, r7, r5
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff fd3c 	bl	8000d70 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80012f8:	2418      	movs	r4, #24
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fb48 	bl	8000994 <__aeabi_i2f>
 8001304:	1c02      	adds	r2, r0, #0
 8001306:	197b      	adds	r3, r7, r5
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1c19      	adds	r1, r3, #0
 800130c:	1c10      	adds	r0, r2, #0
 800130e:	f7ff f985 	bl	800061c <__aeabi_fadd>
 8001312:	1c03      	adds	r3, r0, #0
 8001314:	1c18      	adds	r0, r3, #0
 8001316:	f7ff fb1d 	bl	8000954 <__aeabi_f2iz>
 800131a:	0002      	movs	r2, r0
 800131c:	193b      	adds	r3, r7, r4
 800131e:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fb35 	bl	8000994 <__aeabi_i2f>
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	197b      	adds	r3, r7, r5
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	1c19      	adds	r1, r3, #0
 8001332:	1c10      	adds	r0, r2, #0
 8001334:	f7ff f972 	bl	800061c <__aeabi_fadd>
 8001338:	1c03      	adds	r3, r0, #0
 800133a:	1c18      	adds	r0, r3, #0
 800133c:	f7ff fb0a 	bl	8000954 <__aeabi_f2iz>
 8001340:	0002      	movs	r2, r0
 8001342:	193b      	adds	r3, r7, r4
 8001344:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fb22 	bl	8000994 <__aeabi_i2f>
 8001350:	1c02      	adds	r2, r0, #0
 8001352:	197b      	adds	r3, r7, r5
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	1c19      	adds	r1, r3, #0
 8001358:	1c10      	adds	r0, r2, #0
 800135a:	f7ff f95f 	bl	800061c <__aeabi_fadd>
 800135e:	1c03      	adds	r3, r0, #0
 8001360:	1c18      	adds	r0, r3, #0
 8001362:	f7ff faf7 	bl	8000954 <__aeabi_f2iz>
 8001366:	0002      	movs	r2, r0
 8001368:	193b      	adds	r3, r7, r4
 800136a:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	3301      	adds	r3, #1
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	2b63      	cmp	r3, #99	; 0x63
 8001376:	ddba      	ble.n	80012ee <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8001378:	2418      	movs	r4, #24
 800137a:	193b      	adds	r3, r7, r4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2164      	movs	r1, #100	; 0x64
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe ff4b 	bl	800021c <__divsi3>
 8001386:	0003      	movs	r3, r0
 8001388:	001a      	movs	r2, r3
 800138a:	193b      	adds	r3, r7, r4
 800138c:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ff41 	bl	800021c <__divsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	001a      	movs	r2, r3
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2164      	movs	r1, #100	; 0x64
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7fe ff37 	bl	800021c <__divsi3>
 80013ae:	0003      	movs	r3, r0
 80013b0:	001a      	movs	r2, r3
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80013b6:	003b      	movs	r3, r7
 80013b8:	4a68      	ldr	r2, [pc, #416]	; (800155c <icm20948_accel_calibration+0x2a4>)
 80013ba:	8811      	ldrh	r1, [r2, #0]
 80013bc:	8019      	strh	r1, [r3, #0]
 80013be:	7892      	ldrb	r2, [r2, #2]
 80013c0:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80013c2:	2202      	movs	r2, #2
 80013c4:	2114      	movs	r1, #20
 80013c6:	2010      	movs	r0, #16
 80013c8:	f000 fa16 	bl	80017f8 <read_multiple_icm20948_reg>
 80013cc:	0003      	movs	r3, r0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80013d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013d8:	3201      	adds	r2, #1
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	250c      	movs	r5, #12
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	3301      	adds	r3, #1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	003b      	movs	r3, r7
 80013f2:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80013f4:	2202      	movs	r2, #2
 80013f6:	2117      	movs	r1, #23
 80013f8:	2010      	movs	r0, #16
 80013fa:	f000 f9fd 	bl	80017f8 <read_multiple_icm20948_reg>
 80013fe:	0003      	movs	r3, r0
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800140a:	3201      	adds	r2, #1
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	431a      	orrs	r2, r3
 8001410:	197b      	adds	r3, r7, r5
 8001412:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	3301      	adds	r3, #1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	003b      	movs	r3, r7
 8001422:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001424:	2202      	movs	r2, #2
 8001426:	211a      	movs	r1, #26
 8001428:	2010      	movs	r0, #16
 800142a:	f000 f9e5 	bl	80017f8 <read_multiple_icm20948_reg>
 800142e:	0003      	movs	r3, r0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143a:	3201      	adds	r2, #1
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	431a      	orrs	r2, r3
 8001440:	197b      	adds	r3, r7, r5
 8001442:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	3301      	adds	r3, #1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	003b      	movs	r3, r7
 8001452:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001454:	197b      	adds	r3, r7, r5
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	193b      	adds	r3, r7, r4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <icm20948_accel_calibration+0x1aa>
 8001460:	3307      	adds	r3, #7
 8001462:	10db      	asrs	r3, r3, #3
 8001464:	425b      	negs	r3, r3
 8001466:	18d2      	adds	r2, r2, r3
 8001468:	210c      	movs	r1, #12
 800146a:	187b      	adds	r3, r7, r1
 800146c:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800146e:	187b      	adds	r3, r7, r1
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2318      	movs	r3, #24
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da00      	bge.n	800147e <icm20948_accel_calibration+0x1c6>
 800147c:	3307      	adds	r3, #7
 800147e:	10db      	asrs	r3, r3, #3
 8001480:	425b      	negs	r3, r3
 8001482:	18d2      	adds	r2, r2, r3
 8001484:	210c      	movs	r1, #12
 8001486:	187b      	adds	r3, r7, r1
 8001488:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800148a:	187b      	adds	r3, r7, r1
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	2318      	movs	r3, #24
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <icm20948_accel_calibration+0x1e2>
 8001498:	3307      	adds	r3, #7
 800149a:	10db      	asrs	r3, r3, #3
 800149c:	425b      	negs	r3, r3
 800149e:	18d2      	adds	r2, r2, r3
 80014a0:	210c      	movs	r1, #12
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	121b      	asrs	r3, r3, #8
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	4393      	bics	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	785a      	ldrb	r2, [r3, #1]
 80014c6:	003b      	movs	r3, r7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	121b      	asrs	r3, r3, #8
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	4393      	bics	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	78da      	ldrb	r2, [r3, #3]
 80014f2:	003b      	movs	r3, r7
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	121b      	asrs	r3, r3, #8
 8001504:	b2da      	uxtb	r2, r3
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2201      	movs	r2, #1
 8001512:	4393      	bics	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	795a      	ldrb	r2, [r3, #5]
 800151e:	003b      	movs	r3, r7
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	4313      	orrs	r3, r2
 8001524:	b2da      	uxtb	r2, r3
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800152a:	1d3a      	adds	r2, r7, #4
 800152c:	2302      	movs	r3, #2
 800152e:	2114      	movs	r1, #20
 8001530:	2010      	movs	r0, #16
 8001532:	f000 f99b 	bl	800186c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	1c9a      	adds	r2, r3, #2
 800153a:	2302      	movs	r3, #2
 800153c:	2117      	movs	r1, #23
 800153e:	2010      	movs	r0, #16
 8001540:	f000 f994 	bl	800186c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	1d1a      	adds	r2, r3, #4
 8001548:	2302      	movs	r3, #2
 800154a:	211a      	movs	r1, #26
 800154c:	2010      	movs	r0, #16
 800154e:	f000 f98d 	bl	800186c <write_multiple_icm20948_reg>
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b010      	add	sp, #64	; 0x40
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	08005368 	.word	0x08005368

08001560 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800156c:	230f      	movs	r3, #15
 800156e:	18fc      	adds	r4, r7, r3
 8001570:	2101      	movs	r1, #1
 8001572:	2020      	movs	r0, #32
 8001574:	f000 f8e0 	bl	8001738 <read_single_icm20948_reg>
 8001578:	0003      	movs	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d027      	beq.n	80015d4 <icm20948_gyro_full_scale_select+0x74>
 8001584:	dc31      	bgt.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
 8001586:	2b02      	cmp	r3, #2
 8001588:	d019      	beq.n	80015be <icm20948_gyro_full_scale_select+0x5e>
 800158a:	dc2e      	bgt.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <icm20948_gyro_full_scale_select+0x36>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d009      	beq.n	80015a8 <icm20948_gyro_full_scale_select+0x48>
 8001594:	e029      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8001596:	220f      	movs	r2, #15
 8001598:	18bb      	adds	r3, r7, r2
 800159a:	18ba      	adds	r2, r7, r2
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <icm20948_gyro_full_scale_select+0xa8>)
 80015a4:	601a      	str	r2, [r3, #0]
			break;
 80015a6:	e020      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 80015a8:	220f      	movs	r2, #15
 80015aa:	18bb      	adds	r3, r7, r2
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	2102      	movs	r1, #2
 80015b2:	430a      	orrs	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <icm20948_gyro_full_scale_select+0xac>)
 80015ba:	601a      	str	r2, [r3, #0]
			break;
 80015bc:	e015      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 80015be:	220f      	movs	r2, #15
 80015c0:	18bb      	adds	r3, r7, r2
 80015c2:	18ba      	adds	r2, r7, r2
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <icm20948_gyro_full_scale_select+0xb0>)
 80015d0:	601a      	str	r2, [r3, #0]
			break;
 80015d2:	e00a      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 80015d4:	220f      	movs	r2, #15
 80015d6:	18bb      	adds	r3, r7, r2
 80015d8:	18ba      	adds	r2, r7, r2
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	2106      	movs	r1, #6
 80015de:	430a      	orrs	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <icm20948_gyro_full_scale_select+0xb4>)
 80015e6:	601a      	str	r2, [r3, #0]
			break;
 80015e8:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	001a      	movs	r2, r3
 80015f2:	2101      	movs	r1, #1
 80015f4:	2020      	movs	r0, #32
 80015f6:	f000 f8d1 	bl	800179c <write_single_icm20948_reg>
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b005      	add	sp, #20
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	200000ec 	.word	0x200000ec
 8001608:	43030000 	.word	0x43030000
 800160c:	42830000 	.word	0x42830000
 8001610:	42033333 	.word	0x42033333
 8001614:	41833333 	.word	0x41833333

08001618 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001624:	230f      	movs	r3, #15
 8001626:	18fc      	adds	r4, r7, r3
 8001628:	2114      	movs	r1, #20
 800162a:	2020      	movs	r0, #32
 800162c:	f000 f884 	bl	8001738 <read_single_icm20948_reg>
 8001630:	0003      	movs	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d02a      	beq.n	8001692 <icm20948_accel_full_scale_select+0x7a>
 800163c:	dc35      	bgt.n	80016aa <icm20948_accel_full_scale_select+0x92>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d01b      	beq.n	800167a <icm20948_accel_full_scale_select+0x62>
 8001642:	dc32      	bgt.n	80016aa <icm20948_accel_full_scale_select+0x92>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <icm20948_accel_full_scale_select+0x36>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d00a      	beq.n	8001662 <icm20948_accel_full_scale_select+0x4a>
 800164c:	e02d      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 800164e:	220f      	movs	r2, #15
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	18ba      	adds	r2, r7, r2
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 800165a:	228d      	movs	r2, #141	; 0x8d
 800165c:	05d2      	lsls	r2, r2, #23
 800165e:	601a      	str	r2, [r3, #0]
			break;
 8001660:	e023      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8001662:	220f      	movs	r2, #15
 8001664:	18bb      	adds	r3, r7, r2
 8001666:	18ba      	adds	r2, r7, r2
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	2102      	movs	r1, #2
 800166c:	430a      	orrs	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 8001672:	228c      	movs	r2, #140	; 0x8c
 8001674:	05d2      	lsls	r2, r2, #23
 8001676:	601a      	str	r2, [r3, #0]
			break;
 8001678:	e017      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 800167a:	220f      	movs	r2, #15
 800167c:	18bb      	adds	r3, r7, r2
 800167e:	18ba      	adds	r2, r7, r2
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	2104      	movs	r1, #4
 8001684:	430a      	orrs	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 800168a:	228b      	movs	r2, #139	; 0x8b
 800168c:	05d2      	lsls	r2, r2, #23
 800168e:	601a      	str	r2, [r3, #0]
			break;
 8001690:	e00b      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8001692:	220f      	movs	r2, #15
 8001694:	18bb      	adds	r3, r7, r2
 8001696:	18ba      	adds	r2, r7, r2
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	2106      	movs	r1, #6
 800169c:	430a      	orrs	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 80016a2:	228a      	movs	r2, #138	; 0x8a
 80016a4:	05d2      	lsls	r2, r2, #23
 80016a6:	601a      	str	r2, [r3, #0]
			break;
 80016a8:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 80016aa:	230f      	movs	r3, #15
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	2114      	movs	r1, #20
 80016b4:	2020      	movs	r0, #32
 80016b6:	f000 f871 	bl	800179c <write_single_icm20948_reg>
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b005      	add	sp, #20
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	200000f0 	.word	0x200000f0

080016c8 <cs_high>:


static void cs_high()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	0219      	lsls	r1, r3, #8
 80016d0:	23a0      	movs	r3, #160	; 0xa0
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	2201      	movs	r2, #1
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 fffa 	bl	80026d0 <HAL_GPIO_WritePin>
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <cs_low>:

static void cs_low()
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	0219      	lsls	r1, r3, #8
 80016ea:	23a0      	movs	r3, #160	; 0xa0
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	2200      	movs	r2, #0
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 ffed 	bl	80026d0 <HAL_GPIO_WritePin>
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001708:	240c      	movs	r4, #12
 800170a:	193b      	adds	r3, r7, r4
 800170c:	227f      	movs	r2, #127	; 0x7f
 800170e:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	705a      	strb	r2, [r3, #1]

	cs_low();
 8001718:	f7ff ffe3 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800171c:	1939      	adds	r1, r7, r4
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <select_user_bank+0x38>)
 8001720:	230a      	movs	r3, #10
 8001722:	2202      	movs	r2, #2
 8001724:	f002 f89a 	bl	800385c <HAL_SPI_Transmit>
	cs_high();
 8001728:	f7ff ffce 	bl	80016c8 <cs_high>
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b005      	add	sp, #20
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	2000014c 	.word	0x2000014c

08001738 <read_single_icm20948_reg>:

uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	0002      	movs	r2, r0
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	1c0a      	adds	r2, r1, #0
 8001748:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800174a:	1dbb      	adds	r3, r7, #6
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	4252      	negs	r2, r2
 8001752:	4313      	orrs	r3, r2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	240f      	movs	r4, #15
 8001758:	193b      	adds	r3, r7, r4
 800175a:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffcb 	bl	80016fc <select_user_bank>

	cs_low();
 8001766:	f7ff ffbc 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800176a:	23fa      	movs	r3, #250	; 0xfa
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	1939      	adds	r1, r7, r4
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <read_single_icm20948_reg+0x60>)
 8001772:	2201      	movs	r2, #1
 8001774:	f002 f872 	bl	800385c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001778:	23fa      	movs	r3, #250	; 0xfa
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	240e      	movs	r4, #14
 800177e:	1939      	adds	r1, r7, r4
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <read_single_icm20948_reg+0x60>)
 8001782:	2201      	movs	r2, #1
 8001784:	f002 f9c0 	bl	8003b08 <HAL_SPI_Receive>
	cs_high();
 8001788:	f7ff ff9e 	bl	80016c8 <cs_high>

	return reg_val;
 800178c:	193b      	adds	r3, r7, r4
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b005      	add	sp, #20
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	2000014c 	.word	0x2000014c

0800179c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0004      	movs	r4, r0
 80017a4:	0008      	movs	r0, r1
 80017a6:	0011      	movs	r1, r2
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	1c22      	adds	r2, r4, #0
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	1c02      	adds	r2, r0, #0
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	1d7b      	adds	r3, r7, #5
 80017b6:	1c0a      	adds	r2, r1, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80017ba:	240c      	movs	r4, #12
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	1dba      	adds	r2, r7, #6
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	1d7a      	adds	r2, r7, #5
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff93 	bl	80016fc <select_user_bank>

	cs_low();
 80017d6:	f7ff ff84 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80017da:	23fa      	movs	r3, #250	; 0xfa
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	1939      	adds	r1, r7, r4
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <write_single_icm20948_reg+0x58>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	f002 f83a 	bl	800385c <HAL_SPI_Transmit>
	cs_high();
 80017e8:	f7ff ff6e 	bl	80016c8 <cs_high>
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b005      	add	sp, #20
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	2000014c 	.word	0x2000014c

080017f8 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	0004      	movs	r4, r0
 8001800:	0008      	movs	r0, r1
 8001802:	0011      	movs	r1, r2
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	1c22      	adds	r2, r4, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	1c02      	adds	r2, r0, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	1d7b      	adds	r3, r7, #5
 8001812:	1c0a      	adds	r2, r1, #0
 8001814:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001816:	1dbb      	adds	r3, r7, #6
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	4252      	negs	r2, r2
 800181e:	4313      	orrs	r3, r2
 8001820:	b2da      	uxtb	r2, r3
 8001822:	240f      	movs	r4, #15
 8001824:	193b      	adds	r3, r7, r4
 8001826:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff65 	bl	80016fc <select_user_bank>

	cs_low();
 8001832:	f7ff ff56 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001836:	23fa      	movs	r3, #250	; 0xfa
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	1939      	adds	r1, r7, r4
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <read_multiple_icm20948_reg+0x6c>)
 800183e:	2201      	movs	r2, #1
 8001840:	f002 f80c 	bl	800385c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001844:	1d7b      	adds	r3, r7, #5
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	23fa      	movs	r3, #250	; 0xfa
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4906      	ldr	r1, [pc, #24]	; (8001868 <read_multiple_icm20948_reg+0x70>)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <read_multiple_icm20948_reg+0x6c>)
 8001852:	f002 f959 	bl	8003b08 <HAL_SPI_Receive>
	cs_high();
 8001856:	f7ff ff37 	bl	80016c8 <cs_high>

	return reg_val;
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <read_multiple_icm20948_reg+0x70>)
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b005      	add	sp, #20
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	2000014c 	.word	0x2000014c
 8001868:	200000f4 	.word	0x200000f4

0800186c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	0004      	movs	r4, r0
 8001874:	0008      	movs	r0, r1
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	0019      	movs	r1, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	1c22      	adds	r2, r4, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	1c02      	adds	r2, r0, #0
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	1d7b      	adds	r3, r7, #5
 8001888:	1c0a      	adds	r2, r1, #0
 800188a:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 800188c:	240f      	movs	r4, #15
 800188e:	193b      	adds	r3, r7, r4
 8001890:	1dba      	adds	r2, r7, #6
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff2e 	bl	80016fc <select_user_bank>

	cs_low();
 80018a0:	f7ff ff1f 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80018a4:	23fa      	movs	r3, #250	; 0xfa
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	1939      	adds	r1, r7, r4
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <write_multiple_icm20948_reg+0x64>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	f001 ffd5 	bl	800385c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80018b2:	1d7b      	adds	r3, r7, #5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	23fa      	movs	r3, #250	; 0xfa
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <write_multiple_icm20948_reg+0x64>)
 80018c0:	f001 ffcc 	bl	800385c <HAL_SPI_Transmit>
	cs_high();
 80018c4:	f7ff ff00 	bl	80016c8 <cs_high>
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b005      	add	sp, #20
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	2000014c 	.word	0x2000014c

080018d4 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80018e0:	228c      	movs	r2, #140	; 0x8c
 80018e2:	2103      	movs	r1, #3
 80018e4:	2030      	movs	r0, #48	; 0x30
 80018e6:	f7ff ff59 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	001a      	movs	r2, r3
 80018f0:	2104      	movs	r1, #4
 80018f2:	2030      	movs	r0, #48	; 0x30
 80018f4:	f7ff ff52 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018f8:	2281      	movs	r2, #129	; 0x81
 80018fa:	2105      	movs	r1, #5
 80018fc:	2030      	movs	r0, #48	; 0x30
 80018fe:	f7ff ff4d 	bl	800179c <write_single_icm20948_reg>

	HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fc64 	bl	80021d0 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001908:	213b      	movs	r1, #59	; 0x3b
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff14 	bl	8001738 <read_single_icm20948_reg>
 8001910:	0003      	movs	r3, r0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	1dbb      	adds	r3, r7, #6
 800192a:	1c0a      	adds	r2, r1, #0
 800192c:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800192e:	220c      	movs	r2, #12
 8001930:	2103      	movs	r1, #3
 8001932:	2030      	movs	r0, #48	; 0x30
 8001934:	f7ff ff32 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001938:	4917      	ldr	r1, [pc, #92]	; (8001998 <write_single_ak09916_reg+0x7c>)
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <write_single_ak09916_reg+0x80>)
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	2208      	movs	r2, #8
 8001940:	f002 ffb4 	bl	80048ac <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	001a      	movs	r2, r3
 800194a:	2104      	movs	r1, #4
 800194c:	2030      	movs	r0, #48	; 0x30
 800194e:	f7ff ff25 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001952:	4911      	ldr	r1, [pc, #68]	; (8001998 <write_single_ak09916_reg+0x7c>)
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <write_single_ak09916_reg+0x80>)
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	2208      	movs	r2, #8
 800195a:	f002 ffa7 	bl	80048ac <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 800195e:	1dbb      	adds	r3, r7, #6
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	001a      	movs	r2, r3
 8001964:	2106      	movs	r1, #6
 8001966:	2030      	movs	r0, #48	; 0x30
 8001968:	f7ff ff18 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 800196c:	490a      	ldr	r1, [pc, #40]	; (8001998 <write_single_ak09916_reg+0x7c>)
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <write_single_ak09916_reg+0x80>)
 8001970:	2364      	movs	r3, #100	; 0x64
 8001972:	2208      	movs	r2, #8
 8001974:	f002 ff9a 	bl	80048ac <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001978:	2281      	movs	r2, #129	; 0x81
 800197a:	2105      	movs	r1, #5
 800197c:	2030      	movs	r0, #48	; 0x30
 800197e:	f7ff ff0d 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001982:	4905      	ldr	r1, [pc, #20]	; (8001998 <write_single_ak09916_reg+0x7c>)
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <write_single_ak09916_reg+0x80>)
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2208      	movs	r2, #8
 800198a:	f002 ff8f 	bl	80048ac <HAL_UART_Transmit>
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000090 	.word	0x20000090
 800199c:	20000224 	.word	0x20000224

080019a0 <icm20948_init>:

static void ak09916_init();
static void icm20948_init();

void icm20948_init()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	f7ff fa2f 	bl	8000e08 <icm20948_who_am_i>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	4053      	eors	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f6      	bne.n	80019a6 <icm20948_init+0x6>

	icm20948_device_reset();
 80019b8:	f7ff fa4f 	bl	8000e5a <icm20948_device_reset>
	icm20948_wakeup();
 80019bc:	f7ff fa66 	bl	8000e8c <icm20948_wakeup>

	icm20948_clock_source(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff faf6 	bl	8000fb2 <icm20948_clock_source>
	icm20948_odr_align_enable();
 80019c6:	f7ff fb15 	bl	8000ff4 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 80019ca:	f7ff fa7d 	bl	8000ec8 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fb1a 	bl	8001008 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fb3b 	bl	8001050 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fb5c 	bl	8001098 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fb6a 	bl	80010ba <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 80019e6:	f7ff fba2 	bl	800112e <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 80019ea:	f7ff fc65 	bl	80012b8 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f7ff fdb6 	bl	8001560 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f7ff fe0f 	bl	8001618 <icm20948_accel_full_scale_select>
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ak09916_init>:

void ak09916_init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8001a04:	f7ff fa7b 	bl	8000efe <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8001a08:	f7ff fa94 	bl	8000f34 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8001a0c:	2007      	movs	r0, #7
 8001a0e:	f7ff faaf 	bl	8000f70 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	f7ff fa0d 	bl	8000e32 <ak09916_who_am_i>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4053      	eors	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f6      	bne.n	8001a14 <ak09916_init+0x14>

	ak09916_soft_reset();
 8001a26:	f7ff fa25 	bl	8000e74 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f7ff fb6c 	bl	8001108 <ak09916_operation_mode_setting>
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <IMU_Init>:

void IMU_Init()
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 8001a3a:	f000 f963 	bl	8001d04 <MX_SPI1_Init>
	icm20948_init();
 8001a3e:	f7ff ffaf 	bl	80019a0 <icm20948_init>
	ak09916_init();
 8001a42:	f7ff ffdd 	bl	8001a00 <ak09916_init>
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <initialize_gpioa>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void initialize_gpioa(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	RCC->IOPRSTR |= RCC_IOPRSTR_GPIOARST;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <initialize_gpioa+0x30>)
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <initialize_gpioa+0x30>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]
	RCC->IOPRSTR &= ~RCC_IOPRSTR_GPIOARST;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <initialize_gpioa+0x30>)
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <initialize_gpioa+0x30>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <initialize_gpioa+0x30>)
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <initialize_gpioa+0x30>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	430a      	orrs	r2, r1
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40021000 	.word	0x40021000

08001a80 <initialize_gpiob>:

void initialize_gpiob(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    RCC->IOPRSTR |= RCC_IOPRSTR_GPIOBRST;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <initialize_gpiob+0x30>)
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <initialize_gpiob+0x30>)
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	61da      	str	r2, [r3, #28]
    RCC->IOPRSTR &= ~RCC_IOPRSTR_GPIOBRST;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <initialize_gpiob+0x30>)
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <initialize_gpiob+0x30>)
 8001a96:	2102      	movs	r1, #2
 8001a98:	438a      	bics	r2, r1
 8001a9a:	61da      	str	r2, [r3, #28]
    RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <initialize_gpiob+0x30>)
 8001a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <initialize_gpiob+0x30>)
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <setup_gpio>:

void setup_gpio(GPIO_TypeDef  *GPIOx, int num, enum mode m)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	701a      	strb	r2, [r3, #0]
    if(num > 15)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	dc4f      	bgt.n	8001b68 <setup_gpio+0xb4>
    {
        return;
    }
    //input mode
    if(m == input)
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <setup_gpio+0x32>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	0052      	lsls	r2, r2, #1
 8001ad8:	2103      	movs	r1, #3
 8001ada:	4091      	lsls	r1, r2
 8001adc:	000a      	movs	r2, r1
 8001ade:	43d2      	mvns	r2, r2
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]
    }
    //output mode
    if(m == output)
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d114      	bne.n	8001b18 <setup_gpio+0x64>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	0052      	lsls	r2, r2, #1
 8001af6:	2103      	movs	r1, #3
 8001af8:	4091      	lsls	r1, r2
 8001afa:	000a      	movs	r2, r1
 8001afc:	43d2      	mvns	r2, r2
 8001afe:	401a      	ands	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
    	GPIOx->MODER |= (1<<(2*num));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4091      	lsls	r1, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]
    }
    //alt mode
    if(m == alternate)
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d114      	bne.n	8001b4a <setup_gpio+0x96>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	0052      	lsls	r2, r2, #1
 8001b28:	2103      	movs	r1, #3
 8001b2a:	4091      	lsls	r1, r2
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	43d2      	mvns	r2, r2
 8001b30:	401a      	ands	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	601a      	str	r2, [r3, #0]
    	GPIOx->MODER |= (2<<(2*num));
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	0052      	lsls	r2, r2, #1
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]
    }
    //analog mode
    if(m == analog)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d10b      	bne.n	8001b6a <setup_gpio+0xb6>
    {
    	GPIOx->MODER |= (3<<(2*num));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e000      	b.n	8001b6a <setup_gpio+0xb6>
        return;
 8001b68:	46c0      	nop			; (mov r8, r8)
    }
}
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b004      	add	sp, #16
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <toggle_on>:

void toggle_on(GPIO_TypeDef  *GPIOx, int num)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    GPIOx->ODR |= (1<<num);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4091      	lsls	r1, r2
 8001b84:	000a      	movs	r2, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	615a      	str	r2, [r3, #20]
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <toggle_off>:

void toggle_off(GPIO_TypeDef  *GPIOx, int num)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
    GPIOx->ODR &= ~(1<<num);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4091      	lsls	r1, r2
 8001ba8:	000a      	movs	r2, r1
 8001baa:	43d2      	mvns	r2, r2
 8001bac:	401a      	ands	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	615a      	str	r2, [r3, #20]
}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f000 fa96 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc4:	f000 f82e 	bl	8001c24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialize_gpioa();
 8001bc8:	f7ff ff40 	bl	8001a4c <initialize_gpioa>
  initialize_gpiob();
 8001bcc:	f7ff ff58 	bl	8001a80 <initialize_gpiob>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd0:	f7fe ffe6 	bl	8000ba0 <MX_GPIO_Init>
  //MX_TIM3_Init();
  MX_I2C1_Init();
 8001bd4:	f7ff f806 	bl	8000be4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bd8:	f000 f894 	bl	8001d04 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001bdc:	f000 f9e8 	bl	8001fb0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001be0:	f000 f976 	bl	8001ed0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //ADC_config();
  IMU_Init();
 8001be4:	f7ff ff27 	bl	8001a36 <IMU_Init>
  BLE_Init();
 8001be8:	f7fe ff44 	bl	8000a74 <BLE_Init>
  HAL_Delay(1000);
 8001bec:	23fa      	movs	r3, #250	; 0xfa
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 faed 	bl	80021d0 <HAL_Delay>
  MX_TIM6_Init();
 8001bf6:	f000 f96b 	bl	8001ed0 <MX_TIM6_Init>
  //setup_tim2();
  setup_gpio(GPIOA, 1, output);
 8001bfa:	23a0      	movs	r3, #160	; 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2101      	movs	r1, #1
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff ff56 	bl	8001ab4 <setup_gpio>
  toggle_off(GPIOA, 1);
 8001c08:	23a0      	movs	r3, #160	; 0xa0
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7ff ffc0 	bl	8001b94 <toggle_off>
  HAL_TIM_Base_Start_IT(&htim6);
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <main+0x64>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f002 fbd6 	bl	80043c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <main+0x60>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	200001e4 	.word	0x200001e4

08001c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b09b      	sub	sp, #108	; 0x6c
 8001c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	2434      	movs	r4, #52	; 0x34
 8001c2c:	193b      	adds	r3, r7, r4
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2334      	movs	r3, #52	; 0x34
 8001c32:	001a      	movs	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f003 fb83 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2314      	movs	r3, #20
 8001c42:	001a      	movs	r2, r3
 8001c44:	2100      	movs	r1, #0
 8001c46:	f003 fb7b 	bl	8005340 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	2320      	movs	r3, #32
 8001c50:	001a      	movs	r2, r3
 8001c52:	2100      	movs	r1, #0
 8001c54:	f003 fb74 	bl	8005340 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c5e:	401a      	ands	r2, r3
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	0109      	lsls	r1, r1, #4
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6a:	0021      	movs	r1, r4
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2201      	movs	r2, #1
 8001c76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 fe6e 	bl	8002968 <HAL_RCC_OscConfig>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001c90:	f000 f832 	bl	8001cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	2120      	movs	r1, #32
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	220f      	movs	r2, #15
 8001c9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f001 f9d1 	bl	8003060 <HAL_RCC_ClockConfig>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001cc2:	f000 f819 	bl	8001cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001cc6:	003b      	movs	r3, r7
 8001cc8:	2209      	movs	r2, #9
 8001cca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ccc:	003b      	movs	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cd2:	003b      	movs	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	003b      	movs	r3, r7
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f001 fbe4 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ce4:	f000 f808 	bl	8001cf8 <Error_Handler>
  }
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b01b      	add	sp, #108	; 0x6c
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	ffffe7ff 	.word	0xffffe7ff

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <MX_SPI1_Init+0x78>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d10:	2282      	movs	r2, #130	; 0x82
 8001d12:	0052      	lsls	r2, r2, #1
 8001d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d38:	2218      	movs	r2, #24
 8001d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d56:	0018      	movs	r0, r3
 8001d58:	f001 fcec 	bl	8003734 <HAL_SPI_Init>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d60:	f7ff ffca 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  setup_gpio(GPIOA, 15, output);
 8001d64:	23a0      	movs	r3, #160	; 0xa0
 8001d66:	05db      	lsls	r3, r3, #23
 8001d68:	2201      	movs	r2, #1
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fea1 	bl	8001ab4 <setup_gpio>
  /* USER CODE END SPI1_Init 2 */

}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000014c 	.word	0x2000014c
 8001d7c:	40013000 	.word	0x40013000

08001d80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	240c      	movs	r4, #12
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	2314      	movs	r3, #20
 8001d90:	001a      	movs	r2, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	f003 fad4 	bl	8005340 <memset>
  if(spiHandle->Instance==SPI1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_SPI_MspInit+0x7c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d128      	bne.n	8001df4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_SPI_MspInit+0x80>)
 8001da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_SPI_MspInit+0x80>)
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0149      	lsls	r1, r1, #5
 8001dac:	430a      	orrs	r2, r1
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_SPI_MspInit+0x80>)
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_SPI_MspInit+0x80>)
 8001db6:	2102      	movs	r1, #2
 8001db8:	430a      	orrs	r2, r1
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_SPI_MspInit+0x80>)
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001dc8:	0021      	movs	r1, r4
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2238      	movs	r2, #56	; 0x38
 8001dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2203      	movs	r2, #3
 8001de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_SPI_MspInit+0x84>)
 8001dec:	0019      	movs	r1, r3
 8001dee:	0010      	movs	r0, r2
 8001df0:	f000 faf0 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b009      	add	sp, #36	; 0x24
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	40013000 	.word	0x40013000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	50000400 	.word	0x50000400

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_MspInit+0x24>)
 8001e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_MspInit+0x24>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_MspInit+0x24>)
 8001e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_MspInit+0x24>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0549      	lsls	r1, r1, #21
 8001e22:	430a      	orrs	r2, r1
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f9a0 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
int gate = 0;
void TIM3_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <TIM3_IRQHandler+0x14>)
 8001e66:	0018      	movs	r0, r3
 8001e68:	f002 fb00 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	200001a4 	.word	0x200001a4

08001e78 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	icm20948_who_am_i();
 8001e7c:	f7fe ffc4 	bl	8000e08 <icm20948_who_am_i>
	if(gate == 0)
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <TIM6_IRQHandler+0x44>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <TIM6_IRQHandler+0x24>
	{
		toggle_on(GPIOA, 1);
 8001e88:	23a0      	movs	r3, #160	; 0xa0
 8001e8a:	05db      	lsls	r3, r3, #23
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fe6e 	bl	8001b70 <toggle_on>
		gate = 1;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <TIM6_IRQHandler+0x44>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e008      	b.n	8001eae <TIM6_IRQHandler+0x36>
	}
	else
	{
		toggle_off(GPIOA, 1);
 8001e9c:	23a0      	movs	r3, #160	; 0xa0
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff fe76 	bl	8001b94 <toggle_off>
		gate = 0;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <TIM6_IRQHandler+0x44>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <TIM6_IRQHandler+0x48>)
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f002 fadb 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  /* USER CODE END TIM6_IRQn 1 */
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200000fc 	.word	0x200000fc
 8001ec0:	200001e4 	.word	0x200001e4

08001ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <MX_TIM6_Init>:
  /* USER CODE END TIM3_Init 2 */

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	003b      	movs	r3, r7
 8001ed8:	0018      	movs	r0, r3
 8001eda:	2308      	movs	r3, #8
 8001edc:	001a      	movs	r2, r3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f003 fa2e 	bl	8005340 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <MX_TIM6_Init+0x70>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001eec:	22fa      	movs	r2, #250	; 0xfa
 8001eee:	0192      	lsls	r2, r2, #6
 8001ef0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001efa:	2264      	movs	r2, #100	; 0x64
 8001efc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f002 fa1e 	bl	8004348 <HAL_TIM_Base_Init>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001f10:	f7ff fef2 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	003b      	movs	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f20:	003a      	movs	r2, r7
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_TIM6_Init+0x6c>)
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f002 fc0e 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	1e03      	subs	r3, r0, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001f30:	f7ff fee2 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200001e4 	.word	0x200001e4
 8001f40:	40001000 	.word	0x40001000

08001f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_TIM_Base_MspInit+0x60>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_TIM_Base_MspInit+0x64>)
 8001f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_TIM_Base_MspInit+0x64>)
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2010      	movs	r0, #16
 8001f68:	f000 fa02 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f6c:	2010      	movs	r0, #16
 8001f6e:	f000 fa14 	bl	800239a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f72:	e012      	b.n	8001f9a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_TIM_Base_MspInit+0x68>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10d      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_TIM_Base_MspInit+0x64>)
 8001f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_TIM_Base_MspInit+0x64>)
 8001f84:	2110      	movs	r1, #16
 8001f86:	430a      	orrs	r2, r1
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2011      	movs	r0, #17
 8001f90:	f000 f9ee 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f94:	2011      	movs	r0, #17
 8001f96:	f000 fa00 	bl	800239a <HAL_NVIC_EnableIRQ>
}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40001000 	.word	0x40001000

08001fb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fb6:	4a16      	ldr	r2, [pc, #88]	; (8002010 <MX_USART1_UART_Init+0x60>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fbc:	22e1      	movs	r2, #225	; 0xe1
 8001fbe:	0252      	lsls	r2, r2, #9
 8001fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fdc:	22c0      	movs	r2, #192	; 0xc0
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <MX_USART1_UART_Init+0x5c>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f002 fc04 	bl	8004804 <HAL_UART_Init>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002000:	f7ff fe7a 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000224 	.word	0x20000224
 8002010:	40013800 	.word	0x40013800

08002014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	240c      	movs	r4, #12
 800201e:	193b      	adds	r3, r7, r4
 8002020:	0018      	movs	r0, r3
 8002022:	2314      	movs	r3, #20
 8002024:	001a      	movs	r2, r3
 8002026:	2100      	movs	r1, #0
 8002028:	f003 f98a 	bl	8005340 <memset>
  if(uartHandle->Instance==USART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_UART_MspInit+0x80>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12a      	bne.n	800208c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_UART_MspInit+0x84>)
 8002038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_UART_MspInit+0x84>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	430a      	orrs	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_UART_MspInit+0x84>)
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_UART_MspInit+0x84>)
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_UART_MspInit+0x84>)
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	22f0      	movs	r2, #240	; 0xf0
 8002060:	0152      	lsls	r2, r2, #5
 8002062:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	0021      	movs	r1, r4
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2202      	movs	r2, #2
 800206a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2203      	movs	r2, #3
 8002076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2204      	movs	r2, #4
 800207c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	187a      	adds	r2, r7, r1
 8002080:	23a0      	movs	r3, #160	; 0xa0
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f9a4 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b009      	add	sp, #36	; 0x24
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	40013800 	.word	0x40013800
 8002098:	40021000 	.word	0x40021000

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800209e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a2:	490e      	ldr	r1, [pc, #56]	; (80020dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <LoopForever+0xe>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b8:	4c0b      	ldr	r4, [pc, #44]	; (80020e8 <LoopForever+0x16>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020c6:	f7ff fefd 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f003 f915 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7ff fd75 	bl	8001bbc <main>

080020d2 <LoopForever>:

LoopForever:
    b LoopForever
 80020d2:	e7fe      	b.n	80020d2 <LoopForever>
   ldr   r0, =_estack
 80020d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80020e0:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 80020e4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80020e8:	200002ac 	.word	0x200002ac

080020ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC1_COMP_IRQHandler>
	...

080020f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_Init+0x3c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_Init+0x3c>)
 8002102:	2140      	movs	r1, #64	; 0x40
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f811 	bl	8002130 <HAL_InitTick>
 800210e:	1e03      	subs	r3, r0, #0
 8002110:	d003      	beq.n	800211a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e001      	b.n	800211e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800211a:	f7ff fe75 	bl	8001e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_InitTick+0x5c>)
 800213a:	681c      	ldr	r4, [r3, #0]
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_InitTick+0x60>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	0019      	movs	r1, r3
 8002142:	23fa      	movs	r3, #250	; 0xfa
 8002144:	0098      	lsls	r0, r3, #2
 8002146:	f7fd ffdf 	bl	8000108 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	0019      	movs	r1, r3
 800214e:	0020      	movs	r0, r4
 8002150:	f7fd ffda 	bl	8000108 <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f92f 	bl	80023ba <HAL_SYSTICK_Config>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e00f      	b.n	8002184 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d80b      	bhi.n	8002182 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	2200      	movs	r2, #0
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f8fc 	bl	8002370 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_InitTick+0x64>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b003      	add	sp, #12
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	200000c4 	.word	0x200000c4
 8002190:	200000cc 	.word	0x200000cc
 8002194:	200000c8 	.word	0x200000c8

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_IncTick+0x20>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	18d2      	adds	r2, r2, r3
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_IncTick+0x20>)
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	200000cc 	.word	0x200000cc
 80021b8:	200002a8 	.word	0x200002a8

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_GetTick+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	200002a8 	.word	0x200002a8

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fff0 	bl	80021bc <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	f7ff ffe0 	bl	80021bc <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	200000cc 	.word	0x200000cc

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	0002      	movs	r2, r0
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b7f      	cmp	r3, #127	; 0x7f
 800222a:	d809      	bhi.n	8002240 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	231f      	movs	r3, #31
 8002234:	401a      	ands	r2, r3
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <__NVIC_EnableIRQ+0x30>)
 8002238:	2101      	movs	r1, #1
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
  }
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	0002      	movs	r2, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b7f      	cmp	r3, #127	; 0x7f
 8002260:	d828      	bhi.n	80022b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002262:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <__NVIC_SetPriority+0xd4>)
 8002264:	1dfb      	adds	r3, r7, #7
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	33c0      	adds	r3, #192	; 0xc0
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	1dfa      	adds	r2, r7, #7
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	0011      	movs	r1, r2
 8002278:	2203      	movs	r2, #3
 800227a:	400a      	ands	r2, r1
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	21ff      	movs	r1, #255	; 0xff
 8002280:	4091      	lsls	r1, r2
 8002282:	000a      	movs	r2, r1
 8002284:	43d2      	mvns	r2, r2
 8002286:	401a      	ands	r2, r3
 8002288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	22ff      	movs	r2, #255	; 0xff
 8002290:	401a      	ands	r2, r3
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	0018      	movs	r0, r3
 8002298:	2303      	movs	r3, #3
 800229a:	4003      	ands	r3, r0
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	481f      	ldr	r0, [pc, #124]	; (8002320 <__NVIC_SetPriority+0xd4>)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	430a      	orrs	r2, r1
 80022ac:	33c0      	adds	r3, #192	; 0xc0
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022b2:	e031      	b.n	8002318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <__NVIC_SetPriority+0xd8>)
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	0019      	movs	r1, r3
 80022bc:	230f      	movs	r3, #15
 80022be:	400b      	ands	r3, r1
 80022c0:	3b08      	subs	r3, #8
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3306      	adds	r3, #6
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	3304      	adds	r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1dfa      	adds	r2, r7, #7
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	0011      	movs	r1, r2
 80022d4:	2203      	movs	r2, #3
 80022d6:	400a      	ands	r2, r1
 80022d8:	00d2      	lsls	r2, r2, #3
 80022da:	21ff      	movs	r1, #255	; 0xff
 80022dc:	4091      	lsls	r1, r2
 80022de:	000a      	movs	r2, r1
 80022e0:	43d2      	mvns	r2, r2
 80022e2:	401a      	ands	r2, r3
 80022e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	22ff      	movs	r2, #255	; 0xff
 80022ec:	401a      	ands	r2, r3
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	0018      	movs	r0, r3
 80022f4:	2303      	movs	r3, #3
 80022f6:	4003      	ands	r3, r0
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <__NVIC_SetPriority+0xd8>)
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	001c      	movs	r4, r3
 8002304:	230f      	movs	r3, #15
 8002306:	4023      	ands	r3, r4
 8002308:	3b08      	subs	r3, #8
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	430a      	orrs	r2, r1
 800230e:	3306      	adds	r3, #6
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	18c3      	adds	r3, r0, r3
 8002314:	3304      	adds	r3, #4
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b003      	add	sp, #12
 800231e:	bd90      	pop	{r4, r7, pc}
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	045b      	lsls	r3, r3, #17
 8002338:	429a      	cmp	r2, r3
 800233a:	d301      	bcc.n	8002340 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233c:	2301      	movs	r3, #1
 800233e:	e010      	b.n	8002362 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <SysTick_Config+0x44>)
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	3a01      	subs	r2, #1
 8002346:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002348:	2301      	movs	r3, #1
 800234a:	425b      	negs	r3, r3
 800234c:	2103      	movs	r1, #3
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff ff7c 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SysTick_Config+0x44>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <SysTick_Config+0x44>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	210f      	movs	r1, #15
 800237c:	187b      	adds	r3, r7, r1
 800237e:	1c02      	adds	r2, r0, #0
 8002380:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	187b      	adds	r3, r7, r1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	0002      	movs	r2, r0
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff ff33 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ffaf 	bl	8002328 <SysTick_Config>
 80023ca:	0003      	movs	r3, r0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023ea:	e155      	b.n	8002698 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4091      	lsls	r1, r2
 80023f6:	000a      	movs	r2, r1
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d100      	bne.n	8002404 <HAL_GPIO_Init+0x30>
 8002402:	e146      	b.n	8002692 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	4013      	ands	r3, r2
 800240c:	2b01      	cmp	r3, #1
 800240e:	d005      	beq.n	800241c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002418:	2b02      	cmp	r3, #2
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	409a      	lsls	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	0013      	movs	r3, r2
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	2201      	movs	r2, #1
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2203      	movs	r2, #3
 8002484:	4013      	ands	r3, r2
 8002486:	2b03      	cmp	r3, #3
 8002488:	d017      	beq.n	80024ba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	409a      	lsls	r2, r3
 8002498:	0013      	movs	r3, r2
 800249a:	43da      	mvns	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2203      	movs	r2, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	58d3      	ldr	r3, [r2, r3]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2207      	movs	r2, #7
 80024d8:	4013      	ands	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	409a      	lsls	r2, r3
 80024e0:	0013      	movs	r3, r2
 80024e2:	43da      	mvns	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2107      	movs	r1, #7
 80024f2:	400b      	ands	r3, r1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	6939      	ldr	r1, [r7, #16]
 800250c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2203      	movs	r2, #3
 800252c:	401a      	ands	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	23c0      	movs	r3, #192	; 0xc0
 8002548:	029b      	lsls	r3, r3, #10
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_GPIO_Init+0x17c>
 800254e:	e0a0      	b.n	8002692 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_GPIO_Init+0x2dc>)
 8002552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x2dc>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800255c:	4a55      	ldr	r2, [pc, #340]	; (80026b4 <HAL_GPIO_Init+0x2e0>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	589b      	ldr	r3, [r3, r2]
 8002568:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2203      	movs	r2, #3
 800256e:	4013      	ands	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	409a      	lsls	r2, r3
 8002576:	0013      	movs	r3, r2
 8002578:	43da      	mvns	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	23a0      	movs	r3, #160	; 0xa0
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	429a      	cmp	r2, r3
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x1f6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x2e4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x1f2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_GPIO_Init+0x2e8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x1ee>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x2ec>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x1ea>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a47      	ldr	r2, [pc, #284]	; (80026c4 <HAL_GPIO_Init+0x2f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x1e6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a46      	ldr	r2, [pc, #280]	; (80026c8 <HAL_GPIO_Init+0x2f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x1e2>
 80025b2:	2305      	movs	r3, #5
 80025b4:	e00a      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025ca:	2300      	movs	r3, #0
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	2103      	movs	r1, #3
 80025d0:	400a      	ands	r2, r1
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x2e0>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43da      	mvns	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	4013      	ands	r3, r2
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	43da      	mvns	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43da      	mvns	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	035b      	lsls	r3, r3, #13
 8002656:	4013      	ands	r3, r2
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43da      	mvns	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	039b      	lsls	r3, r3, #14
 8002680:	4013      	ands	r3, r2
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	40da      	lsrs	r2, r3
 80026a0:	1e13      	subs	r3, r2, #0
 80026a2:	d000      	beq.n	80026a6 <HAL_GPIO_Init+0x2d2>
 80026a4:	e6a2      	b.n	80023ec <HAL_GPIO_Init+0x18>
  }
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010000 	.word	0x40010000
 80026b8:	50000400 	.word	0x50000400
 80026bc:	50000800 	.word	0x50000800
 80026c0:	50000c00 	.word	0x50000c00
 80026c4:	50001000 	.word	0x50001000
 80026c8:	50001c00 	.word	0x50001c00
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	1cbb      	adds	r3, r7, #2
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	1c7b      	adds	r3, r7, #1
 80026e4:	1c0a      	adds	r2, r1, #0
 80026e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e8:	1c7b      	adds	r3, r7, #1
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f0:	1cbb      	adds	r3, r7, #2
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80026f8:	e003      	b.n	8002702 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e082      	b.n	8002824 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	; 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	2100      	movs	r1, #0
 8002730:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7fe fa95 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2241      	movs	r2, #65	; 0x41
 800273e:	2124      	movs	r1, #36	; 0x24
 8002740:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4934      	ldr	r1, [pc, #208]	; (800282c <HAL_I2C_Init+0x120>)
 800275c:	400a      	ands	r2, r1
 800275e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4931      	ldr	r1, [pc, #196]	; (8002830 <HAL_I2C_Init+0x124>)
 800276c:	400a      	ands	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0209      	lsls	r1, r1, #8
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e007      	b.n	800279a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2184      	movs	r1, #132	; 0x84
 8002794:	0209      	lsls	r1, r1, #8
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d104      	bne.n	80027ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	491f      	ldr	r1, [pc, #124]	; (8002834 <HAL_I2C_Init+0x128>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	491a      	ldr	r1, [pc, #104]	; (8002830 <HAL_I2C_Init+0x124>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69d9      	ldr	r1, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1a      	ldr	r2, [r3, #32]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2241      	movs	r2, #65	; 0x41
 8002810:	2120      	movs	r1, #32
 8002812:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2242      	movs	r2, #66	; 0x42
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}
 800282c:	f0ffffff 	.word	0xf0ffffff
 8002830:	ffff7fff 	.word	0xffff7fff
 8002834:	02008000 	.word	0x02008000

08002838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2241      	movs	r2, #65	; 0x41
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d138      	bne.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2240      	movs	r2, #64	; 0x40
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002858:	2302      	movs	r3, #2
 800285a:	e032      	b.n	80028c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2241      	movs	r2, #65	; 0x41
 8002868:	2124      	movs	r1, #36	; 0x24
 800286a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4911      	ldr	r1, [pc, #68]	; (80028cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2101      	movs	r1, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	2120      	movs	r1, #32
 80028b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	ffffefff 	.word	0xffffefff

080028d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2241      	movs	r2, #65	; 0x41
 80028de:	5c9b      	ldrb	r3, [r3, r2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d139      	bne.n	800295a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e033      	b.n	800295c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2240      	movs	r2, #64	; 0x40
 80028f8:	2101      	movs	r1, #1
 80028fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2241      	movs	r2, #65	; 0x41
 8002900:	2124      	movs	r1, #36	; 0x24
 8002902:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	438a      	bics	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2241      	movs	r2, #65	; 0x41
 800294a:	2120      	movs	r1, #32
 800294c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
  }
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	fffff0ff 	.word	0xfffff0ff

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f000 fb6c 	bl	8003054 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297c:	4bc8      	ldr	r3, [pc, #800]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	220c      	movs	r2, #12
 8002982:	4013      	ands	r3, r2
 8002984:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002986:	4bc6      	ldr	r3, [pc, #792]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	025b      	lsls	r3, r3, #9
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCC_OscConfig+0x36>
 800299c:	e07d      	b.n	8002a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d007      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x68>
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4bba      	ldr	r3, [pc, #744]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	d100      	bne.n	80029c2 <HAL_RCC_OscConfig+0x5a>
 80029c0:	e06a      	b.n	8002a98 <HAL_RCC_OscConfig+0x130>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d166      	bne.n	8002a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f000 fb42 	bl	8003054 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x84>
 80029dc:	4bb0      	ldr	r3, [pc, #704]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4baf      	ldr	r3, [pc, #700]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0249      	lsls	r1, r1, #9
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e027      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	23a0      	movs	r3, #160	; 0xa0
 80029f2:	02db      	lsls	r3, r3, #11
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCC_OscConfig+0xae>
 80029f8:	4ba9      	ldr	r3, [pc, #676]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4ba8      	ldr	r3, [pc, #672]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	02c9      	lsls	r1, r1, #11
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	4ba6      	ldr	r3, [pc, #664]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4ba5      	ldr	r3, [pc, #660]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0249      	lsls	r1, r1, #9
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e012      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a16:	4ba2      	ldr	r3, [pc, #648]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4ba1      	ldr	r3, [pc, #644]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	49a1      	ldr	r1, [pc, #644]	; (8002ca4 <HAL_RCC_OscConfig+0x33c>)
 8002a1e:	400a      	ands	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	4b9f      	ldr	r3, [pc, #636]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	025b      	lsls	r3, r3, #9
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4b9b      	ldr	r3, [pc, #620]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b9a      	ldr	r3, [pc, #616]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a36:	499c      	ldr	r1, [pc, #624]	; (8002ca8 <HAL_RCC_OscConfig+0x340>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fbba 	bl	80021bc <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4e:	f7ff fbb5 	bl	80021bc <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e2f9      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a60:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0xe6>
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fba5 	bl	80021bc <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fba0 	bl	80021bc <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e2e4      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8a:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x110>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x13e>
 8002aa4:	e099      	b.n	8002bda <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ab4:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002aba:	2120      	movs	r1, #32
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d13e      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1ea>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d13b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ada:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_RCC_OscConfig+0x186>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e2b2      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x344>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b04:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2209      	movs	r2, #9
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	4b64      	ldr	r3, [pc, #400]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 fbeb 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8002b1a:	0001      	movs	r1, r0
 8002b1c:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	220f      	movs	r2, #15
 8002b24:	4013      	ands	r3, r2
 8002b26:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_RCC_OscConfig+0x348>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	000a      	movs	r2, r1
 8002b2c:	40da      	lsrs	r2, r3
 8002b2e:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_OscConfig+0x34c>)
 8002b30:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCC_OscConfig+0x350>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2513      	movs	r5, #19
 8002b38:	197c      	adds	r4, r7, r5
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff faf8 	bl	8002130 <HAL_InitTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b44:	197b      	adds	r3, r7, r5
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002b4c:	197b      	adds	r3, r7, r5
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	e280      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d027      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b58:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2209      	movs	r2, #9
 8002b5e:	4393      	bics	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fb27 	bl	80021bc <HAL_GetTick>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b74:	f7ff fb22 	bl	80021bc <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e266      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d0f1      	beq.n	8002b74 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_RCC_OscConfig+0x344>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fb02 	bl	80021bc <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff fafd 	bl	80021bc <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e241      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d1f1      	bne.n	8002bbe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	4013      	ands	r3, r2
 8002be2:	d100      	bne.n	8002be6 <HAL_RCC_OscConfig+0x27e>
 8002be4:	e0a1      	b.n	8002d2a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d140      	bne.n	8002c6e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x29c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e227      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_RCC_OscConfig+0x354>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	0a19      	lsrs	r1, r3, #8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	061a      	lsls	r2, r3, #24
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	0b5b      	lsrs	r3, r3, #13
 8002c32:	3301      	adds	r3, #1
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	0212      	lsls	r2, r2, #8
 8002c38:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	210f      	movs	r1, #15
 8002c42:	400b      	ands	r3, r1
 8002c44:	491a      	ldr	r1, [pc, #104]	; (8002cb0 <HAL_RCC_OscConfig+0x348>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCC_OscConfig+0x34c>)
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x350>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2513      	movs	r5, #19
 8002c54:	197c      	adds	r4, r7, r5
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7ff fa6a 	bl	8002130 <HAL_InitTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c60:	197b      	adds	r3, r7, r5
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d060      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002c68:	197b      	adds	r3, r7, r5
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	e1f2      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d03f      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0049      	lsls	r1, r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fa9a 	bl	80021bc <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8e:	f7ff fa95 	bl	80021bc <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d911      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1d9      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	fffeffff 	.word	0xfffeffff
 8002ca8:	fffbffff 	.word	0xfffbffff
 8002cac:	ffffe0ff 	.word	0xffffe0ff
 8002cb0:	0800536c 	.word	0x0800536c
 8002cb4:	200000c4 	.word	0x200000c4
 8002cb8:	200000c8 	.word	0x200000c8
 8002cbc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cc0:	4bc9      	ldr	r3, [pc, #804]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d0e0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ccc:	4bc6      	ldr	r3, [pc, #792]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4ac6      	ldr	r2, [pc, #792]	; (8002fec <HAL_RCC_OscConfig+0x684>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	4bc3      	ldr	r3, [pc, #780]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce0:	4bc1      	ldr	r3, [pc, #772]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	0a19      	lsrs	r1, r3, #8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	061a      	lsls	r2, r3, #24
 8002cee:	4bbe      	ldr	r3, [pc, #760]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	e019      	b.n	8002d2a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cf6:	4bbc      	ldr	r3, [pc, #752]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4bbb      	ldr	r3, [pc, #748]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002cfc:	49bc      	ldr	r1, [pc, #752]	; (8002ff0 <HAL_RCC_OscConfig+0x688>)
 8002cfe:	400a      	ands	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff fa5b 	bl	80021bc <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d0c:	f7ff fa56 	bl	80021bc <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e19a      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d1e:	4bb2      	ldr	r3, [pc, #712]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	4013      	ands	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d019      	beq.n	8002d70 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3c:	4baa      	ldr	r3, [pc, #680]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d40:	4ba9      	ldr	r3, [pc, #676]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	430a      	orrs	r2, r1
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7ff fa38 	bl	80021bc <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7ff fa33 	bl	80021bc <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e177      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d64:	4ba0      	ldr	r3, [pc, #640]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d0f1      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3ea>
 8002d6e:	e018      	b.n	8002da2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b9d      	ldr	r3, [pc, #628]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d74:	4b9c      	ldr	r3, [pc, #624]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7c:	f7ff fa1e 	bl	80021bc <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7ff fa19 	bl	80021bc <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e15d      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d98:	4b93      	ldr	r3, [pc, #588]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d1f1      	bne.n	8002d86 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2204      	movs	r2, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	d100      	bne.n	8002dae <HAL_RCC_OscConfig+0x446>
 8002dac:	e0ae      	b.n	8002f0c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2023      	movs	r0, #35	; 0x23
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	0549      	lsls	r1, r1, #21
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002dd0:	183b      	adds	r3, r7, r0
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <HAL_RCC_OscConfig+0x68c>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d11a      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b84      	ldr	r3, [pc, #528]	; (8002ff4 <HAL_RCC_OscConfig+0x68c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b83      	ldr	r3, [pc, #524]	; (8002ff4 <HAL_RCC_OscConfig+0x68c>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0049      	lsls	r1, r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df0:	f7ff f9e4 	bl	80021bc <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7ff f9df 	bl	80021bc <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e123      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b79      	ldr	r3, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x68c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4cc>
 8002e24:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e28:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0049      	lsls	r1, r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	651a      	str	r2, [r3, #80]	; 0x50
 8002e32:	e031      	b.n	8002e98 <HAL_RCC_OscConfig+0x530>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4ee>
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e42:	496b      	ldr	r1, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x688>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	651a      	str	r2, [r3, #80]	; 0x50
 8002e48:	4b67      	ldr	r3, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e4e:	496a      	ldr	r1, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x690>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	651a      	str	r2, [r3, #80]	; 0x50
 8002e54:	e020      	b.n	8002e98 <HAL_RCC_OscConfig+0x530>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10e      	bne.n	8002e80 <HAL_RCC_OscConfig+0x518>
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e66:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	00c9      	lsls	r1, r1, #3
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0049      	lsls	r1, r1, #1
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0x530>
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e86:	495a      	ldr	r1, [pc, #360]	; (8002ff0 <HAL_RCC_OscConfig+0x688>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e8c:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e90:	4b55      	ldr	r3, [pc, #340]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002e92:	4959      	ldr	r1, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x690>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7ff f98c 	bl	80021bc <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea8:	e009      	b.n	8002ebe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7ff f987 	bl	80021bc <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4a51      	ldr	r2, [pc, #324]	; (8002ffc <HAL_RCC_OscConfig+0x694>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0ca      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d0ef      	beq.n	8002eaa <HAL_RCC_OscConfig+0x542>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7ff f976 	bl	80021bc <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed4:	e009      	b.n	8002eea <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7ff f971 	bl	80021bc <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a46      	ldr	r2, [pc, #280]	; (8002ffc <HAL_RCC_OscConfig+0x694>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0b4      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d1ef      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ef6:	2323      	movs	r3, #35	; 0x23
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f00:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f06:	493e      	ldr	r1, [pc, #248]	; (8003000 <HAL_RCC_OscConfig+0x698>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d100      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5ae>
 8002f14:	e09d      	b.n	8003052 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5b6>
 8002f1c:	e076      	b.n	800300c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d145      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f2c:	4935      	ldr	r1, [pc, #212]	; (8003004 <HAL_RCC_OscConfig+0x69c>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff f943 	bl	80021bc <HAL_GetTick>
 8002f36:	0003      	movs	r3, r0
 8002f38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7ff f93e 	bl	80021bc <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e082      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_RCC_OscConfig+0x6a0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	431a      	orrs	r2, r3
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	0449      	lsls	r1, r1, #17
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f918 	bl	80021bc <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7ff f913 	bl	80021bc <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e057      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	049b      	lsls	r3, r3, #18
 8002fac:	4013      	ands	r3, r2
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x62a>
 8002fb0:	e04f      	b.n	8003052 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002fb8:	4912      	ldr	r1, [pc, #72]	; (8003004 <HAL_RCC_OscConfig+0x69c>)
 8002fba:	400a      	ands	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff f8fd 	bl	80021bc <HAL_GetTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff f8f8 	bl	80021bc <HAL_GetTick>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e03c      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fda:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	049b      	lsls	r3, r3, #18
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x660>
 8002fe6:	e034      	b.n	8003052 <HAL_RCC_OscConfig+0x6ea>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	ffff1fff 	.word	0xffff1fff
 8002ff0:	fffffeff 	.word	0xfffffeff
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	fffffbff 	.word	0xfffffbff
 8002ffc:	00001388 	.word	0x00001388
 8003000:	efffffff 	.word	0xefffffff
 8003004:	feffffff 	.word	0xfeffffff
 8003008:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_RCC_OscConfig+0x6f4>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	025b      	lsls	r3, r3, #9
 8003024:	401a      	ands	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	429a      	cmp	r2, r3
 800302c:	d10f      	bne.n	800304e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	23f0      	movs	r3, #240	; 0xf0
 8003032:	039b      	lsls	r3, r3, #14
 8003034:	401a      	ands	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d107      	bne.n	800304e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	401a      	ands	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b00a      	add	sp, #40	; 0x28
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e128      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b96      	ldr	r3, [pc, #600]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d91e      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b93      	ldr	r3, [pc, #588]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	4393      	bics	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003094:	f7ff f892 	bl	80021bc <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	e009      	b.n	80030b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309e:	f7ff f88d 	bl	80021bc <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e109      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b87      	ldr	r3, [pc, #540]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ca:	4b83      	ldr	r3, [pc, #524]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	22f0      	movs	r2, #240	; 0xf0
 80030d0:	4393      	bics	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_ClockConfig+0x8a>
 80030e8:	e089      	b.n	80031fe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030f2:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	029b      	lsls	r3, r3, #10
 80030fa:	4013      	ands	r3, r2
 80030fc:	d120      	bne.n	8003140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e1      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	049b      	lsls	r3, r3, #18
 8003112:	4013      	ands	r3, r2
 8003114:	d114      	bne.n	8003140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0d5      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
 800312a:	d109      	bne.n	8003140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0ca      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0c2      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003140:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2203      	movs	r2, #3
 8003146:	4393      	bics	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4b62      	ldr	r3, [pc, #392]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7ff f832 	bl	80021bc <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d111      	bne.n	8003188 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003164:	e009      	b.n	800317a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003166:	f7ff f829 	bl	80021bc <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0a5      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	220c      	movs	r2, #12
 8003180:	4013      	ands	r3, r2
 8003182:	2b08      	cmp	r3, #8
 8003184:	d1ef      	bne.n	8003166 <HAL_RCC_ClockConfig+0x106>
 8003186:	e03a      	b.n	80031fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d111      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003190:	e009      	b.n	80031a6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003192:	f7ff f813 	bl	80021bc <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e08f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a6:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	220c      	movs	r2, #12
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d1ef      	bne.n	8003192 <HAL_RCC_ClockConfig+0x132>
 80031b2:	e024      	b.n	80031fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d11b      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031bc:	e009      	b.n	80031d2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031be:	f7fe fffd 	bl	80021bc <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	4a42      	ldr	r2, [pc, #264]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e079      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	220c      	movs	r2, #12
 80031d8:	4013      	ands	r3, r2
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d1ef      	bne.n	80031be <HAL_RCC_ClockConfig+0x15e>
 80031de:	e00e      	b.n	80031fe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe ffec 	bl	80021bc <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e068      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031f4:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	220c      	movs	r2, #12
 80031fa:	4013      	ands	r3, r2
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d21e      	bcs.n	800324a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4393      	bics	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800321e:	f7fe ffcd 	bl	80021bc <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	e009      	b.n	800323c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe ffc8 	bl	80021bc <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e044      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2204      	movs	r2, #4
 8003250:	4013      	ands	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x27c>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003264:	430a      	orrs	r2, r1
 8003266:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	d00a      	beq.n	8003288 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_RCC_ClockConfig+0x280>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00da      	lsls	r2, r3, #3
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003288:	f000 f832 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800328c:	0001      	movs	r1, r0
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x278>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	220f      	movs	r2, #15
 8003296:	4013      	ands	r3, r2
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x284>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	000a      	movs	r2, r1
 800329e:	40da      	lsrs	r2, r3
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_RCC_ClockConfig+0x288>)
 80032a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_ClockConfig+0x28c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	250b      	movs	r5, #11
 80032aa:	197c      	adds	r4, r7, r5
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fe ff3f 	bl	8002130 <HAL_InitTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032b6:	197b      	adds	r3, r7, r5
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032be:	197b      	adds	r3, r7, r5
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40022000 	.word	0x40022000
 80032d4:	00001388 	.word	0x00001388
 80032d8:	40021000 	.word	0x40021000
 80032dc:	fffff8ff 	.word	0xfffff8ff
 80032e0:	ffffc7ff 	.word	0xffffc7ff
 80032e4:	0800536c 	.word	0x0800536c
 80032e8:	200000c4 	.word	0x200000c4
 80032ec:	200000c8 	.word	0x200000c8

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HAL_RCC_GetSysClockFreq+0x138>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	230c      	movs	r3, #12
 8003300:	4013      	ands	r3, r2
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d014      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x40>
 8003306:	d900      	bls.n	800330a <HAL_RCC_GetSysClockFreq+0x1a>
 8003308:	e07b      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x112>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x24>
 800330e:	2b08      	cmp	r3, #8
 8003310:	d00b      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x3a>
 8003312:	e076      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003314:	4b44      	ldr	r3, [pc, #272]	; (8003428 <HAL_RCC_GetSysClockFreq+0x138>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	4013      	ands	r3, r2
 800331c:	d002      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800331e:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003322:	e07c      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <HAL_RCC_GetSysClockFreq+0x140>)
 8003326:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003328:	e079      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800332a:	4b42      	ldr	r3, [pc, #264]	; (8003434 <HAL_RCC_GetSysClockFreq+0x144>)
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800332e:	e076      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	0c9a      	lsrs	r2, r3, #18
 8003334:	230f      	movs	r3, #15
 8003336:	401a      	ands	r2, r3
 8003338:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_GetSysClockFreq+0x148>)
 800333a:	5c9b      	ldrb	r3, [r3, r2]
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	0d9a      	lsrs	r2, r3, #22
 8003342:	2303      	movs	r3, #3
 8003344:	4013      	ands	r3, r2
 8003346:	3301      	adds	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334a:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_RCC_GetSysClockFreq+0x138>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	025b      	lsls	r3, r3, #9
 8003352:	4013      	ands	r3, r2
 8003354:	d01a      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_RCC_GetSysClockFreq+0x144>)
 8003360:	2300      	movs	r3, #0
 8003362:	69b8      	ldr	r0, [r7, #24]
 8003364:	69f9      	ldr	r1, [r7, #28]
 8003366:	f7fd f865 	bl	8000434 <__aeabi_lmul>
 800336a:	0002      	movs	r2, r0
 800336c:	000b      	movs	r3, r1
 800336e:	0010      	movs	r0, r2
 8003370:	0019      	movs	r1, r3
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f7fd f839 	bl	80003f4 <__aeabi_uldivmod>
 8003382:	0002      	movs	r2, r0
 8003384:	000b      	movs	r3, r1
 8003386:	0013      	movs	r3, r2
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
 800338a:	e037      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800338c:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCC_GetSysClockFreq+0x138>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2210      	movs	r2, #16
 8003392:	4013      	ands	r3, r2
 8003394:	d01a      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4a23      	ldr	r2, [pc, #140]	; (800342c <HAL_RCC_GetSysClockFreq+0x13c>)
 80033a0:	2300      	movs	r3, #0
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	f7fd f845 	bl	8000434 <__aeabi_lmul>
 80033aa:	0002      	movs	r2, r0
 80033ac:	000b      	movs	r3, r1
 80033ae:	0010      	movs	r0, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f7fd f819 	bl	80003f4 <__aeabi_uldivmod>
 80033c2:	0002      	movs	r2, r0
 80033c4:	000b      	movs	r3, r1
 80033c6:	0013      	movs	r3, r2
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ca:	e017      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	0018      	movs	r0, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	0019      	movs	r1, r3
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <HAL_RCC_GetSysClockFreq+0x140>)
 80033d6:	2300      	movs	r3, #0
 80033d8:	f7fd f82c 	bl	8000434 <__aeabi_lmul>
 80033dc:	0002      	movs	r2, r0
 80033de:	000b      	movs	r3, r1
 80033e0:	0010      	movs	r0, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	001c      	movs	r4, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	001d      	movs	r5, r3
 80033ec:	0022      	movs	r2, r4
 80033ee:	002b      	movs	r3, r5
 80033f0:	f7fd f800 	bl	80003f4 <__aeabi_uldivmod>
 80033f4:	0002      	movs	r2, r0
 80033f6:	000b      	movs	r3, r1
 80033f8:	0013      	movs	r3, r2
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003400:	e00d      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_GetSysClockFreq+0x138>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	2207      	movs	r2, #7
 800340a:	4013      	ands	r3, r2
 800340c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	3301      	adds	r3, #1
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	0212      	lsls	r2, r2, #8
 8003416:	409a      	lsls	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800341c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b00e      	add	sp, #56	; 0x38
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	003d0900 	.word	0x003d0900
 8003430:	00f42400 	.word	0x00f42400
 8003434:	007a1200 	.word	0x007a1200
 8003438:	08005384 	.word	0x08005384

0800343c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b02      	ldr	r3, [pc, #8]	; (800344c <HAL_RCC_GetHCLKFreq+0x10>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	200000c4 	.word	0x200000c4

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003454:	f7ff fff2 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003458:	0001      	movs	r1, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	2207      	movs	r2, #7
 8003462:	4013      	ands	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	40d9      	lsrs	r1, r3
 800346a:	000b      	movs	r3, r1
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	40021000 	.word	0x40021000
 8003478:	0800537c 	.word	0x0800537c

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003480:	f7ff ffdc 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003484:	0001      	movs	r1, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	0adb      	lsrs	r3, r3, #11
 800348c:	2207      	movs	r2, #7
 800348e:	4013      	ands	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	40d9      	lsrs	r1, r3
 8003496:	000b      	movs	r3, r1
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	40021000 	.word	0x40021000
 80034a4:	0800537c 	.word	0x0800537c

080034a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80034b0:	2017      	movs	r0, #23
 80034b2:	183b      	adds	r3, r7, r0
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2220      	movs	r2, #32
 80034be:	4013      	ands	r3, r2
 80034c0:	d100      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80034c2:	e0c2      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c4:	4b91      	ldr	r3, [pc, #580]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	055b      	lsls	r3, r3, #21
 80034cc:	4013      	ands	r3, r2
 80034ce:	d109      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b8e      	ldr	r3, [pc, #568]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d4:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	0549      	lsls	r1, r1, #21
 80034da:	430a      	orrs	r2, r1
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d11a      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f0:	4b87      	ldr	r3, [pc, #540]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	0049      	lsls	r1, r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fe fe5d 	bl	80021bc <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe fe58 	bl	80021bc <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0f3      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b7d      	ldr	r3, [pc, #500]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d0f0      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003526:	4b79      	ldr	r3, [pc, #484]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	23c0      	movs	r3, #192	; 0xc0
 800352c:	039b      	lsls	r3, r3, #14
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	23c0      	movs	r3, #192	; 0xc0
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	4013      	ands	r3, r2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	d013      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	23c0      	movs	r3, #192	; 0xc0
 8003548:	029b      	lsls	r3, r3, #10
 800354a:	401a      	ands	r2, r3
 800354c:	23c0      	movs	r3, #192	; 0xc0
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	429a      	cmp	r2, r3
 8003552:	d10a      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003554:	4b6d      	ldr	r3, [pc, #436]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	401a      	ands	r2, r3
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	429a      	cmp	r2, r3
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0cb      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800356a:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800356e:	23c0      	movs	r3, #192	; 0xc0
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03b      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	23c0      	movs	r3, #192	; 0xc0
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d033      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2220      	movs	r2, #32
 8003592:	4013      	ands	r3, r2
 8003594:	d02e      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	4a5e      	ldr	r2, [pc, #376]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	0309      	lsls	r1, r1, #12
 80035aa:	430a      	orrs	r2, r1
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ae:	4b57      	ldr	r3, [pc, #348]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b4:	4958      	ldr	r1, [pc, #352]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	d014      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fdf7 	bl	80021bc <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fdf2 	bl	80021bc <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e08c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	23c0      	movs	r3, #192	; 0xc0
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	401a      	ands	r2, r3
 80035fe:	23c0      	movs	r3, #192	; 0xc0
 8003600:	029b      	lsls	r3, r3, #10
 8003602:	429a      	cmp	r2, r3
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	23c0      	movs	r3, #192	; 0xc0
 8003616:	039b      	lsls	r3, r3, #14
 8003618:	401a      	ands	r2, r3
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003622:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	23c0      	movs	r3, #192	; 0xc0
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	401a      	ands	r2, r3
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003630:	430a      	orrs	r2, r1
 8003632:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003634:	2317      	movs	r3, #23
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b33      	ldr	r3, [pc, #204]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003644:	4937      	ldr	r1, [pc, #220]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003646:	400a      	ands	r2, r1
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003658:	2203      	movs	r2, #3
 800365a:	4393      	bics	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003664:	430a      	orrs	r2, r1
 8003666:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	220c      	movs	r2, #12
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003682:	430a      	orrs	r2, r1
 8003684:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2204      	movs	r2, #4
 800368c:	4013      	ands	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	4013      	ands	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036de:	430a      	orrs	r2, r1
 80036e0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	4013      	ands	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	4a0f      	ldr	r2, [pc, #60]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036fc:	430a      	orrs	r2, r1
 80036fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	fffcffff 	.word	0xfffcffff
 8003718:	fff7ffff 	.word	0xfff7ffff
 800371c:	00001388 	.word	0x00001388
 8003720:	ffcfffff 	.word	0xffcfffff
 8003724:	efffffff 	.word	0xefffffff
 8003728:	fffff3ff 	.word	0xfffff3ff
 800372c:	ffffcfff 	.word	0xffffcfff
 8003730:	fff3ffff 	.word	0xfff3ffff

08003734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e083      	b.n	800384e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	2382      	movs	r3, #130	; 0x82
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	429a      	cmp	r2, r3
 8003758:	d009      	beq.n	800376e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	61da      	str	r2, [r3, #28]
 8003760:	e005      	b.n	800376e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2251      	movs	r2, #81	; 0x51
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2250      	movs	r2, #80	; 0x50
 8003784:	2100      	movs	r1, #0
 8003786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0018      	movs	r0, r3
 800378c:	f7fe faf8 	bl	8001d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2251      	movs	r2, #81	; 0x51
 8003794:	2102      	movs	r1, #2
 8003796:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2140      	movs	r1, #64	; 0x40
 80037a4:	438a      	bics	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	2382      	movs	r3, #130	; 0x82
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	2384      	movs	r3, #132	; 0x84
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	400b      	ands	r3, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	400b      	ands	r3, r1
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2102      	movs	r1, #2
 80037d0:	400b      	ands	r3, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2101      	movs	r1, #1
 80037da:	400b      	ands	r3, r1
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	400b      	ands	r3, r1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2138      	movs	r1, #56	; 0x38
 80037f0:	400b      	ands	r3, r1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	400b      	ands	r3, r1
 80037fc:	431a      	orrs	r2, r3
 80037fe:	0011      	movs	r1, r2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	019b      	lsls	r3, r3, #6
 8003808:	401a      	ands	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2210      	movs	r2, #16
 8003824:	401a      	ands	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <HAL_SPI_Init+0x124>)
 800383a:	400a      	ands	r2, r1
 800383c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2251      	movs	r2, #81	; 0x51
 8003848:	2101      	movs	r1, #1
 800384a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fffff7ff 	.word	0xfffff7ff

0800385c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800386c:	231f      	movs	r3, #31
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2250      	movs	r2, #80	; 0x50
 8003878:	5c9b      	ldrb	r3, [r3, r2]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_SPI_Transmit+0x26>
 800387e:	2302      	movs	r3, #2
 8003880:	e13e      	b.n	8003b00 <HAL_SPI_Transmit+0x2a4>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2250      	movs	r2, #80	; 0x50
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800388a:	f7fe fc97 	bl	80021bc <HAL_GetTick>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003892:	2316      	movs	r3, #22
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	1dba      	adds	r2, r7, #6
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2251      	movs	r2, #81	; 0x51
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d004      	beq.n	80038b2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80038a8:	231f      	movs	r3, #31
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80038b0:	e11b      	b.n	8003aea <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_SPI_Transmit+0x64>
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80038c8:	e10f      	b.n	8003aea <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2251      	movs	r2, #81	; 0x51
 80038ce:	2103      	movs	r1, #3
 80038d0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1dba      	adds	r2, r7, #6
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	429a      	cmp	r2, r3
 8003916:	d110      	bne.n	800393a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	01c9      	lsls	r1, r1, #7
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2240      	movs	r2, #64	; 0x40
 8003942:	4013      	ands	r3, r2
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d007      	beq.n	8003958 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2140      	movs	r1, #64	; 0x40
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	429a      	cmp	r2, r3
 8003962:	d14e      	bne.n	8003a02 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_SPI_Transmit+0x11a>
 800396c:	2316      	movs	r3, #22
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d13f      	bne.n	80039f6 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399a:	e02c      	b.n	80039f6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2202      	movs	r2, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d112      	bne.n	80039d0 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ce:	e012      	b.n	80039f6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d0:	f7fe fbf4 	bl	80021bc <HAL_GetTick>
 80039d4:	0002      	movs	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d802      	bhi.n	80039e6 <HAL_SPI_Transmit+0x18a>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Transmit+0x190>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80039ec:	231f      	movs	r3, #31
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2203      	movs	r2, #3
 80039f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80039f4:	e079      	b.n	8003aea <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1cd      	bne.n	800399c <HAL_SPI_Transmit+0x140>
 8003a00:	e04f      	b.n	8003aa2 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <HAL_SPI_Transmit+0x1b8>
 8003a0a:	2316      	movs	r3, #22
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d141      	bne.n	8003a98 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a3a:	e02d      	b.n	8003a98 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2202      	movs	r2, #2
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d113      	bne.n	8003a72 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a70:	e012      	b.n	8003a98 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a72:	f7fe fba3 	bl	80021bc <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d802      	bhi.n	8003a88 <HAL_SPI_Transmit+0x22c>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x232>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003a8e:	231f      	movs	r3, #31
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2203      	movs	r2, #3
 8003a94:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a96:	e028      	b.n	8003aea <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cc      	bne.n	8003a3c <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 fc07 	bl	80042bc <SPI_EndRxTxTransaction>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003ade:	231f      	movs	r3, #31
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e000      	b.n	8003aea <HAL_SPI_Transmit+0x28e>
  }

error:
 8003ae8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2251      	movs	r2, #81	; 0x51
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2250      	movs	r2, #80	; 0x50
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003afa:	231f      	movs	r3, #31
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b008      	add	sp, #32
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	1dbb      	adds	r3, r7, #6
 8003b16:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	2382      	movs	r3, #130	; 0x82
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d113      	bne.n	8003b54 <HAL_SPI_Receive+0x4c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10f      	bne.n	8003b54 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2251      	movs	r2, #81	; 0x51
 8003b38:	2104      	movs	r1, #4
 8003b3a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b3c:	1dbb      	adds	r3, r7, #6
 8003b3e:	881c      	ldrh	r4, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0023      	movs	r3, r4
 8003b4c:	f000 f902 	bl	8003d54 <HAL_SPI_TransmitReceive>
 8003b50:	0003      	movs	r3, r0
 8003b52:	e0f9      	b.n	8003d48 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2250      	movs	r2, #80	; 0x50
 8003b58:	5c9b      	ldrb	r3, [r3, r2]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_SPI_Receive+0x5a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0f2      	b.n	8003d48 <HAL_SPI_Receive+0x240>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2250      	movs	r2, #80	; 0x50
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6a:	f7fe fb27 	bl	80021bc <HAL_GetTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2251      	movs	r2, #81	; 0x51
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d004      	beq.n	8003b88 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003b7e:	2317      	movs	r3, #23
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b86:	e0d4      	b.n	8003d32 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_SPI_Receive+0x8e>
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003b96:	2317      	movs	r3, #23
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b9e:	e0c8      	b.n	8003d32 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2251      	movs	r2, #81	; 0x51
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1dba      	adds	r2, r7, #6
 8003bb8:	8812      	ldrh	r2, [r2, #0]
 8003bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1dba      	adds	r2, r7, #6
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d10f      	bne.n	8003c0e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4951      	ldr	r1, [pc, #324]	; (8003d50 <HAL_SPI_Receive+0x248>)
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2240      	movs	r2, #64	; 0x40
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d007      	beq.n	8003c2c <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d164      	bne.n	8003cfe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c34:	e02f      	b.n	8003c96 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d115      	bne.n	8003c70 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6e:	e012      	b.n	8003c96 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c70:	f7fe faa4 	bl	80021bc <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d802      	bhi.n	8003c86 <HAL_SPI_Receive+0x17e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_SPI_Receive+0x184>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003c8c:	2317      	movs	r3, #23
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2203      	movs	r2, #3
 8003c92:	701a      	strb	r2, [r3, #0]
          goto error;
 8003c94:	e04d      	b.n	8003d32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ca      	bne.n	8003c36 <HAL_SPI_Receive+0x12e>
 8003ca0:	e032      	b.n	8003d08 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d113      	bne.n	8003cd8 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd6:	e012      	b.n	8003cfe <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd8:	f7fe fa70 	bl	80021bc <HAL_GetTick>
 8003cdc:	0002      	movs	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d802      	bhi.n	8003cee <HAL_SPI_Receive+0x1e6>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_SPI_Receive+0x1ec>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003cf4:	2317      	movs	r3, #23
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	701a      	strb	r2, [r3, #0]
          goto error;
 8003cfc:	e019      	b.n	8003d32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1cc      	bne.n	8003ca2 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	6839      	ldr	r1, [r7, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 fa6a 	bl	80041e8 <SPI_EndRxTransaction>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003d26:	2317      	movs	r3, #23
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e000      	b.n	8003d32 <HAL_SPI_Receive+0x22a>
  }

error :
 8003d30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2251      	movs	r2, #81	; 0x51
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2250      	movs	r2, #80	; 0x50
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d42:	2317      	movs	r3, #23
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	781b      	ldrb	r3, [r3, #0]
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b007      	add	sp, #28
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	ffffbfff 	.word	0xffffbfff

08003d54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	001a      	movs	r2, r3
 8003d62:	1cbb      	adds	r3, r7, #2
 8003d64:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d6a:	232b      	movs	r3, #43	; 0x2b
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2250      	movs	r2, #80	; 0x50
 8003d76:	5c9b      	ldrb	r3, [r3, r2]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x2c>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e1a0      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x36e>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2250      	movs	r2, #80	; 0x50
 8003d84:	2101      	movs	r1, #1
 8003d86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d88:	f7fe fa18 	bl	80021bc <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d90:	2023      	movs	r0, #35	; 0x23
 8003d92:	183b      	adds	r3, r7, r0
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	2151      	movs	r1, #81	; 0x51
 8003d98:	5c52      	ldrb	r2, [r2, r1]
 8003d9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003da2:	231a      	movs	r3, #26
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	1cba      	adds	r2, r7, #2
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d011      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x84>
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	2382      	movs	r3, #130	; 0x82
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d107      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x7a>
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d004      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003dce:	232b      	movs	r3, #43	; 0x2b
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dd6:	e169      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x98>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x98>
 8003de4:	1cbb      	adds	r3, r7, #2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003dec:	232b      	movs	r3, #43	; 0x2b
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003df4:	e15a      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2251      	movs	r2, #81	; 0x51
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d003      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2251      	movs	r2, #81	; 0x51
 8003e06:	2105      	movs	r1, #5
 8003e08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1cba      	adds	r2, r7, #2
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1cba      	adds	r2, r7, #2
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1cba      	adds	r2, r7, #2
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1cba      	adds	r2, r7, #2
 8003e38:	8812      	ldrh	r2, [r2, #0]
 8003e3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d007      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	430a      	orrs	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d000      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x120>
 8003e72:	e07a      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x132>
 8003e7c:	231a      	movs	r3, #26
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d166      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eaa:	e053      	b.n	8003f54 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x19e>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d016      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x19e>
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d113      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d119      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x1e0>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	b292      	uxth	r2, r2
 8003f16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f30:	2301      	movs	r3, #1
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f34:	f7fe f942 	bl	80021bc <HAL_GetTick>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d807      	bhi.n	8003f54 <HAL_SPI_TransmitReceive+0x200>
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	3301      	adds	r3, #1
 8003f48:	d004      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003f4a:	232b      	movs	r3, #43	; 0x2b
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	2203      	movs	r2, #3
 8003f50:	701a      	strb	r2, [r3, #0]
        goto error;
 8003f52:	e0ab      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1a6      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x158>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1a1      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x158>
 8003f68:	e07f      	b.n	800406a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x22a>
 8003f72:	231a      	movs	r3, #26
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d000      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x22a>
 8003f7c:	e06b      	b.n	8004056 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa4:	e057      	b.n	8004056 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2202      	movs	r2, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11c      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x29a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d017      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x29a>
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d114      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d119      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x2dc>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d014      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004030:	f7fe f8c4 	bl	80021bc <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800403c:	429a      	cmp	r2, r3
 800403e:	d802      	bhi.n	8004046 <HAL_SPI_TransmitReceive+0x2f2>
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	3301      	adds	r3, #1
 8004044:	d102      	bne.n	800404c <HAL_SPI_TransmitReceive+0x2f8>
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800404c:	232b      	movs	r3, #43	; 0x2b
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2203      	movs	r2, #3
 8004052:	701a      	strb	r2, [r3, #0]
        goto error;
 8004054:	e02a      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1a2      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x252>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d19d      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f923 	bl	80042bc <SPI_EndRxTxTransaction>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d007      	beq.n	800408a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800407a:	232b      	movs	r3, #43	; 0x2b
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004088:	e010      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	e000      	b.n	80040ac <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80040aa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2251      	movs	r2, #81	; 0x51
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2250      	movs	r2, #80	; 0x50
 80040b8:	2100      	movs	r1, #0
 80040ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040bc:	232b      	movs	r3, #43	; 0x2b
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b00c      	add	sp, #48	; 0x30
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040dc:	f7fe f86e 	bl	80021bc <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	18d3      	adds	r3, r2, r3
 80040ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ec:	f7fe f866 	bl	80021bc <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	015b      	lsls	r3, r3, #5
 80040fa:	0d1b      	lsrs	r3, r3, #20
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	4353      	muls	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004102:	e058      	b.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	d055      	beq.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800410a:	f7fe f857 	bl	80021bc <HAL_GetTick>
 800410e:	0002      	movs	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	429a      	cmp	r2, r3
 8004118:	d902      	bls.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x54>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d142      	bne.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	21e0      	movs	r1, #224	; 0xe0
 800412c:	438a      	bics	r2, r1
 800412e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	2382      	movs	r3, #130	; 0x82
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	d113      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x98>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	429a      	cmp	r2, r3
 8004146:	d005      	beq.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	438a      	bics	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	019b      	lsls	r3, r3, #6
 800416c:	429a      	cmp	r2, r3
 800416e:	d110      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	491a      	ldr	r1, [pc, #104]	; (80041e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800417c:	400a      	ands	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	0189      	lsls	r1, r1, #6
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2251      	movs	r2, #81	; 0x51
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2250      	movs	r2, #80	; 0x50
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e017      	b.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	425a      	negs	r2, r3
 80041c6:	4153      	adcs	r3, r2
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	001a      	movs	r2, r3
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d197      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b008      	add	sp, #32
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	200000c4 	.word	0x200000c4
 80041e4:	ffffdfff 	.word	0xffffdfff

080041e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2382      	movs	r3, #130	; 0x82
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d113      	bne.n	8004228 <SPI_EndRxTransaction+0x40>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	429a      	cmp	r2, r3
 800420a:	d005      	beq.n	8004218 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	438a      	bics	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	2382      	movs	r3, #130	; 0x82
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	429a      	cmp	r2, r3
 8004232:	d12b      	bne.n	800428c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	429a      	cmp	r2, r3
 800423e:	d012      	beq.n	8004266 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	0013      	movs	r3, r2
 800424a:	2200      	movs	r2, #0
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	f7ff ff3d 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 8004252:	1e03      	subs	r3, r0, #0
 8004254:	d02d      	beq.n	80042b2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2220      	movs	r2, #32
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e026      	b.n	80042b4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	0013      	movs	r3, r2
 8004270:	2200      	movs	r2, #0
 8004272:	2101      	movs	r1, #1
 8004274:	f7ff ff2a 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d01a      	beq.n	80042b2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	2220      	movs	r2, #32
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e013      	b.n	80042b4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	0013      	movs	r3, r2
 8004296:	2200      	movs	r2, #0
 8004298:	2101      	movs	r1, #1
 800429a:	f7ff ff17 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d007      	beq.n	80042b2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	2220      	movs	r2, #32
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <SPI_EndRxTxTransaction+0x84>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	491d      	ldr	r1, [pc, #116]	; (8004344 <SPI_EndRxTxTransaction+0x88>)
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fb ff1a 	bl	8000108 <__udivsi3>
 80042d4:	0003      	movs	r3, r0
 80042d6:	001a      	movs	r2, r3
 80042d8:	0013      	movs	r3, r2
 80042da:	015b      	lsls	r3, r3, #5
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	2382      	movs	r3, #130	; 0x82
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d112      	bne.n	8004318 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	f7ff fee4 	bl	80040cc <SPI_WaitFlagStateUntilTimeout>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d016      	beq.n	8004336 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2220      	movs	r2, #32
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e00f      	b.n	8004338 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3b01      	subs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	4013      	ands	r3, r2
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d0f2      	beq.n	8004318 <SPI_EndRxTxTransaction+0x5c>
 8004332:	e000      	b.n	8004336 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004334:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b006      	add	sp, #24
 800433e:	bd80      	pop	{r7, pc}
 8004340:	200000c4 	.word	0x200000c4
 8004344:	016e3600 	.word	0x016e3600

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e032      	b.n	80043c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2239      	movs	r2, #57	; 0x39
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2238      	movs	r2, #56	; 0x38
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7fd fde7 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2239      	movs	r2, #57	; 0x39
 800437a:	2102      	movs	r1, #2
 800437c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	0019      	movs	r1, r3
 8004388:	0010      	movs	r0, r2
 800438a:	f000 f97f 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223e      	movs	r2, #62	; 0x3e
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223a      	movs	r2, #58	; 0x3a
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223b      	movs	r2, #59	; 0x3b
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223c      	movs	r2, #60	; 0x3c
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223d      	movs	r2, #61	; 0x3d
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2239      	movs	r2, #57	; 0x39
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2239      	movs	r2, #57	; 0x39
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e03b      	b.n	8004458 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2239      	movs	r2, #57	; 0x39
 80043e4:	2102      	movs	r1, #2
 80043e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	05db      	lsls	r3, r3, #23
 8004400:	429a      	cmp	r2, r3
 8004402:	d00e      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0x5a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIM_Base_Start_IT+0x98>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0x5a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_TIM_Base_Start_IT+0x9c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0x5a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <HAL_TIM_Base_Start_IT+0xa0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d111      	bne.n	8004446 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2207      	movs	r2, #7
 800442a:	4013      	ands	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d010      	beq.n	8004456 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2101      	movs	r1, #1
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	e007      	b.n	8004456 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40000400 	.word	0x40000400
 8004464:	40010800 	.word	0x40010800
 8004468:	40011400 	.word	0x40011400

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d124      	bne.n	80044cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2202      	movs	r2, #2
 800448a:	4013      	ands	r3, r2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11d      	bne.n	80044cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2203      	movs	r2, #3
 8004496:	4252      	negs	r2, r2
 8004498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2203      	movs	r2, #3
 80044a8:	4013      	ands	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 f8d4 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 80044b4:	e007      	b.n	80044c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f8c7 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 f8d3 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2204      	movs	r2, #4
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d125      	bne.n	8004526 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d11e      	bne.n	8004526 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2205      	movs	r2, #5
 80044ee:	4252      	negs	r2, r2
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	23c0      	movs	r3, #192	; 0xc0
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 f8a7 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 800450e:	e007      	b.n	8004520 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	0018      	movs	r0, r3
 8004514:	f000 f89a 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f8a6 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2208      	movs	r2, #8
 800452e:	4013      	ands	r3, r2
 8004530:	2b08      	cmp	r3, #8
 8004532:	d124      	bne.n	800457e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2208      	movs	r2, #8
 800453c:	4013      	ands	r3, r2
 800453e:	2b08      	cmp	r3, #8
 8004540:	d11d      	bne.n	800457e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2209      	movs	r2, #9
 8004548:	4252      	negs	r2, r2
 800454a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2204      	movs	r2, #4
 8004550:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2203      	movs	r2, #3
 800455a:	4013      	ands	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f87b 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004566:	e007      	b.n	8004578 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0018      	movs	r0, r3
 800456c:	f000 f86e 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 f87a 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2210      	movs	r2, #16
 8004586:	4013      	ands	r3, r2
 8004588:	2b10      	cmp	r3, #16
 800458a:	d125      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2210      	movs	r2, #16
 8004594:	4013      	ands	r3, r2
 8004596:	2b10      	cmp	r3, #16
 8004598:	d11e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2211      	movs	r2, #17
 80045a0:	4252      	negs	r2, r2
 80045a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2208      	movs	r2, #8
 80045a8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	23c0      	movs	r3, #192	; 0xc0
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4013      	ands	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 f84e 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 80045c0:	e007      	b.n	80045d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f000 f841 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f84d 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2201      	movs	r2, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d10f      	bne.n	8004606 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2202      	movs	r2, #2
 80045fa:	4252      	negs	r2, r2
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f81b 	bl	800463c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	4013      	ands	r3, r2
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d10f      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2240      	movs	r2, #64	; 0x40
 800461c:	4013      	ands	r3, r2
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d108      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2241      	movs	r2, #65	; 0x41
 8004628:	4252      	negs	r2, r2
 800462a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	0018      	movs	r0, r3
 8004630:	f000 f824 	bl	800467c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	05db      	lsls	r3, r3, #23
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d00b      	beq.n	80046be <TIM_Base_SetConfig+0x32>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a23      	ldr	r2, [pc, #140]	; (8004738 <TIM_Base_SetConfig+0xac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0x32>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <TIM_Base_SetConfig+0xb0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0x32>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a21      	ldr	r2, [pc, #132]	; (8004740 <TIM_Base_SetConfig+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2270      	movs	r2, #112	; 0x70
 80046c2:	4393      	bics	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	05db      	lsls	r3, r3, #23
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0x66>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <TIM_Base_SetConfig+0xac>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0x66>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <TIM_Base_SetConfig+0xb0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0x66>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <TIM_Base_SetConfig+0xb4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a13      	ldr	r2, [pc, #76]	; (8004744 <TIM_Base_SetConfig+0xb8>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	4393      	bics	r3, r2
 800470a:	001a      	movs	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	615a      	str	r2, [r3, #20]
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40000400 	.word	0x40000400
 800473c:	40010800 	.word	0x40010800
 8004740:	40011400 	.word	0x40011400
 8004744:	fffffcff 	.word	0xfffffcff

08004748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2238      	movs	r2, #56	; 0x38
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e047      	b.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2238      	movs	r2, #56	; 0x38
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2239      	movs	r2, #57	; 0x39
 800476c:	2102      	movs	r1, #2
 800476e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2270      	movs	r2, #112	; 0x70
 8004784:	4393      	bics	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	05db      	lsls	r3, r3, #23
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a11      	ldr	r2, [pc, #68]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10c      	bne.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	4393      	bics	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2239      	movs	r2, #57	; 0x39
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2238      	movs	r2, #56	; 0x38
 80047ea:	2100      	movs	r1, #0
 80047ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40010800 	.word	0x40010800
 8004800:	40011400 	.word	0x40011400

08004804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e044      	b.n	80048a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2274      	movs	r2, #116	; 0x74
 8004822:	2100      	movs	r1, #0
 8004824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f7fd fbf3 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2224      	movs	r2, #36	; 0x24
 8004832:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	438a      	bics	r2, r1
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f8d8 	bl	80049fc <UART_SetConfig>
 800484c:	0003      	movs	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e024      	b.n	80048a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fb89 	bl	8004f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	490d      	ldr	r1, [pc, #52]	; (80048a8 <HAL_UART_Init+0xa4>)
 8004872:	400a      	ands	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	212a      	movs	r1, #42	; 0x2a
 8004882:	438a      	bics	r2, r1
 8004884:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2101      	movs	r1, #1
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 fc21 	bl	80050e0 <UART_CheckIdleState>
 800489e:	0003      	movs	r3, r0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	ffffb7ff 	.word	0xffffb7ff

080048ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d000      	beq.n	80048c6 <HAL_UART_Transmit+0x1a>
 80048c4:	e095      	b.n	80049f2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_UART_Transmit+0x28>
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e08d      	b.n	80049f4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	015b      	lsls	r3, r3, #5
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d109      	bne.n	80048f8 <HAL_UART_Transmit+0x4c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	d001      	beq.n	80048f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e07d      	b.n	80049f4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2274      	movs	r2, #116	; 0x74
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_UART_Transmit+0x5a>
 8004902:	2302      	movs	r3, #2
 8004904:	e076      	b.n	80049f4 <HAL_UART_Transmit+0x148>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2274      	movs	r2, #116	; 0x74
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	2100      	movs	r1, #0
 8004914:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2221      	movs	r2, #33	; 0x21
 800491a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491c:	f7fd fc4e 	bl	80021bc <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1dba      	adds	r2, r7, #6
 8004928:	2150      	movs	r1, #80	; 0x50
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1dba      	adds	r2, r7, #6
 8004932:	2152      	movs	r1, #82	; 0x52
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	015b      	lsls	r3, r3, #5
 8004940:	429a      	cmp	r2, r3
 8004942:	d108      	bne.n	8004956 <HAL_UART_Transmit+0xaa>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e003      	b.n	800495e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2274      	movs	r2, #116	; 0x74
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004966:	e02c      	b.n	80049c2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	0013      	movs	r3, r2
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	f000 fbfb 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 800497a:	1e03      	subs	r3, r0, #0
 800497c:	d001      	beq.n	8004982 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e038      	b.n	80049f4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	001a      	movs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	05d2      	lsls	r2, r2, #23
 8004994:	0dd2      	lsrs	r2, r2, #23
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3302      	adds	r3, #2
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e007      	b.n	80049b0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2252      	movs	r2, #82	; 0x52
 80049b4:	5a9b      	ldrh	r3, [r3, r2]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b299      	uxth	r1, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2252      	movs	r2, #82	; 0x52
 80049c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2252      	movs	r2, #82	; 0x52
 80049c6:	5a9b      	ldrh	r3, [r3, r2]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cc      	bne.n	8004968 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	0013      	movs	r3, r2
 80049d8:	2200      	movs	r2, #0
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	f000 fbc8 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e005      	b.n	80049f4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b008      	add	sp, #32
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b5b0      	push	{r4, r5, r7, lr}
 80049fe:	b08e      	sub	sp, #56	; 0x38
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a04:	231a      	movs	r3, #26
 8004a06:	2218      	movs	r2, #24
 8004a08:	4694      	mov	ip, r2
 8004a0a:	44bc      	add	ip, r7
 8004a0c:	4463      	add	r3, ip
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4ab0      	ldr	r2, [pc, #704]	; (8004cf4 <UART_SetConfig+0x2f8>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4aac      	ldr	r2, [pc, #688]	; (8004cf8 <UART_SetConfig+0x2fc>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4aa6      	ldr	r2, [pc, #664]	; (8004cfc <UART_SetConfig+0x300>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4aa1      	ldr	r2, [pc, #644]	; (8004d00 <UART_SetConfig+0x304>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a9d      	ldr	r2, [pc, #628]	; (8004d04 <UART_SetConfig+0x308>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d136      	bne.n	8004b00 <UART_SetConfig+0x104>
 8004a92:	4b9d      	ldr	r3, [pc, #628]	; (8004d08 <UART_SetConfig+0x30c>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	2203      	movs	r2, #3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d020      	beq.n	8004ae0 <UART_SetConfig+0xe4>
 8004a9e:	d827      	bhi.n	8004af0 <UART_SetConfig+0xf4>
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d00d      	beq.n	8004ac0 <UART_SetConfig+0xc4>
 8004aa4:	d824      	bhi.n	8004af0 <UART_SetConfig+0xf4>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <UART_SetConfig+0xb4>
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d010      	beq.n	8004ad0 <UART_SetConfig+0xd4>
 8004aae:	e01f      	b.n	8004af0 <UART_SetConfig+0xf4>
 8004ab0:	231b      	movs	r3, #27
 8004ab2:	2218      	movs	r2, #24
 8004ab4:	4694      	mov	ip, r2
 8004ab6:	44bc      	add	ip, r7
 8004ab8:	4463      	add	r3, ip
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e0c5      	b.n	8004c4c <UART_SetConfig+0x250>
 8004ac0:	231b      	movs	r3, #27
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	4694      	mov	ip, r2
 8004ac6:	44bc      	add	ip, r7
 8004ac8:	4463      	add	r3, ip
 8004aca:	2202      	movs	r2, #2
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e0bd      	b.n	8004c4c <UART_SetConfig+0x250>
 8004ad0:	231b      	movs	r3, #27
 8004ad2:	2218      	movs	r2, #24
 8004ad4:	4694      	mov	ip, r2
 8004ad6:	44bc      	add	ip, r7
 8004ad8:	4463      	add	r3, ip
 8004ada:	2204      	movs	r2, #4
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e0b5      	b.n	8004c4c <UART_SetConfig+0x250>
 8004ae0:	231b      	movs	r3, #27
 8004ae2:	2218      	movs	r2, #24
 8004ae4:	4694      	mov	ip, r2
 8004ae6:	44bc      	add	ip, r7
 8004ae8:	4463      	add	r3, ip
 8004aea:	2208      	movs	r2, #8
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e0ad      	b.n	8004c4c <UART_SetConfig+0x250>
 8004af0:	231b      	movs	r3, #27
 8004af2:	2218      	movs	r2, #24
 8004af4:	4694      	mov	ip, r2
 8004af6:	44bc      	add	ip, r7
 8004af8:	4463      	add	r3, ip
 8004afa:	2210      	movs	r2, #16
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e0a5      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a81      	ldr	r2, [pc, #516]	; (8004d0c <UART_SetConfig+0x310>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d136      	bne.n	8004b78 <UART_SetConfig+0x17c>
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	; (8004d08 <UART_SetConfig+0x30c>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	220c      	movs	r2, #12
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d020      	beq.n	8004b58 <UART_SetConfig+0x15c>
 8004b16:	d827      	bhi.n	8004b68 <UART_SetConfig+0x16c>
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d00d      	beq.n	8004b38 <UART_SetConfig+0x13c>
 8004b1c:	d824      	bhi.n	8004b68 <UART_SetConfig+0x16c>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <UART_SetConfig+0x12c>
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d010      	beq.n	8004b48 <UART_SetConfig+0x14c>
 8004b26:	e01f      	b.n	8004b68 <UART_SetConfig+0x16c>
 8004b28:	231b      	movs	r3, #27
 8004b2a:	2218      	movs	r2, #24
 8004b2c:	4694      	mov	ip, r2
 8004b2e:	44bc      	add	ip, r7
 8004b30:	4463      	add	r3, ip
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	e089      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b38:	231b      	movs	r3, #27
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	44bc      	add	ip, r7
 8004b40:	4463      	add	r3, ip
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e081      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b48:	231b      	movs	r3, #27
 8004b4a:	2218      	movs	r2, #24
 8004b4c:	4694      	mov	ip, r2
 8004b4e:	44bc      	add	ip, r7
 8004b50:	4463      	add	r3, ip
 8004b52:	2204      	movs	r2, #4
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e079      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b58:	231b      	movs	r3, #27
 8004b5a:	2218      	movs	r2, #24
 8004b5c:	4694      	mov	ip, r2
 8004b5e:	44bc      	add	ip, r7
 8004b60:	4463      	add	r3, ip
 8004b62:	2208      	movs	r2, #8
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e071      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b68:	231b      	movs	r3, #27
 8004b6a:	2218      	movs	r2, #24
 8004b6c:	4694      	mov	ip, r2
 8004b6e:	44bc      	add	ip, r7
 8004b70:	4463      	add	r3, ip
 8004b72:	2210      	movs	r2, #16
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e069      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a64      	ldr	r2, [pc, #400]	; (8004d10 <UART_SetConfig+0x314>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d107      	bne.n	8004b92 <UART_SetConfig+0x196>
 8004b82:	231b      	movs	r3, #27
 8004b84:	2218      	movs	r2, #24
 8004b86:	4694      	mov	ip, r2
 8004b88:	44bc      	add	ip, r7
 8004b8a:	4463      	add	r3, ip
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e05c      	b.n	8004c4c <UART_SetConfig+0x250>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5f      	ldr	r2, [pc, #380]	; (8004d14 <UART_SetConfig+0x318>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d107      	bne.n	8004bac <UART_SetConfig+0x1b0>
 8004b9c:	231b      	movs	r3, #27
 8004b9e:	2218      	movs	r2, #24
 8004ba0:	4694      	mov	ip, r2
 8004ba2:	44bc      	add	ip, r7
 8004ba4:	4463      	add	r3, ip
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e04f      	b.n	8004c4c <UART_SetConfig+0x250>
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a52      	ldr	r2, [pc, #328]	; (8004cfc <UART_SetConfig+0x300>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d143      	bne.n	8004c3e <UART_SetConfig+0x242>
 8004bb6:	4b54      	ldr	r3, [pc, #336]	; (8004d08 <UART_SetConfig+0x30c>)
 8004bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bba:	23c0      	movs	r3, #192	; 0xc0
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	22c0      	movs	r2, #192	; 0xc0
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d02a      	beq.n	8004c1e <UART_SetConfig+0x222>
 8004bc8:	22c0      	movs	r2, #192	; 0xc0
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d82e      	bhi.n	8004c2e <UART_SetConfig+0x232>
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	0112      	lsls	r2, r2, #4
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d012      	beq.n	8004bfe <UART_SetConfig+0x202>
 8004bd8:	2280      	movs	r2, #128	; 0x80
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d826      	bhi.n	8004c2e <UART_SetConfig+0x232>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <UART_SetConfig+0x1f2>
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	00d2      	lsls	r2, r2, #3
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d010      	beq.n	8004c0e <UART_SetConfig+0x212>
 8004bec:	e01f      	b.n	8004c2e <UART_SetConfig+0x232>
 8004bee:	231b      	movs	r3, #27
 8004bf0:	2218      	movs	r2, #24
 8004bf2:	4694      	mov	ip, r2
 8004bf4:	44bc      	add	ip, r7
 8004bf6:	4463      	add	r3, ip
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e026      	b.n	8004c4c <UART_SetConfig+0x250>
 8004bfe:	231b      	movs	r3, #27
 8004c00:	2218      	movs	r2, #24
 8004c02:	4694      	mov	ip, r2
 8004c04:	44bc      	add	ip, r7
 8004c06:	4463      	add	r3, ip
 8004c08:	2202      	movs	r2, #2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e01e      	b.n	8004c4c <UART_SetConfig+0x250>
 8004c0e:	231b      	movs	r3, #27
 8004c10:	2218      	movs	r2, #24
 8004c12:	4694      	mov	ip, r2
 8004c14:	44bc      	add	ip, r7
 8004c16:	4463      	add	r3, ip
 8004c18:	2204      	movs	r2, #4
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e016      	b.n	8004c4c <UART_SetConfig+0x250>
 8004c1e:	231b      	movs	r3, #27
 8004c20:	2218      	movs	r2, #24
 8004c22:	4694      	mov	ip, r2
 8004c24:	44bc      	add	ip, r7
 8004c26:	4463      	add	r3, ip
 8004c28:	2208      	movs	r2, #8
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e00e      	b.n	8004c4c <UART_SetConfig+0x250>
 8004c2e:	231b      	movs	r3, #27
 8004c30:	2218      	movs	r2, #24
 8004c32:	4694      	mov	ip, r2
 8004c34:	44bc      	add	ip, r7
 8004c36:	4463      	add	r3, ip
 8004c38:	2210      	movs	r2, #16
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e006      	b.n	8004c4c <UART_SetConfig+0x250>
 8004c3e:	231b      	movs	r3, #27
 8004c40:	2218      	movs	r2, #24
 8004c42:	4694      	mov	ip, r2
 8004c44:	44bc      	add	ip, r7
 8004c46:	4463      	add	r3, ip
 8004c48:	2210      	movs	r2, #16
 8004c4a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <UART_SetConfig+0x300>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d000      	beq.n	8004c58 <UART_SetConfig+0x25c>
 8004c56:	e09e      	b.n	8004d96 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c58:	231b      	movs	r3, #27
 8004c5a:	2218      	movs	r2, #24
 8004c5c:	4694      	mov	ip, r2
 8004c5e:	44bc      	add	ip, r7
 8004c60:	4463      	add	r3, ip
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d01d      	beq.n	8004ca4 <UART_SetConfig+0x2a8>
 8004c68:	dc20      	bgt.n	8004cac <UART_SetConfig+0x2b0>
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d015      	beq.n	8004c9a <UART_SetConfig+0x29e>
 8004c6e:	dc1d      	bgt.n	8004cac <UART_SetConfig+0x2b0>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <UART_SetConfig+0x27e>
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d005      	beq.n	8004c84 <UART_SetConfig+0x288>
 8004c78:	e018      	b.n	8004cac <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c7a:	f7fe fbe9 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c82:	e01d      	b.n	8004cc0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <UART_SetConfig+0x30c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d002      	beq.n	8004c94 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <UART_SetConfig+0x31c>)
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c92:	e015      	b.n	8004cc0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <UART_SetConfig+0x320>)
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c98:	e012      	b.n	8004cc0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe fb29 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ca2:	e00d      	b.n	8004cc0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004caa:	e009      	b.n	8004cc0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004cb0:	231a      	movs	r3, #26
 8004cb2:	2218      	movs	r2, #24
 8004cb4:	4694      	mov	ip, r2
 8004cb6:	44bc      	add	ip, r7
 8004cb8:	4463      	add	r3, ip
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
        break;
 8004cbe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d100      	bne.n	8004cc8 <UART_SetConfig+0x2cc>
 8004cc6:	e13c      	b.n	8004f42 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	0013      	movs	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d305      	bcc.n	8004ce4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d91d      	bls.n	8004d20 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004ce4:	231a      	movs	r3, #26
 8004ce6:	2218      	movs	r2, #24
 8004ce8:	4694      	mov	ip, r2
 8004cea:	44bc      	add	ip, r7
 8004cec:	4463      	add	r3, ip
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e126      	b.n	8004f42 <UART_SetConfig+0x546>
 8004cf4:	efff69f3 	.word	0xefff69f3
 8004cf8:	ffffcfff 	.word	0xffffcfff
 8004cfc:	40004800 	.word	0x40004800
 8004d00:	fffff4ff 	.word	0xfffff4ff
 8004d04:	40013800 	.word	0x40013800
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004c00 	.word	0x40004c00
 8004d14:	40005000 	.word	0x40005000
 8004d18:	003d0900 	.word	0x003d0900
 8004d1c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	6939      	ldr	r1, [r7, #16]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	000b      	movs	r3, r1
 8004d2e:	0e1b      	lsrs	r3, r3, #24
 8004d30:	0010      	movs	r0, r2
 8004d32:	0205      	lsls	r5, r0, #8
 8004d34:	431d      	orrs	r5, r3
 8004d36:	000b      	movs	r3, r1
 8004d38:	021c      	lsls	r4, r3, #8
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	68b8      	ldr	r0, [r7, #8]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	1900      	adds	r0, r0, r4
 8004d4c:	4169      	adcs	r1, r5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f7fb fb4a 	bl	80003f4 <__aeabi_uldivmod>
 8004d60:	0002      	movs	r2, r0
 8004d62:	000b      	movs	r3, r1
 8004d64:	0013      	movs	r3, r2
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	23c0      	movs	r3, #192	; 0xc0
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d309      	bcc.n	8004d86 <UART_SetConfig+0x38a>
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	035b      	lsls	r3, r3, #13
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d204      	bcs.n	8004d86 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	e0dd      	b.n	8004f42 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004d86:	231a      	movs	r3, #26
 8004d88:	2218      	movs	r2, #24
 8004d8a:	4694      	mov	ip, r2
 8004d8c:	44bc      	add	ip, r7
 8004d8e:	4463      	add	r3, ip
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e0d5      	b.n	8004f42 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d000      	beq.n	8004da4 <UART_SetConfig+0x3a8>
 8004da2:	e074      	b.n	8004e8e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8004da4:	231b      	movs	r3, #27
 8004da6:	2218      	movs	r2, #24
 8004da8:	4694      	mov	ip, r2
 8004daa:	44bc      	add	ip, r7
 8004dac:	4463      	add	r3, ip
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d822      	bhi.n	8004dfa <UART_SetConfig+0x3fe>
 8004db4:	009a      	lsls	r2, r3, #2
 8004db6:	4b6b      	ldr	r3, [pc, #428]	; (8004f64 <UART_SetConfig+0x568>)
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dbe:	f7fe fb47 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dc6:	e022      	b.n	8004e0e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe fb58 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dd0:	e01d      	b.n	8004e0e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dd2:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <UART_SetConfig+0x56c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d002      	beq.n	8004de2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ddc:	4b63      	ldr	r3, [pc, #396]	; (8004f6c <UART_SetConfig+0x570>)
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004de0:	e015      	b.n	8004e0e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <UART_SetConfig+0x574>)
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004de6:	e012      	b.n	8004e0e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de8:	f7fe fa82 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004dec:	0003      	movs	r3, r0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004dfe:	231a      	movs	r3, #26
 8004e00:	2218      	movs	r2, #24
 8004e02:	4694      	mov	ip, r2
 8004e04:	44bc      	add	ip, r7
 8004e06:	4463      	add	r3, ip
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
        break;
 8004e0c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <UART_SetConfig+0x41a>
 8004e14:	e095      	b.n	8004f42 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	005a      	lsls	r2, r3, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	0019      	movs	r1, r3
 8004e28:	0010      	movs	r0, r2
 8004e2a:	f7fb f96d 	bl	8000108 <__udivsi3>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d921      	bls.n	8004e7e <UART_SetConfig+0x482>
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	025b      	lsls	r3, r3, #9
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d21c      	bcs.n	8004e7e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	200e      	movs	r0, #14
 8004e4a:	2418      	movs	r4, #24
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	181b      	adds	r3, r3, r0
 8004e50:	210f      	movs	r1, #15
 8004e52:	438a      	bics	r2, r1
 8004e54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	4013      	ands	r3, r2
 8004e60:	b299      	uxth	r1, r3
 8004e62:	193b      	adds	r3, r7, r4
 8004e64:	181b      	adds	r3, r3, r0
 8004e66:	193a      	adds	r2, r7, r4
 8004e68:	1812      	adds	r2, r2, r0
 8004e6a:	8812      	ldrh	r2, [r2, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	193a      	adds	r2, r7, r4
 8004e76:	1812      	adds	r2, r2, r0
 8004e78:	8812      	ldrh	r2, [r2, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	e061      	b.n	8004f42 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7e:	231a      	movs	r3, #26
 8004e80:	2218      	movs	r2, #24
 8004e82:	4694      	mov	ip, r2
 8004e84:	44bc      	add	ip, r7
 8004e86:	4463      	add	r3, ip
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e059      	b.n	8004f42 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e8e:	231b      	movs	r3, #27
 8004e90:	2218      	movs	r2, #24
 8004e92:	4694      	mov	ip, r2
 8004e94:	44bc      	add	ip, r7
 8004e96:	4463      	add	r3, ip
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d822      	bhi.n	8004ee4 <UART_SetConfig+0x4e8>
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <UART_SetConfig+0x578>)
 8004ea2:	18d3      	adds	r3, r2, r3
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fe fad2 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004eac:	0003      	movs	r3, r0
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eb0:	e022      	b.n	8004ef8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb2:	f7fe fae3 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eba:	e01d      	b.n	8004ef8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <UART_SetConfig+0x56c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d002      	beq.n	8004ecc <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ec6:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <UART_SetConfig+0x570>)
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004eca:	e015      	b.n	8004ef8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004ecc:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <UART_SetConfig+0x574>)
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ed0:	e012      	b.n	8004ef8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed2:	f7fe fa0d 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eda:	e00d      	b.n	8004ef8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ee2:	e009      	b.n	8004ef8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ee8:	231a      	movs	r3, #26
 8004eea:	2218      	movs	r2, #24
 8004eec:	4694      	mov	ip, r2
 8004eee:	44bc      	add	ip, r7
 8004ef0:	4463      	add	r3, ip
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	701a      	strb	r2, [r3, #0]
        break;
 8004ef6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085a      	lsrs	r2, r3, #1
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	18d2      	adds	r2, r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	0010      	movs	r0, r2
 8004f10:	f7fb f8fa 	bl	8000108 <__udivsi3>
 8004f14:	0003      	movs	r3, r0
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	2b0f      	cmp	r3, #15
 8004f1e:	d909      	bls.n	8004f34 <UART_SetConfig+0x538>
 8004f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d204      	bcs.n	8004f34 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f30:	60da      	str	r2, [r3, #12]
 8004f32:	e006      	b.n	8004f42 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004f34:	231a      	movs	r3, #26
 8004f36:	2218      	movs	r2, #24
 8004f38:	4694      	mov	ip, r2
 8004f3a:	44bc      	add	ip, r7
 8004f3c:	4463      	add	r3, ip
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2200      	movs	r2, #0
 8004f46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f4e:	231a      	movs	r3, #26
 8004f50:	2218      	movs	r2, #24
 8004f52:	4694      	mov	ip, r2
 8004f54:	44bc      	add	ip, r7
 8004f56:	4463      	add	r3, ip
 8004f58:	781b      	ldrb	r3, [r3, #0]
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b00e      	add	sp, #56	; 0x38
 8004f60:	bdb0      	pop	{r4, r5, r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	08005390 	.word	0x08005390
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	003d0900 	.word	0x003d0900
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	080053b4 	.word	0x080053b4

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <UART_AdvFeatureConfig+0x144>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a43      	ldr	r2, [pc, #268]	; (80050c0 <UART_AdvFeatureConfig+0x148>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <UART_AdvFeatureConfig+0x14c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <UART_AdvFeatureConfig+0x150>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2210      	movs	r2, #16
 800500e:	4013      	ands	r3, r2
 8005010:	d00b      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <UART_AdvFeatureConfig+0x154>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d00b      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <UART_AdvFeatureConfig+0x158>)
 800503c:	4013      	ands	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4013      	ands	r3, r2
 8005054:	d01d      	beq.n	8005092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <UART_AdvFeatureConfig+0x15c>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	035b      	lsls	r3, r3, #13
 8005076:	429a      	cmp	r2, r3
 8005078:	d10b      	bne.n	8005092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_AdvFeatureConfig+0x160>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	4013      	ands	r3, r2
 800509a:	d00b      	beq.n	80050b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <UART_AdvFeatureConfig+0x164>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffdffff 	.word	0xfffdffff
 80050c0:	fffeffff 	.word	0xfffeffff
 80050c4:	fffbffff 	.word	0xfffbffff
 80050c8:	ffff7fff 	.word	0xffff7fff
 80050cc:	ffffefff 	.word	0xffffefff
 80050d0:	ffffdfff 	.word	0xffffdfff
 80050d4:	ffefffff 	.word	0xffefffff
 80050d8:	ff9fffff 	.word	0xff9fffff
 80050dc:	fff7ffff 	.word	0xfff7ffff

080050e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	2100      	movs	r1, #0
 80050ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f0:	f7fd f864 	bl	80021bc <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2208      	movs	r2, #8
 8005100:	4013      	ands	r3, r2
 8005102:	2b08      	cmp	r3, #8
 8005104:	d10c      	bne.n	8005120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	0391      	lsls	r1, r2, #14
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <UART_CheckIdleState+0x8c>)
 8005110:	9200      	str	r2, [sp, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	f000 f82c 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d001      	beq.n	8005120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e021      	b.n	8005164 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2204      	movs	r2, #4
 8005128:	4013      	ands	r3, r2
 800512a:	2b04      	cmp	r3, #4
 800512c:	d10c      	bne.n	8005148 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	03d1      	lsls	r1, r2, #15
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <UART_CheckIdleState+0x8c>)
 8005138:	9200      	str	r2, [sp, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	f000 f818 	bl	8005170 <UART_WaitOnFlagUntilTimeout>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d001      	beq.n	8005148 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e00d      	b.n	8005164 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2274      	movs	r2, #116	; 0x74
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b004      	add	sp, #16
 800516a:	bd80      	pop	{r7, pc}
 800516c:	01ffffff 	.word	0x01ffffff

08005170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b094      	sub	sp, #80	; 0x50
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	1dfb      	adds	r3, r7, #7
 800517e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005180:	e0a3      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005184:	3301      	adds	r3, #1
 8005186:	d100      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005188:	e09f      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fd f817 	bl	80021bc <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800519a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519c:	2b00      	cmp	r3, #0
 800519e:	d13d      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a0:	f3ef 8310 	mrs	r3, PRIMASK
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	2301      	movs	r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	494c      	ldr	r1, [pc, #304]	; (80052f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	f383 8810 	msr	PRIMASK, r3
}
 80051d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
 80051dc:	2301      	movs	r3, #1
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2101      	movs	r1, #1
 80051f4:	438a      	bics	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2274      	movs	r2, #116	; 0x74
 8005214:	2100      	movs	r1, #0
 8005216:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e067      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2204      	movs	r2, #4
 8005224:	4013      	ands	r3, r2
 8005226:	d050      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	401a      	ands	r2, r3
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	429a      	cmp	r2, r3
 800523a:	d146      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	613b      	str	r3, [r7, #16]
  return(result);
 800524c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4923      	ldr	r1, [pc, #140]	; (80052f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005278:	f3ef 8310 	mrs	r3, PRIMASK
 800527c:	61fb      	str	r3, [r7, #28]
  return(result);
 800527e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
 8005282:	2301      	movs	r3, #1
 8005284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f383 8810 	msr	PRIMASK, r3
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2101      	movs	r1, #1
 800529a:	438a      	bics	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	2120      	movs	r1, #32
 80052bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2274      	movs	r2, #116	; 0x74
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e010      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	425a      	negs	r2, r3
 80052da:	4153      	adcs	r3, r2
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	001a      	movs	r2, r3
 80052e0:	1dfb      	adds	r3, r7, #7
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d100      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80052e8:	e74b      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b014      	add	sp, #80	; 0x50
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	fffffe5f 	.word	0xfffffe5f

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	2600      	movs	r6, #0
 80052fc:	4d0c      	ldr	r5, [pc, #48]	; (8005330 <__libc_init_array+0x38>)
 80052fe:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	2600      	movs	r6, #0
 800530a:	f000 f821 	bl	8005350 <_init>
 800530e:	4d0a      	ldr	r5, [pc, #40]	; (8005338 <__libc_init_array+0x40>)
 8005310:	4c0a      	ldr	r4, [pc, #40]	; (800533c <__libc_init_array+0x44>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	00b3      	lsls	r3, r6, #2
 800531e:	58eb      	ldr	r3, [r5, r3]
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	00b3      	lsls	r3, r6, #2
 8005328:	58eb      	ldr	r3, [r5, r3]
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	080053e0 	.word	0x080053e0
 8005334:	080053e0 	.word	0x080053e0
 8005338:	080053e0 	.word	0x080053e0
 800533c:	080053e4 	.word	0x080053e4

08005340 <memset>:
 8005340:	0003      	movs	r3, r0
 8005342:	1882      	adds	r2, r0, r2
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	7019      	strb	r1, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
