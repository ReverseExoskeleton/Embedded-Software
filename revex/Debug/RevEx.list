
RevEx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000788c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa4  08007aa4  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000130  08007bdc  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08007bdc  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc40  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b63  00000000  00000000  0003bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00040e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001664f  00000000  00000000  00042188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adef  00000000  00000000  000587d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081759  00000000  00000000  000735c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  000f4d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000130 	.word	0x20000130
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007934 	.word	0x08007934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000134 	.word	0x20000134
 8000104:	08007934 	.word	0x08007934

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 fca2 	bl	8000e00 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 fc9d 	bl	8000e00 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fadd>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4646      	mov	r6, r8
 8000634:	46d6      	mov	lr, sl
 8000636:	464f      	mov	r7, r9
 8000638:	024d      	lsls	r5, r1, #9
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	0a52      	lsrs	r2, r2, #9
 8000640:	0a6e      	lsrs	r6, r5, #9
 8000642:	0047      	lsls	r7, r0, #1
 8000644:	46b0      	mov	r8, r6
 8000646:	0e3f      	lsrs	r7, r7, #24
 8000648:	004e      	lsls	r6, r1, #1
 800064a:	0fc4      	lsrs	r4, r0, #31
 800064c:	00d0      	lsls	r0, r2, #3
 800064e:	4694      	mov	ip, r2
 8000650:	003b      	movs	r3, r7
 8000652:	4682      	mov	sl, r0
 8000654:	0e36      	lsrs	r6, r6, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09ad      	lsrs	r5, r5, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d06d      	beq.n	800073a <__aeabi_fadd+0x10a>
 800065e:	1bb8      	subs	r0, r7, r6
 8000660:	4681      	mov	r9, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	dd4d      	ble.n	8000702 <__aeabi_fadd+0xd2>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x3c>
 800066a:	e088      	b.n	800077e <__aeabi_fadd+0x14e>
 800066c:	2fff      	cmp	r7, #255	; 0xff
 800066e:	d05a      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	04db      	lsls	r3, r3, #19
 8000674:	431d      	orrs	r5, r3
 8000676:	464b      	mov	r3, r9
 8000678:	2201      	movs	r2, #1
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dc0a      	bgt.n	8000694 <__aeabi_fadd+0x64>
 800067e:	002b      	movs	r3, r5
 8000680:	464a      	mov	r2, r9
 8000682:	4649      	mov	r1, r9
 8000684:	40d3      	lsrs	r3, r2
 8000686:	2220      	movs	r2, #32
 8000688:	1a52      	subs	r2, r2, r1
 800068a:	4095      	lsls	r5, r2
 800068c:	002a      	movs	r2, r5
 800068e:	1e55      	subs	r5, r2, #1
 8000690:	41aa      	sbcs	r2, r5
 8000692:	431a      	orrs	r2, r3
 8000694:	4653      	mov	r3, sl
 8000696:	1a9a      	subs	r2, r3, r2
 8000698:	0153      	lsls	r3, r2, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x6e>
 800069c:	e0b9      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	0996      	lsrs	r6, r2, #6
 80006a2:	0030      	movs	r0, r6
 80006a4:	f000 fb8e 	bl	8000dc4 <__clzsi2>
 80006a8:	3805      	subs	r0, #5
 80006aa:	4086      	lsls	r6, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_fadd+0x82>
 80006b0:	e0d4      	b.n	800085c <__aeabi_fadd+0x22c>
 80006b2:	0033      	movs	r3, r6
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	2020      	movs	r0, #32
 80006b8:	3701      	adds	r7, #1
 80006ba:	40fb      	lsrs	r3, r7
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1e56      	subs	r6, r2, #1
 80006c4:	41b2      	sbcs	r2, r6
 80006c6:	2700      	movs	r7, #0
 80006c8:	431a      	orrs	r2, r3
 80006ca:	0753      	lsls	r3, r2, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006ce:	230f      	movs	r3, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fadd+0xae>
 80006dc:	e09c      	b.n	8000818 <__aeabi_fadd+0x1e8>
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	2ffe      	cmp	r7, #254	; 0xfe
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xb6>
 80006e4:	e09a      	b.n	800081c <__aeabi_fadd+0x1ec>
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	4694      	mov	ip, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	05d8      	lsls	r0, r3, #23
 80006f0:	4663      	mov	r3, ip
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4318      	orrs	r0, r3
 80006f6:	4320      	orrs	r0, r4
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	2800      	cmp	r0, #0
 8000704:	d049      	beq.n	800079a <__aeabi_fadd+0x16a>
 8000706:	1bf3      	subs	r3, r6, r7
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fadd+0x24c>
 800070e:	4652      	mov	r2, sl
 8000710:	2a00      	cmp	r2, #0
 8000712:	d060      	beq.n	80007d6 <__aeabi_fadd+0x1a6>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0xec>
 800071a:	e0fc      	b.n	8000916 <__aeabi_fadd+0x2e6>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xf2>
 8000720:	e0b4      	b.n	800088c <__aeabi_fadd+0x25c>
 8000722:	000c      	movs	r4, r1
 8000724:	4642      	mov	r2, r8
 8000726:	2a00      	cmp	r2, #0
 8000728:	d078      	beq.n	800081c <__aeabi_fadd+0x1ec>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4310      	orrs	r0, r2
 8000730:	0242      	lsls	r2, r0, #9
 8000732:	0a53      	lsrs	r3, r2, #9
 8000734:	469c      	mov	ip, r3
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	e7d9      	b.n	80006ee <__aeabi_fadd+0xbe>
 800073a:	1bb9      	subs	r1, r7, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	dd71      	ble.n	8000824 <__aeabi_fadd+0x1f4>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d03f      	beq.n	80007c4 <__aeabi_fadd+0x194>
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d0ee      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2201      	movs	r2, #1
 8000750:	291b      	cmp	r1, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x134>
 8000754:	002a      	movs	r2, r5
 8000756:	2320      	movs	r3, #32
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	408d      	lsls	r5, r1
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	432a      	orrs	r2, r5
 8000764:	4452      	add	r2, sl
 8000766:	0153      	lsls	r3, r2, #5
 8000768:	d553      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800076a:	3701      	adds	r7, #1
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d055      	beq.n	800081c <__aeabi_fadd+0x1ec>
 8000770:	2301      	movs	r3, #1
 8000772:	497b      	ldr	r1, [pc, #492]	; (8000960 <__aeabi_fadd+0x330>)
 8000774:	4013      	ands	r3, r2
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	e7a5      	b.n	80006ca <__aeabi_fadd+0x9a>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d02c      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	469c      	mov	ip, r3
 8000788:	44e1      	add	r9, ip
 800078a:	464b      	mov	r3, r9
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x162>
 8000790:	e0ad      	b.n	80008ee <__aeabi_fadd+0x2be>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x168>
 8000796:	e76e      	b.n	8000676 <__aeabi_fadd+0x46>
 8000798:	e7c5      	b.n	8000726 <__aeabi_fadd+0xf6>
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c7e      	adds	r6, r7, #1
 800079e:	4230      	tst	r0, r6
 80007a0:	d160      	bne.n	8000864 <__aeabi_fadd+0x234>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x178>
 80007a6:	e093      	b.n	80008d0 <__aeabi_fadd+0x2a0>
 80007a8:	4652      	mov	r2, sl
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x180>
 80007ae:	e0b6      	b.n	800091e <__aeabi_fadd+0x2ee>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d09c      	beq.n	80006ee <__aeabi_fadd+0xbe>
 80007b4:	1b52      	subs	r2, r2, r5
 80007b6:	0150      	lsls	r0, r2, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x18c>
 80007ba:	e0c3      	b.n	8000944 <__aeabi_fadd+0x314>
 80007bc:	4653      	mov	r3, sl
 80007be:	000c      	movs	r4, r1
 80007c0:	1aea      	subs	r2, r5, r3
 80007c2:	e782      	b.n	80006ca <__aeabi_fadd+0x9a>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d009      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 80007c8:	3901      	subs	r1, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x1a0>
 80007ce:	e08b      	b.n	80008e8 <__aeabi_fadd+0x2b8>
 80007d0:	2fff      	cmp	r7, #255	; 0xff
 80007d2:	d1bc      	bne.n	800074e <__aeabi_fadd+0x11e>
 80007d4:	e7a7      	b.n	8000726 <__aeabi_fadd+0xf6>
 80007d6:	000c      	movs	r4, r1
 80007d8:	4642      	mov	r2, r8
 80007da:	0037      	movs	r7, r6
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d0a2      	beq.n	8000726 <__aeabi_fadd+0xf6>
 80007e0:	0252      	lsls	r2, r2, #9
 80007e2:	0a53      	lsrs	r3, r2, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2fb      	uxtb	r3, r7
 80007e8:	e781      	b.n	80006ee <__aeabi_fadd+0xbe>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	3701      	adds	r7, #1
 80007ee:	4239      	tst	r1, r7
 80007f0:	d165      	bne.n	80008be <__aeabi_fadd+0x28e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17e      	bne.n	80008f4 <__aeabi_fadd+0x2c4>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1cc>
 80007fa:	e0aa      	b.n	8000952 <__aeabi_fadd+0x322>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x1d2>
 8000800:	e775      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000802:	002a      	movs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	2700      	movs	r7, #0
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d502      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <__aeabi_fadd+0x334>)
 800080e:	3701      	adds	r7, #1
 8000810:	401a      	ands	r2, r3
 8000812:	0753      	lsls	r3, r2, #29
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x1e8>
 8000816:	e75a      	b.n	80006ce <__aeabi_fadd+0x9e>
 8000818:	08d2      	lsrs	r2, r2, #3
 800081a:	e7df      	b.n	80007dc <__aeabi_fadd+0x1ac>
 800081c:	2200      	movs	r2, #0
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	4694      	mov	ip, r2
 8000822:	e764      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000824:	2900      	cmp	r1, #0
 8000826:	d0e0      	beq.n	80007ea <__aeabi_fadd+0x1ba>
 8000828:	1bf3      	subs	r3, r6, r7
 800082a:	2f00      	cmp	r7, #0
 800082c:	d03e      	beq.n	80008ac <__aeabi_fadd+0x27c>
 800082e:	2eff      	cmp	r6, #255	; 0xff
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x204>
 8000832:	e777      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0001      	movs	r1, r0
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4311      	orrs	r1, r2
 800083c:	468a      	mov	sl, r1
 800083e:	2201      	movs	r2, #1
 8000840:	2b1b      	cmp	r3, #27
 8000842:	dc08      	bgt.n	8000856 <__aeabi_fadd+0x226>
 8000844:	4652      	mov	r2, sl
 8000846:	2120      	movs	r1, #32
 8000848:	4650      	mov	r0, sl
 800084a:	40da      	lsrs	r2, r3
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	4098      	lsls	r0, r3
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4302      	orrs	r2, r0
 8000856:	0037      	movs	r7, r6
 8000858:	1952      	adds	r2, r2, r5
 800085a:	e784      	b.n	8000766 <__aeabi_fadd+0x136>
 800085c:	4a41      	ldr	r2, [pc, #260]	; (8000964 <__aeabi_fadd+0x334>)
 800085e:	1a3f      	subs	r7, r7, r0
 8000860:	4032      	ands	r2, r6
 8000862:	e732      	b.n	80006ca <__aeabi_fadd+0x9a>
 8000864:	4653      	mov	r3, sl
 8000866:	1b5e      	subs	r6, r3, r5
 8000868:	0173      	lsls	r3, r6, #5
 800086a:	d42d      	bmi.n	80008c8 <__aeabi_fadd+0x298>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fadd+0x242>
 8000870:	e717      	b.n	80006a2 <__aeabi_fadd+0x72>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	2300      	movs	r3, #0
 8000878:	4694      	mov	ip, r2
 800087a:	e738      	b.n	80006ee <__aeabi_fadd+0xbe>
 800087c:	2eff      	cmp	r6, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x252>
 8000880:	e74f      	b.n	8000722 <__aeabi_fadd+0xf2>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4650      	mov	r0, sl
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	4310      	orrs	r0, r2
 800088a:	4682      	mov	sl, r0
 800088c:	2201      	movs	r2, #1
 800088e:	2b1b      	cmp	r3, #27
 8000890:	dc08      	bgt.n	80008a4 <__aeabi_fadd+0x274>
 8000892:	4652      	mov	r2, sl
 8000894:	2420      	movs	r4, #32
 8000896:	4650      	mov	r0, sl
 8000898:	40da      	lsrs	r2, r3
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	4098      	lsls	r0, r3
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4302      	orrs	r2, r0
 80008a4:	000c      	movs	r4, r1
 80008a6:	0037      	movs	r7, r6
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	e6f5      	b.n	8000698 <__aeabi_fadd+0x68>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d093      	beq.n	80007d8 <__aeabi_fadd+0x1a8>
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04f      	beq.n	8000956 <__aeabi_fadd+0x326>
 80008b6:	2eff      	cmp	r6, #255	; 0xff
 80008b8:	d1c1      	bne.n	800083e <__aeabi_fadd+0x20e>
 80008ba:	4642      	mov	r2, r8
 80008bc:	e733      	b.n	8000726 <__aeabi_fadd+0xf6>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d0ac      	beq.n	800081c <__aeabi_fadd+0x1ec>
 80008c2:	4455      	add	r5, sl
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	e7a4      	b.n	8000812 <__aeabi_fadd+0x1e2>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aee      	subs	r6, r5, r3
 80008ce:	e6e8      	b.n	80006a2 <__aeabi_fadd+0x72>
 80008d0:	4653      	mov	r3, sl
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d128      	bne.n	8000928 <__aeabi_fadd+0x2f8>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x2ac>
 80008da:	e722      	b.n	8000722 <__aeabi_fadd+0xf2>
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	469c      	mov	ip, r3
 80008e2:	2400      	movs	r4, #0
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	e702      	b.n	80006ee <__aeabi_fadd+0xbe>
 80008e8:	002a      	movs	r2, r5
 80008ea:	4452      	add	r2, sl
 80008ec:	e73b      	b.n	8000766 <__aeabi_fadd+0x136>
 80008ee:	4653      	mov	r3, sl
 80008f0:	1b5a      	subs	r2, r3, r5
 80008f2:	e6d1      	b.n	8000698 <__aeabi_fadd+0x68>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x2ca>
 80008f8:	e714      	b.n	8000724 <__aeabi_fadd+0xf4>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2d0>
 80008fe:	e712      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	03db      	lsls	r3, r3, #15
 8000904:	421a      	tst	r2, r3
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x2da>
 8000908:	e70d      	b.n	8000726 <__aeabi_fadd+0xf6>
 800090a:	4641      	mov	r1, r8
 800090c:	4219      	tst	r1, r3
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x2e2>
 8000910:	e709      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000912:	4642      	mov	r2, r8
 8000914:	e707      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000916:	000c      	movs	r4, r1
 8000918:	0037      	movs	r7, r6
 800091a:	1aaa      	subs	r2, r5, r2
 800091c:	e6bc      	b.n	8000698 <__aeabi_fadd+0x68>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d013      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000922:	000c      	movs	r4, r1
 8000924:	46c4      	mov	ip, r8
 8000926:	e6e2      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2fe>
 800092c:	e6fb      	b.n	8000726 <__aeabi_fadd+0xf6>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	03db      	lsls	r3, r3, #15
 8000932:	421a      	tst	r2, r3
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x308>
 8000936:	e6f6      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000938:	4640      	mov	r0, r8
 800093a:	4218      	tst	r0, r3
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x310>
 800093e:	e6f2      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000940:	000c      	movs	r4, r1
 8000942:	e6ef      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000944:	2a00      	cmp	r2, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000948:	e763      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	4694      	mov	ip, r2
 8000950:	e6cd      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000952:	46c4      	mov	ip, r8
 8000954:	e6cb      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000956:	002a      	movs	r2, r5
 8000958:	0037      	movs	r7, r6
 800095a:	4452      	add	r2, sl
 800095c:	e703      	b.n	8000766 <__aeabi_fadd+0x136>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fsub>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	4646      	mov	r6, r8
 800096c:	46d6      	mov	lr, sl
 800096e:	464f      	mov	r7, r9
 8000970:	0243      	lsls	r3, r0, #9
 8000972:	0a5b      	lsrs	r3, r3, #9
 8000974:	00da      	lsls	r2, r3, #3
 8000976:	4694      	mov	ip, r2
 8000978:	024a      	lsls	r2, r1, #9
 800097a:	b5c0      	push	{r6, r7, lr}
 800097c:	0044      	lsls	r4, r0, #1
 800097e:	0a56      	lsrs	r6, r2, #9
 8000980:	1c05      	adds	r5, r0, #0
 8000982:	46b0      	mov	r8, r6
 8000984:	0e24      	lsrs	r4, r4, #24
 8000986:	004e      	lsls	r6, r1, #1
 8000988:	0992      	lsrs	r2, r2, #6
 800098a:	001f      	movs	r7, r3
 800098c:	0020      	movs	r0, r4
 800098e:	4692      	mov	sl, r2
 8000990:	0fed      	lsrs	r5, r5, #31
 8000992:	0e36      	lsrs	r6, r6, #24
 8000994:	0fc9      	lsrs	r1, r1, #31
 8000996:	2eff      	cmp	r6, #255	; 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x34>
 800099a:	e07f      	b.n	8000a9c <__aeabi_fsub+0x134>
 800099c:	2201      	movs	r2, #1
 800099e:	4051      	eors	r1, r2
 80009a0:	428d      	cmp	r5, r1
 80009a2:	d051      	beq.n	8000a48 <__aeabi_fsub+0xe0>
 80009a4:	1ba2      	subs	r2, r4, r6
 80009a6:	4691      	mov	r9, r2
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	dc00      	bgt.n	80009ae <__aeabi_fsub+0x46>
 80009ac:	e07e      	b.n	8000aac <__aeabi_fsub+0x144>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x4c>
 80009b2:	e099      	b.n	8000ae8 <__aeabi_fsub+0x180>
 80009b4:	2cff      	cmp	r4, #255	; 0xff
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x52>
 80009b8:	e08c      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	4652      	mov	r2, sl
 80009be:	04db      	lsls	r3, r3, #19
 80009c0:	431a      	orrs	r2, r3
 80009c2:	4692      	mov	sl, r2
 80009c4:	464a      	mov	r2, r9
 80009c6:	2301      	movs	r3, #1
 80009c8:	2a1b      	cmp	r2, #27
 80009ca:	dc08      	bgt.n	80009de <__aeabi_fsub+0x76>
 80009cc:	4653      	mov	r3, sl
 80009ce:	2120      	movs	r1, #32
 80009d0:	40d3      	lsrs	r3, r2
 80009d2:	1a89      	subs	r1, r1, r2
 80009d4:	4652      	mov	r2, sl
 80009d6:	408a      	lsls	r2, r1
 80009d8:	1e51      	subs	r1, r2, #1
 80009da:	418a      	sbcs	r2, r1
 80009dc:	4313      	orrs	r3, r2
 80009de:	4662      	mov	r2, ip
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	015a      	lsls	r2, r3, #5
 80009e4:	d400      	bmi.n	80009e8 <__aeabi_fsub+0x80>
 80009e6:	e0f3      	b.n	8000bd0 <__aeabi_fsub+0x268>
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	099e      	lsrs	r6, r3, #6
 80009ec:	0030      	movs	r0, r6
 80009ee:	f000 f9e9 	bl	8000dc4 <__clzsi2>
 80009f2:	3805      	subs	r0, #5
 80009f4:	4086      	lsls	r6, r0
 80009f6:	4284      	cmp	r4, r0
 80009f8:	dd00      	ble.n	80009fc <__aeabi_fsub+0x94>
 80009fa:	e0f7      	b.n	8000bec <__aeabi_fsub+0x284>
 80009fc:	0032      	movs	r2, r6
 80009fe:	1b04      	subs	r4, r0, r4
 8000a00:	2020      	movs	r0, #32
 8000a02:	3401      	adds	r4, #1
 8000a04:	40e2      	lsrs	r2, r4
 8000a06:	1b04      	subs	r4, r0, r4
 8000a08:	40a6      	lsls	r6, r4
 8000a0a:	0033      	movs	r3, r6
 8000a0c:	1e5e      	subs	r6, r3, #1
 8000a0e:	41b3      	sbcs	r3, r6
 8000a10:	2400      	movs	r4, #0
 8000a12:	4313      	orrs	r3, r2
 8000a14:	075a      	lsls	r2, r3, #29
 8000a16:	d004      	beq.n	8000a22 <__aeabi_fsub+0xba>
 8000a18:	220f      	movs	r2, #15
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	2a04      	cmp	r2, #4
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0xba>
 8000a20:	3304      	adds	r3, #4
 8000a22:	015a      	lsls	r2, r3, #5
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_fsub+0xc0>
 8000a26:	e0d6      	b.n	8000bd6 <__aeabi_fsub+0x26e>
 8000a28:	1c62      	adds	r2, r4, #1
 8000a2a:	2cfe      	cmp	r4, #254	; 0xfe
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0xc8>
 8000a2e:	e0da      	b.n	8000be6 <__aeabi_fsub+0x27e>
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	0a5f      	lsrs	r7, r3, #9
 8000a34:	b2d0      	uxtb	r0, r2
 8000a36:	05c0      	lsls	r0, r0, #23
 8000a38:	4338      	orrs	r0, r7
 8000a3a:	07ed      	lsls	r5, r5, #31
 8000a3c:	4328      	orrs	r0, r5
 8000a3e:	bce0      	pop	{r5, r6, r7}
 8000a40:	46ba      	mov	sl, r7
 8000a42:	46b1      	mov	r9, r6
 8000a44:	46a8      	mov	r8, r5
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	1ba2      	subs	r2, r4, r6
 8000a4a:	4691      	mov	r9, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	dd63      	ble.n	8000b18 <__aeabi_fsub+0x1b0>
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0xee>
 8000a54:	e099      	b.n	8000b8a <__aeabi_fsub+0x222>
 8000a56:	2cff      	cmp	r4, #255	; 0xff
 8000a58:	d03c      	beq.n	8000ad4 <__aeabi_fsub+0x16c>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	4652      	mov	r2, sl
 8000a5e:	04db      	lsls	r3, r3, #19
 8000a60:	431a      	orrs	r2, r3
 8000a62:	4692      	mov	sl, r2
 8000a64:	464a      	mov	r2, r9
 8000a66:	2301      	movs	r3, #1
 8000a68:	2a1b      	cmp	r2, #27
 8000a6a:	dc08      	bgt.n	8000a7e <__aeabi_fsub+0x116>
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2120      	movs	r1, #32
 8000a70:	40d3      	lsrs	r3, r2
 8000a72:	1a89      	subs	r1, r1, r2
 8000a74:	4652      	mov	r2, sl
 8000a76:	408a      	lsls	r2, r1
 8000a78:	1e51      	subs	r1, r2, #1
 8000a7a:	418a      	sbcs	r2, r1
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	4463      	add	r3, ip
 8000a80:	015a      	lsls	r2, r3, #5
 8000a82:	d400      	bmi.n	8000a86 <__aeabi_fsub+0x11e>
 8000a84:	e0a4      	b.n	8000bd0 <__aeabi_fsub+0x268>
 8000a86:	3401      	adds	r4, #1
 8000a88:	2cff      	cmp	r4, #255	; 0xff
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x126>
 8000a8c:	e0ab      	b.n	8000be6 <__aeabi_fsub+0x27e>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4997      	ldr	r1, [pc, #604]	; (8000cf0 <__aeabi_fsub+0x388>)
 8000a92:	401a      	ands	r2, r3
 8000a94:	085b      	lsrs	r3, r3, #1
 8000a96:	400b      	ands	r3, r1
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	e7bb      	b.n	8000a14 <__aeabi_fsub+0xac>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d032      	beq.n	8000b06 <__aeabi_fsub+0x19e>
 8000aa0:	428d      	cmp	r5, r1
 8000aa2:	d035      	beq.n	8000b10 <__aeabi_fsub+0x1a8>
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	4252      	negs	r2, r2
 8000aa8:	4691      	mov	r9, r2
 8000aaa:	44a1      	add	r9, r4
 8000aac:	464a      	mov	r2, r9
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d051      	beq.n	8000b56 <__aeabi_fsub+0x1ee>
 8000ab2:	1b30      	subs	r0, r6, r4
 8000ab4:	2c00      	cmp	r4, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x152>
 8000ab8:	e09c      	b.n	8000bf4 <__aeabi_fsub+0x28c>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x15a>
 8000ac0:	e0df      	b.n	8000c82 <__aeabi_fsub+0x31a>
 8000ac2:	3801      	subs	r0, #1
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x162>
 8000ac8:	e0f7      	b.n	8000cba <__aeabi_fsub+0x352>
 8000aca:	2eff      	cmp	r6, #255	; 0xff
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fsub+0x168>
 8000ace:	e099      	b.n	8000c04 <__aeabi_fsub+0x29c>
 8000ad0:	000d      	movs	r5, r1
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fsub+0x172>
 8000ad8:	e085      	b.n	8000be6 <__aeabi_fsub+0x27e>
 8000ada:	2780      	movs	r7, #128	; 0x80
 8000adc:	03ff      	lsls	r7, r7, #15
 8000ade:	431f      	orrs	r7, r3
 8000ae0:	027f      	lsls	r7, r7, #9
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	0a7f      	lsrs	r7, r7, #9
 8000ae6:	e7a6      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000ae8:	4652      	mov	r2, sl
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d074      	beq.n	8000bd8 <__aeabi_fsub+0x270>
 8000aee:	2201      	movs	r2, #1
 8000af0:	4252      	negs	r2, r2
 8000af2:	4690      	mov	r8, r2
 8000af4:	44c1      	add	r9, r8
 8000af6:	464a      	mov	r2, r9
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_fsub+0x196>
 8000afc:	e0c8      	b.n	8000c90 <__aeabi_fsub+0x328>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fsub+0x19c>
 8000b02:	e75f      	b.n	80009c4 <__aeabi_fsub+0x5c>
 8000b04:	e7e6      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000b06:	2201      	movs	r2, #1
 8000b08:	4051      	eors	r1, r2
 8000b0a:	42a9      	cmp	r1, r5
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x1a8>
 8000b0e:	e749      	b.n	80009a4 <__aeabi_fsub+0x3c>
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	4252      	negs	r2, r2
 8000b14:	4691      	mov	r9, r2
 8000b16:	44a1      	add	r9, r4
 8000b18:	464a      	mov	r2, r9
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d043      	beq.n	8000ba6 <__aeabi_fsub+0x23e>
 8000b1e:	1b31      	subs	r1, r6, r4
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fsub+0x1be>
 8000b24:	e08c      	b.n	8000c40 <__aeabi_fsub+0x2d8>
 8000b26:	2eff      	cmp	r6, #255	; 0xff
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x1c4>
 8000b2a:	e092      	b.n	8000c52 <__aeabi_fsub+0x2ea>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	4662      	mov	r2, ip
 8000b30:	04db      	lsls	r3, r3, #19
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4694      	mov	ip, r2
 8000b36:	2301      	movs	r3, #1
 8000b38:	291b      	cmp	r1, #27
 8000b3a:	dc09      	bgt.n	8000b50 <__aeabi_fsub+0x1e8>
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	4663      	mov	r3, ip
 8000b40:	4662      	mov	r2, ip
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	1a41      	subs	r1, r0, r1
 8000b46:	408a      	lsls	r2, r1
 8000b48:	0011      	movs	r1, r2
 8000b4a:	1e48      	subs	r0, r1, #1
 8000b4c:	4181      	sbcs	r1, r0
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	0034      	movs	r4, r6
 8000b52:	4453      	add	r3, sl
 8000b54:	e794      	b.n	8000a80 <__aeabi_fsub+0x118>
 8000b56:	22fe      	movs	r2, #254	; 0xfe
 8000b58:	1c66      	adds	r6, r4, #1
 8000b5a:	4232      	tst	r2, r6
 8000b5c:	d164      	bne.n	8000c28 <__aeabi_fsub+0x2c0>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fsub+0x1fc>
 8000b62:	e082      	b.n	8000c6a <__aeabi_fsub+0x302>
 8000b64:	4663      	mov	r3, ip
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x204>
 8000b6a:	e0ab      	b.n	8000cc4 <__aeabi_fsub+0x35c>
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_fsub+0x20c>
 8000b72:	e760      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000b74:	4663      	mov	r3, ip
 8000b76:	4652      	mov	r2, sl
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	015a      	lsls	r2, r3, #5
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_fsub+0x218>
 8000b7e:	e0aa      	b.n	8000cd6 <__aeabi_fsub+0x36e>
 8000b80:	4663      	mov	r3, ip
 8000b82:	4652      	mov	r2, sl
 8000b84:	000d      	movs	r5, r1
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	e744      	b.n	8000a14 <__aeabi_fsub+0xac>
 8000b8a:	4652      	mov	r2, sl
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d023      	beq.n	8000bd8 <__aeabi_fsub+0x270>
 8000b90:	2201      	movs	r2, #1
 8000b92:	4252      	negs	r2, r2
 8000b94:	4690      	mov	r8, r2
 8000b96:	44c1      	add	r9, r8
 8000b98:	464a      	mov	r2, r9
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d075      	beq.n	8000c8a <__aeabi_fsub+0x322>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fsub+0x23c>
 8000ba2:	e75f      	b.n	8000a64 <__aeabi_fsub+0xfc>
 8000ba4:	e796      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000ba6:	26fe      	movs	r6, #254	; 0xfe
 8000ba8:	3401      	adds	r4, #1
 8000baa:	4226      	tst	r6, r4
 8000bac:	d153      	bne.n	8000c56 <__aeabi_fsub+0x2ee>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d172      	bne.n	8000c98 <__aeabi_fsub+0x330>
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x252>
 8000bb8:	e093      	b.n	8000ce2 <__aeabi_fsub+0x37a>
 8000bba:	4653      	mov	r3, sl
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x25a>
 8000bc0:	e739      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	015a      	lsls	r2, r3, #5
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_fsub+0x268>
 8000bca:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <__aeabi_fsub+0x38c>)
 8000bcc:	3401      	adds	r4, #1
 8000bce:	4013      	ands	r3, r2
 8000bd0:	075a      	lsls	r2, r3, #29
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fsub+0x26e>
 8000bd4:	e720      	b.n	8000a18 <__aeabi_fsub+0xb0>
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	2cff      	cmp	r4, #255	; 0xff
 8000bda:	d100      	bne.n	8000bde <__aeabi_fsub+0x276>
 8000bdc:	e77a      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000bde:	025b      	lsls	r3, r3, #9
 8000be0:	0a5f      	lsrs	r7, r3, #9
 8000be2:	b2e0      	uxtb	r0, r4
 8000be4:	e727      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000be6:	20ff      	movs	r0, #255	; 0xff
 8000be8:	2700      	movs	r7, #0
 8000bea:	e724      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <__aeabi_fsub+0x38c>)
 8000bee:	1a24      	subs	r4, r4, r0
 8000bf0:	4033      	ands	r3, r6
 8000bf2:	e70f      	b.n	8000a14 <__aeabi_fsub+0xac>
 8000bf4:	2eff      	cmp	r6, #255	; 0xff
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x292>
 8000bf8:	e76a      	b.n	8000ad0 <__aeabi_fsub+0x168>
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	4662      	mov	r2, ip
 8000bfe:	04db      	lsls	r3, r3, #19
 8000c00:	431a      	orrs	r2, r3
 8000c02:	4694      	mov	ip, r2
 8000c04:	2301      	movs	r3, #1
 8000c06:	281b      	cmp	r0, #27
 8000c08:	dc09      	bgt.n	8000c1e <__aeabi_fsub+0x2b6>
 8000c0a:	2420      	movs	r4, #32
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	4662      	mov	r2, ip
 8000c10:	40c3      	lsrs	r3, r0
 8000c12:	1a20      	subs	r0, r4, r0
 8000c14:	4082      	lsls	r2, r0
 8000c16:	0010      	movs	r0, r2
 8000c18:	1e44      	subs	r4, r0, #1
 8000c1a:	41a0      	sbcs	r0, r4
 8000c1c:	4303      	orrs	r3, r0
 8000c1e:	4652      	mov	r2, sl
 8000c20:	000d      	movs	r5, r1
 8000c22:	0034      	movs	r4, r6
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	e6dc      	b.n	80009e2 <__aeabi_fsub+0x7a>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	4652      	mov	r2, sl
 8000c2c:	1a9e      	subs	r6, r3, r2
 8000c2e:	0173      	lsls	r3, r6, #5
 8000c30:	d417      	bmi.n	8000c62 <__aeabi_fsub+0x2fa>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fsub+0x2d0>
 8000c36:	e6d9      	b.n	80009ec <__aeabi_fsub+0x84>
 8000c38:	2500      	movs	r5, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e6fa      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000c40:	4663      	mov	r3, ip
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d044      	beq.n	8000cd0 <__aeabi_fsub+0x368>
 8000c46:	3901      	subs	r1, #1
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d04c      	beq.n	8000ce6 <__aeabi_fsub+0x37e>
 8000c4c:	2eff      	cmp	r6, #255	; 0xff
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_fsub+0x2ea>
 8000c50:	e771      	b.n	8000b36 <__aeabi_fsub+0x1ce>
 8000c52:	4643      	mov	r3, r8
 8000c54:	e73e      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000c56:	2cff      	cmp	r4, #255	; 0xff
 8000c58:	d0c5      	beq.n	8000be6 <__aeabi_fsub+0x27e>
 8000c5a:	4652      	mov	r2, sl
 8000c5c:	4462      	add	r2, ip
 8000c5e:	0853      	lsrs	r3, r2, #1
 8000c60:	e7b6      	b.n	8000bd0 <__aeabi_fsub+0x268>
 8000c62:	4663      	mov	r3, ip
 8000c64:	000d      	movs	r5, r1
 8000c66:	1ad6      	subs	r6, r2, r3
 8000c68:	e6c0      	b.n	80009ec <__aeabi_fsub+0x84>
 8000c6a:	4662      	mov	r2, ip
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d116      	bne.n	8000c9e <__aeabi_fsub+0x336>
 8000c70:	4653      	mov	r3, sl
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_fsub+0x310>
 8000c76:	e72b      	b.n	8000ad0 <__aeabi_fsub+0x168>
 8000c78:	2780      	movs	r7, #128	; 0x80
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	20ff      	movs	r0, #255	; 0xff
 8000c7e:	03ff      	lsls	r7, r7, #15
 8000c80:	e6d9      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000c82:	000d      	movs	r5, r1
 8000c84:	4643      	mov	r3, r8
 8000c86:	0034      	movs	r4, r6
 8000c88:	e7a6      	b.n	8000bd8 <__aeabi_fsub+0x270>
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	4463      	add	r3, ip
 8000c8e:	e6f7      	b.n	8000a80 <__aeabi_fsub+0x118>
 8000c90:	4663      	mov	r3, ip
 8000c92:	4652      	mov	r2, sl
 8000c94:	1a9b      	subs	r3, r3, r2
 8000c96:	e6a4      	b.n	80009e2 <__aeabi_fsub+0x7a>
 8000c98:	4662      	mov	r2, ip
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d0d9      	beq.n	8000c52 <__aeabi_fsub+0x2ea>
 8000c9e:	4652      	mov	r2, sl
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x33e>
 8000ca4:	e716      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	03d2      	lsls	r2, r2, #15
 8000caa:	4213      	tst	r3, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x348>
 8000cae:	e711      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000cb0:	4640      	mov	r0, r8
 8000cb2:	4210      	tst	r0, r2
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fsub+0x350>
 8000cb6:	e70d      	b.n	8000ad4 <__aeabi_fsub+0x16c>
 8000cb8:	e70a      	b.n	8000ad0 <__aeabi_fsub+0x168>
 8000cba:	4652      	mov	r2, sl
 8000cbc:	000d      	movs	r5, r1
 8000cbe:	0034      	movs	r4, r6
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	e68e      	b.n	80009e2 <__aeabi_fsub+0x7a>
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <__aeabi_fsub+0x374>
 8000cca:	000d      	movs	r5, r1
 8000ccc:	4647      	mov	r7, r8
 8000cce:	e6b2      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	0034      	movs	r4, r6
 8000cd4:	e780      	b.n	8000bd8 <__aeabi_fsub+0x270>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_fsub+0x374>
 8000cda:	e779      	b.n	8000bd0 <__aeabi_fsub+0x268>
 8000cdc:	2500      	movs	r5, #0
 8000cde:	2700      	movs	r7, #0
 8000ce0:	e6a9      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000ce2:	4647      	mov	r7, r8
 8000ce4:	e6a7      	b.n	8000a36 <__aeabi_fsub+0xce>
 8000ce6:	4653      	mov	r3, sl
 8000ce8:	0034      	movs	r4, r6
 8000cea:	4463      	add	r3, ip
 8000cec:	e6c8      	b.n	8000a80 <__aeabi_fsub+0x118>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	7dffffff 	.word	0x7dffffff
 8000cf4:	fbffffff 	.word	0xfbffffff

08000cf8 <__aeabi_f2iz>:
 8000cf8:	0241      	lsls	r1, r0, #9
 8000cfa:	0042      	lsls	r2, r0, #1
 8000cfc:	0fc3      	lsrs	r3, r0, #31
 8000cfe:	0a49      	lsrs	r1, r1, #9
 8000d00:	2000      	movs	r0, #0
 8000d02:	0e12      	lsrs	r2, r2, #24
 8000d04:	2a7e      	cmp	r2, #126	; 0x7e
 8000d06:	d903      	bls.n	8000d10 <__aeabi_f2iz+0x18>
 8000d08:	2a9d      	cmp	r2, #157	; 0x9d
 8000d0a:	d902      	bls.n	8000d12 <__aeabi_f2iz+0x1a>
 8000d0c:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <__aeabi_f2iz+0x3c>)
 8000d0e:	1898      	adds	r0, r3, r2
 8000d10:	4770      	bx	lr
 8000d12:	2080      	movs	r0, #128	; 0x80
 8000d14:	0400      	lsls	r0, r0, #16
 8000d16:	4301      	orrs	r1, r0
 8000d18:	2a95      	cmp	r2, #149	; 0x95
 8000d1a:	dc07      	bgt.n	8000d2c <__aeabi_f2iz+0x34>
 8000d1c:	2096      	movs	r0, #150	; 0x96
 8000d1e:	1a82      	subs	r2, r0, r2
 8000d20:	40d1      	lsrs	r1, r2
 8000d22:	4248      	negs	r0, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f3      	bne.n	8000d10 <__aeabi_f2iz+0x18>
 8000d28:	0008      	movs	r0, r1
 8000d2a:	e7f1      	b.n	8000d10 <__aeabi_f2iz+0x18>
 8000d2c:	3a96      	subs	r2, #150	; 0x96
 8000d2e:	4091      	lsls	r1, r2
 8000d30:	e7f7      	b.n	8000d22 <__aeabi_f2iz+0x2a>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	7fffffff 	.word	0x7fffffff

08000d38 <__aeabi_i2f>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d013      	beq.n	8000d66 <__aeabi_i2f+0x2e>
 8000d3e:	17c3      	asrs	r3, r0, #31
 8000d40:	18c5      	adds	r5, r0, r3
 8000d42:	405d      	eors	r5, r3
 8000d44:	0fc4      	lsrs	r4, r0, #31
 8000d46:	0028      	movs	r0, r5
 8000d48:	f000 f83c 	bl	8000dc4 <__clzsi2>
 8000d4c:	239e      	movs	r3, #158	; 0x9e
 8000d4e:	0001      	movs	r1, r0
 8000d50:	1a1b      	subs	r3, r3, r0
 8000d52:	2b96      	cmp	r3, #150	; 0x96
 8000d54:	dc0f      	bgt.n	8000d76 <__aeabi_i2f+0x3e>
 8000d56:	2808      	cmp	r0, #8
 8000d58:	dd01      	ble.n	8000d5e <__aeabi_i2f+0x26>
 8000d5a:	3908      	subs	r1, #8
 8000d5c:	408d      	lsls	r5, r1
 8000d5e:	026d      	lsls	r5, r5, #9
 8000d60:	0a6d      	lsrs	r5, r5, #9
 8000d62:	b2d8      	uxtb	r0, r3
 8000d64:	e002      	b.n	8000d6c <__aeabi_i2f+0x34>
 8000d66:	2400      	movs	r4, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	2500      	movs	r5, #0
 8000d6c:	05c0      	lsls	r0, r0, #23
 8000d6e:	4328      	orrs	r0, r5
 8000d70:	07e4      	lsls	r4, r4, #31
 8000d72:	4320      	orrs	r0, r4
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
 8000d76:	2b99      	cmp	r3, #153	; 0x99
 8000d78:	dd0b      	ble.n	8000d92 <__aeabi_i2f+0x5a>
 8000d7a:	2205      	movs	r2, #5
 8000d7c:	002e      	movs	r6, r5
 8000d7e:	1a12      	subs	r2, r2, r0
 8000d80:	40d6      	lsrs	r6, r2
 8000d82:	0002      	movs	r2, r0
 8000d84:	321b      	adds	r2, #27
 8000d86:	4095      	lsls	r5, r2
 8000d88:	0028      	movs	r0, r5
 8000d8a:	1e45      	subs	r5, r0, #1
 8000d8c:	41a8      	sbcs	r0, r5
 8000d8e:	0035      	movs	r5, r6
 8000d90:	4305      	orrs	r5, r0
 8000d92:	2905      	cmp	r1, #5
 8000d94:	dd01      	ble.n	8000d9a <__aeabi_i2f+0x62>
 8000d96:	1f4a      	subs	r2, r1, #5
 8000d98:	4095      	lsls	r5, r2
 8000d9a:	002a      	movs	r2, r5
 8000d9c:	4e08      	ldr	r6, [pc, #32]	; (8000dc0 <__aeabi_i2f+0x88>)
 8000d9e:	4032      	ands	r2, r6
 8000da0:	0768      	lsls	r0, r5, #29
 8000da2:	d009      	beq.n	8000db8 <__aeabi_i2f+0x80>
 8000da4:	200f      	movs	r0, #15
 8000da6:	4028      	ands	r0, r5
 8000da8:	2804      	cmp	r0, #4
 8000daa:	d005      	beq.n	8000db8 <__aeabi_i2f+0x80>
 8000dac:	3204      	adds	r2, #4
 8000dae:	0150      	lsls	r0, r2, #5
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_i2f+0x80>
 8000db2:	239f      	movs	r3, #159	; 0x9f
 8000db4:	4032      	ands	r2, r6
 8000db6:	1a5b      	subs	r3, r3, r1
 8000db8:	0192      	lsls	r2, r2, #6
 8000dba:	0a55      	lsrs	r5, r2, #9
 8000dbc:	b2d8      	uxtb	r0, r3
 8000dbe:	e7d5      	b.n	8000d6c <__aeabi_i2f+0x34>
 8000dc0:	fbffffff 	.word	0xfbffffff

08000dc4 <__clzsi2>:
 8000dc4:	211c      	movs	r1, #28
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	041b      	lsls	r3, r3, #16
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d301      	bcc.n	8000dd2 <__clzsi2+0xe>
 8000dce:	0c00      	lsrs	r0, r0, #16
 8000dd0:	3910      	subs	r1, #16
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d301      	bcc.n	8000ddc <__clzsi2+0x18>
 8000dd8:	0a00      	lsrs	r0, r0, #8
 8000dda:	3908      	subs	r1, #8
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0x22>
 8000de2:	0900      	lsrs	r0, r0, #4
 8000de4:	3904      	subs	r1, #4
 8000de6:	a202      	add	r2, pc, #8	; (adr r2, 8000df0 <__clzsi2+0x2c>)
 8000de8:	5c10      	ldrb	r0, [r2, r0]
 8000dea:	1840      	adds	r0, r0, r1
 8000dec:	4770      	bx	lr
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	02020304 	.word	0x02020304
 8000df4:	01010101 	.word	0x01010101
	...

08000e00 <__clzdi2>:
 8000e00:	b510      	push	{r4, lr}
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d103      	bne.n	8000e0e <__clzdi2+0xe>
 8000e06:	f7ff ffdd 	bl	8000dc4 <__clzsi2>
 8000e0a:	3020      	adds	r0, #32
 8000e0c:	e002      	b.n	8000e14 <__clzdi2+0x14>
 8000e0e:	1c08      	adds	r0, r1, #0
 8000e10:	f7ff ffd8 	bl	8000dc4 <__clzsi2>
 8000e14:	bd10      	pop	{r4, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)

08000e18 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	003b      	movs	r3, r7
 8000e20:	0018      	movs	r0, r3
 8000e22:	2308      	movs	r3, #8
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f006 f956 	bl	80070d8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <MX_ADC_Init+0xc0>)
 8000e30:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e58:	2220      	movs	r2, #32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e60:	2221      	movs	r2, #33	; 0x21
 8000e62:	2100      	movs	r1, #0
 8000e64:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e6e:	22c2      	movs	r2, #194	; 0xc2
 8000e70:	32ff      	adds	r2, #255	; 0xff
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e76:	222c      	movs	r2, #44	; 0x2c
 8000e78:	2100      	movs	r1, #0
 8000e7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f002 f9a9 	bl	80031f4 <HAL_ADC_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8000ea6:	f001 fe57 	bl	8002b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <MX_ADC_Init+0xc4>)
 8000eae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0152      	lsls	r2, r2, #5
 8000eb6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb8:	003a      	movs	r2, r7
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_ADC_Init+0xbc>)
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fba6 	bl	8003610 <HAL_ADC_ConfigChannel>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8000ec8:	f001 fe46 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001b8 	.word	0x200001b8
 8000ed8:	40012400 	.word	0x40012400
 8000edc:	1c000080 	.word	0x1c000080

08000ee0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	240c      	movs	r4, #12
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f006 f8f0 	bl	80070d8 <memset>
  if(adcHandle->Instance==ADC1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <HAL_ADC_MspInit+0xc8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d14d      	bne.n	8000f9e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_ADC_MspInit+0xcc>)
 8000f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_ADC_MspInit+0xcc>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	0089      	lsls	r1, r1, #2
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_ADC_MspInit+0xcc>)
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <HAL_ADC_MspInit+0xcc>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_ADC_MspInit+0xcc>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2203      	movs	r2, #3
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	193a      	adds	r2, r7, r4
 8000f3c:	23a0      	movs	r3, #160	; 0xa0
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 ff8e 	bl	8003e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <HAL_ADC_MspInit+0xd4>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_DISABLE;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f78:	2220      	movs	r2, #32
 8000f7a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f002 fdb3 	bl	8003af0 <HAL_DMA_Init>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000f8e:	f001 fde3 	bl	8002b58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_ADC_MspInit+0xd0>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b009      	add	sp, #36	; 0x24
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	40012400 	.word	0x40012400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	20000170 	.word	0x20000170
 8000fb4:	40020008 	.word	0x40020008

08000fb8 <BLE_Init>:
	HAL_UART_Receive_IT(&huart1, rx_buffer, 3);
}


void BLE_Init()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af02      	add	r7, sp, #8
	setup_gpio(GPIOA, 6, output, 0, 0);
 8000fbe:	23a0      	movs	r3, #160	; 0xa0
 8000fc0:	05d8      	lsls	r0, r3, #23
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2106      	movs	r1, #6
 8000fcc:	f001 fa4c 	bl	8002468 <setup_gpio>
	setup_gpio(GPIOA, 8, output, 0, 0);
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05d8      	lsls	r0, r3, #23
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2108      	movs	r1, #8
 8000fde:	f001 fa43 	bl	8002468 <setup_gpio>
	toggle_off(GPIOA, 6);
 8000fe2:	23a0      	movs	r3, #160	; 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	2106      	movs	r1, #6
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f001 fc31 	bl	8002850 <toggle_off>
	HAL_Delay(2000);
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 f8da 	bl	80031ac <HAL_Delay>
	toggle_off(GPIOA, 8);
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fc26 	bl	8002850 <toggle_off>
	HAL_Delay(2000);
 8001004:	23fa      	movs	r3, #250	; 0xfa
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	0018      	movs	r0, r3
 800100a:	f002 f8cf 	bl	80031ac <HAL_Delay>
	toggle_on(GPIOA, 6);
 800100e:	23a0      	movs	r3, #160	; 0xa0
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	2106      	movs	r1, #6
 8001014:	0018      	movs	r0, r3
 8001016:	f001 fc09 	bl	800282c <toggle_on>
	HAL_Delay(1000);
 800101a:	23fa      	movs	r3, #250	; 0xfa
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	0018      	movs	r0, r3
 8001020:	f002 f8c4 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8001024:	493c      	ldr	r1, [pc, #240]	; (8001118 <BLE_Init+0x160>)
 8001026:	483d      	ldr	r0, [pc, #244]	; (800111c <BLE_Init+0x164>)
 8001028:	230a      	movs	r3, #10
 800102a:	2205      	movs	r2, #5
 800102c:	f005 fb04 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001030:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <BLE_Init+0x168>)
 8001032:	0018      	movs	r0, r3
 8001034:	f002 f8ba 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset, 6, 10);
 8001038:	493a      	ldr	r1, [pc, #232]	; (8001124 <BLE_Init+0x16c>)
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <BLE_Init+0x164>)
 800103c:	230a      	movs	r3, #10
 800103e:	2206      	movs	r2, #6
 8001040:	f005 fafa 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001044:	23fa      	movs	r3, #250	; 0xfa
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	0018      	movs	r0, r3
 800104a:	f002 f8af 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset2, 4, 10);
 800104e:	4936      	ldr	r1, [pc, #216]	; (8001128 <BLE_Init+0x170>)
 8001050:	4832      	ldr	r0, [pc, #200]	; (800111c <BLE_Init+0x164>)
 8001052:	230a      	movs	r3, #10
 8001054:	2204      	movs	r2, #4
 8001056:	f005 faef 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800105a:	23fa      	movs	r3, #250	; 0xfa
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	0018      	movs	r0, r3
 8001060:	f002 f8a4 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8001064:	492c      	ldr	r1, [pc, #176]	; (8001118 <BLE_Init+0x160>)
 8001066:	482d      	ldr	r0, [pc, #180]	; (800111c <BLE_Init+0x164>)
 8001068:	230a      	movs	r3, #10
 800106a:	2205      	movs	r2, #5
 800106c:	f005 fae4 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <BLE_Init+0x168>)
 8001072:	0018      	movs	r0, r3
 8001074:	f002 f89a 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config2, 13, 10);
 8001078:	492c      	ldr	r1, [pc, #176]	; (800112c <BLE_Init+0x174>)
 800107a:	4828      	ldr	r0, [pc, #160]	; (800111c <BLE_Init+0x164>)
 800107c:	230a      	movs	r3, #10
 800107e:	220d      	movs	r2, #13
 8001080:	f005 fada 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001084:	23fa      	movs	r3, #250	; 0xfa
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	0018      	movs	r0, r3
 800108a:	f002 f88f 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config1, 13, 10);
 800108e:	4928      	ldr	r1, [pc, #160]	; (8001130 <BLE_Init+0x178>)
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <BLE_Init+0x164>)
 8001092:	230a      	movs	r3, #10
 8001094:	220d      	movs	r2, #13
 8001096:	f005 facf 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800109a:	23fa      	movs	r3, #250	; 0xfa
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 f884 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)name, 10, 10);
 80010a4:	4923      	ldr	r1, [pc, #140]	; (8001134 <BLE_Init+0x17c>)
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <BLE_Init+0x164>)
 80010a8:	230a      	movs	r3, #10
 80010aa:	220a      	movs	r2, #10
 80010ac:	f005 fac4 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80010b0:	23fa      	movs	r3, #250	; 0xfa
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 f879 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Service, 37, 10);
 80010ba:	491f      	ldr	r1, [pc, #124]	; (8001138 <BLE_Init+0x180>)
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <BLE_Init+0x164>)
 80010be:	230a      	movs	r3, #10
 80010c0:	2225      	movs	r2, #37	; 0x25
 80010c2:	f005 fab9 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80010c6:	23fa      	movs	r3, #250	; 0xfa
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f002 f86e 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Characteristic1, 43, 10);
 80010d0:	491a      	ldr	r1, [pc, #104]	; (800113c <BLE_Init+0x184>)
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <BLE_Init+0x164>)
 80010d4:	230a      	movs	r3, #10
 80010d6:	222b      	movs	r2, #43	; 0x2b
 80010d8:	f005 faae 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80010dc:	23fa      	movs	r3, #250	; 0xfa
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 f863 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Characteristic2, 43, 10);
 80010e6:	4916      	ldr	r1, [pc, #88]	; (8001140 <BLE_Init+0x188>)
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <BLE_Init+0x164>)
 80010ea:	230a      	movs	r3, #10
 80010ec:	222b      	movs	r2, #43	; 0x2b
 80010ee:	f005 faa3 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80010f2:	23fa      	movs	r3, #250	; 0xfa
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 f858 	bl	80031ac <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <BLE_Init+0x160>)
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <BLE_Init+0x164>)
 8001100:	230a      	movs	r3, #10
 8001102:	2205      	movs	r2, #5
 8001104:	f005 fa98 	bl	8006638 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <BLE_Init+0x168>)
 800110a:	0018      	movs	r0, r3
 800110c:	f002 f84e 	bl	80031ac <HAL_Delay>
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000034 	.word	0x20000034
 800111c:	200003bc 	.word	0x200003bc
 8001120:	000005dc 	.word	0x000005dc
 8001124:	20000000 	.word	0x20000000
 8001128:	2000003c 	.word	0x2000003c
 800112c:	20000018 	.word	0x20000018
 8001130:	20000008 	.word	0x20000008
 8001134:	20000028 	.word	0x20000028
 8001138:	20000040 	.word	0x20000040
 800113c:	20000068 	.word	0x20000068
 8001140:	20000094 	.word	0x20000094

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_DMA_Init+0x48>)
 800114c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_DMA_Init+0x48>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_DMA_Init+0x48>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	2201      	movs	r2, #1
 800115c:	4013      	ands	r3, r2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2009      	movs	r0, #9
 8001168:	f002 fc90 	bl	8003a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116c:	2009      	movs	r0, #9
 800116e:	f002 fca2 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200a      	movs	r0, #10
 8001178:	f002 fc88 	bl	8003a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800117c:	200a      	movs	r0, #10
 800117e:	f002 fc9a 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	40021000 	.word	0x40021000

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_GPIO_Init+0x40>)
 8001198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_GPIO_Init+0x40>)
 800119c:	2101      	movs	r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_GPIO_Init+0x40>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x40>)
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_GPIO_Init+0x40>)
 80011b4:	2102      	movs	r1, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <MX_GPIO_Init+0x40>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40021000 	.word	0x40021000

080011d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_I2C1_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C1_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x74>)
 8001210:	0018      	movs	r0, r3
 8001212:	f002 ffc3 	bl	800419c <HAL_I2C_Init>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800121a:	f001 fc9d 	bl	8002b58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x74>)
 8001220:	2100      	movs	r1, #0
 8001222:	0018      	movs	r0, r3
 8001224:	f003 f850 	bl	80042c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800122c:	f001 fc94 	bl	8002b58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <MX_I2C1_Init+0x74>)
 8001232:	2100      	movs	r1, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f003 f893 	bl	8004360 <HAL_I2CEx_ConfigDigitalFilter>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f001 fc8b 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000214 	.word	0x20000214
 800124c:	40005400 	.word	0x40005400
 8001250:	00303d5b 	.word	0x00303d5b

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	240c      	movs	r4, #12
 800125e:	193b      	adds	r3, r7, r4
 8001260:	0018      	movs	r0, r3
 8001262:	2314      	movs	r3, #20
 8001264:	001a      	movs	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	f005 ff36 	bl	80070d8 <memset>
  if(i2cHandle->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_I2C_MspInit+0x7c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d128      	bne.n	80012c8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_I2C_MspInit+0x80>)
 8001278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_I2C_MspInit+0x80>)
 800127c:	2102      	movs	r1, #2
 800127e:	430a      	orrs	r2, r1
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_I2C_MspInit+0x80>)
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	0021      	movs	r1, r4
 8001290:	187b      	adds	r3, r7, r1
 8001292:	22c0      	movs	r2, #192	; 0xc0
 8001294:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2212      	movs	r2, #18
 800129a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2203      	movs	r2, #3
 80012a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2201      	movs	r2, #1
 80012ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_I2C_MspInit+0x84>)
 80012b2:	0019      	movs	r1, r3
 80012b4:	0010      	movs	r0, r2
 80012b6:	f002 fdd5 	bl	8003e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_I2C_MspInit+0x80>)
 80012bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_I2C_MspInit+0x80>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0389      	lsls	r1, r1, #14
 80012c4:	430a      	orrs	r2, r1
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b009      	add	sp, #36	; 0x24
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	50000400 	.word	0x50000400

080012dc <icm20948_gyro_read_raw>:
static uint8_t  read_single_ak09916_reg(uint8_t reg);
static void     write_single_ak09916_reg(uint8_t reg, uint8_t val);
//static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);

void icm20948_gyro_read_raw(raw_axises * data)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	uint8_t * temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80012e4:	2206      	movs	r2, #6
 80012e6:	2133      	movs	r1, #51	; 0x33
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fe45 	bl	8001f78 <read_multiple_icm20948_reg>
 80012ee:	0003      	movs	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
	data->x = (uint16_t)(temp[0] << 8 | temp[1]);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	801a      	strh	r2, [r3, #0]
	data->y = (uint16_t)(temp[2] << 8 | temp[3]);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3302      	adds	r3, #2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3303      	adds	r3, #3
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	805a      	strh	r2, [r3, #2]
	data->z = (uint16_t)(temp[4] << 8 | temp[5]);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3304      	adds	r3, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3305      	adds	r3, #5
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}

0800134c <icm20948_accel_read_raw>:

void icm20948_accel_read_raw(raw_axises * data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t * temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001354:	2206      	movs	r2, #6
 8001356:	212d      	movs	r1, #45	; 0x2d
 8001358:	2000      	movs	r0, #0
 800135a:	f000 fe0d 	bl	8001f78 <read_multiple_icm20948_reg>
 800135e:	0003      	movs	r3, r0
 8001360:	60fb      	str	r3, [r7, #12]
	data->x = (uint16_t)(temp[0] << 8 | temp[1]);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	801a      	strh	r2, [r3, #0]
	data->y = (uint16_t)(temp[2] << 8 | temp[3]);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3302      	adds	r3, #2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3303      	adds	r3, #3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b21b      	sxth	r3, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	805a      	strh	r2, [r3, #2]
	data->z = (uint16_t)(temp[4] << 8 | temp[5]);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	809a      	strh	r2, [r3, #4]
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ak09916_mag_read_raw>:

bool ak09916_mag_read_raw(raw_axises * data)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 80013c4:	2010      	movs	r0, #16
 80013c6:	f000 fe45 	bl	8002054 <read_single_ak09916_reg>
 80013ca:	0003      	movs	r3, r0
 80013cc:	0019      	movs	r1, r3
 80013ce:	2017      	movs	r0, #23
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	2201      	movs	r2, #1
 80013d4:	400a      	ands	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
	if(!drdy)	return false;
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <ak09916_mag_read_raw+0x28>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e03f      	b.n	8001464 <ak09916_mag_read_raw+0xa8>

	uint8_t * temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 80013e4:	2106      	movs	r1, #6
 80013e6:	2011      	movs	r0, #17
 80013e8:	f000 fe7c 	bl	80020e4 <read_multiple_ak09916_reg>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 80013f0:	2018      	movs	r0, #24
 80013f2:	f000 fe2f 	bl	8002054 <read_single_ak09916_reg>
 80013f6:	0003      	movs	r3, r0
 80013f8:	0019      	movs	r1, r3
 80013fa:	200f      	movs	r0, #15
 80013fc:	183b      	adds	r3, r7, r0
 80013fe:	2208      	movs	r2, #8
 8001400:	400a      	ands	r2, r1
 8001402:	701a      	strb	r2, [r3, #0]
	if(hofl)	return false;
 8001404:	183b      	adds	r3, r7, r0
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <ak09916_mag_read_raw+0x54>
 800140c:	2300      	movs	r3, #0
 800140e:	e029      	b.n	8001464 <ak09916_mag_read_raw+0xa8>

	data->x = (uint16_t)(temp[0] << 8 | temp[1]);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	3301      	adds	r3, #1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	801a      	strh	r2, [r3, #0]
	data->y = (uint16_t)(temp[2] << 8 | temp[3]);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3302      	adds	r3, #2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	3303      	adds	r3, #3
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	805a      	strh	r2, [r3, #2]
	data->z = (uint16_t)(temp[4] << 8 | temp[5]);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	3304      	adds	r3, #4
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3305      	adds	r3, #5
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21b      	sxth	r3, r3
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	809a      	strh	r2, [r3, #4]

	return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b006      	add	sp, #24
 800146a:	bd80      	pop	{r7, pc}

0800146c <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8001474:	2206      	movs	r2, #6
 8001476:	2133      	movs	r1, #51	; 0x33
 8001478:	2000      	movs	r0, #0
 800147a:	f000 fd7d 	bl	8001f78 <read_multiple_icm20948_reg>
 800147e:	0003      	movs	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fc4e 	bl	8000d38 <__aeabi_i2f>
 800149c:	1c02      	adds	r2, r0, #0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3302      	adds	r3, #2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3303      	adds	r3, #3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fc3d 	bl	8000d38 <__aeabi_i2f>
 80014be:	1c02      	adds	r2, r0, #0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3304      	adds	r3, #4
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3305      	adds	r3, #5
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fc2c 	bl	8000d38 <__aeabi_i2f>
 80014e0:	1c02      	adds	r2, r0, #0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80014f8:	2206      	movs	r2, #6
 80014fa:	212d      	movs	r1, #45	; 0x2d
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 fd3b 	bl	8001f78 <read_multiple_icm20948_reg>
 8001502:	0003      	movs	r3, r0
 8001504:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff fc0c 	bl	8000d38 <__aeabi_i2f>
 8001520:	1c02      	adds	r2, r0, #0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3302      	adds	r3, #2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3303      	adds	r3, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fbfb 	bl	8000d38 <__aeabi_i2f>
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3304      	adds	r3, #4
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3305      	adds	r3, #5
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff fbea 	bl	8000d38 <__aeabi_i2f>
 8001564:	1c02      	adds	r2, r0, #0
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <icm20948_accel_read+0x94>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1c19      	adds	r1, r3, #0
 800156c:	1c10      	adds	r0, r2, #0
 800156e:	f7ff f85f 	bl	8000630 <__aeabi_fadd>
 8001572:	1c03      	adds	r3, r0, #0
 8001574:	1c1a      	adds	r2, r3, #0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	20000150 	.word	0x20000150

08001588 <icm20948_who_am_i>:
	return true;
}


bool icm20948_who_am_i()
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800158e:	1dfc      	adds	r4, r7, #7
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f000 fc90 	bl	8001eb8 <read_single_icm20948_reg>
 8001598:	0003      	movs	r3, r0
 800159a:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2bea      	cmp	r3, #234	; 0xea
 80015a2:	d101      	bne.n	80015a8 <icm20948_who_am_i+0x20>
		return true;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <icm20948_who_am_i+0x22>
	else
		return false;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b003      	add	sp, #12
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80015b8:	1dfc      	adds	r4, r7, #7
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fd4a 	bl	8002054 <read_single_ak09916_reg>
 80015c0:	0003      	movs	r3, r0
 80015c2:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d101      	bne.n	80015d0 <ak09916_who_am_i+0x1e>
		return true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <ak09916_who_am_i+0x20>
	else
		return false;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b003      	add	sp, #12
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <icm20948_device_reset>:

void icm20948_device_reset()
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80015de:	22c1      	movs	r2, #193	; 0xc1
 80015e0:	2106      	movs	r1, #6
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 fc9a 	bl	8001f1c <write_single_icm20948_reg>
	HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f001 fddf 	bl	80031ac <HAL_Delay>
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 80015f8:	2101      	movs	r1, #1
 80015fa:	2032      	movs	r0, #50	; 0x32
 80015fc:	f000 fd4d 	bl	800209a <write_single_ak09916_reg>
	HAL_Delay(100);
 8001600:	2064      	movs	r0, #100	; 0x64
 8001602:	f001 fdd3 	bl	80031ac <HAL_Delay>
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <icm20948_wakeup>:

void icm20948_wakeup()
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001612:	1dfc      	adds	r4, r7, #7
 8001614:	2106      	movs	r1, #6
 8001616:	2000      	movs	r0, #0
 8001618:	f000 fc4e 	bl	8001eb8 <read_single_icm20948_reg>
 800161c:	0003      	movs	r3, r0
 800161e:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	2140      	movs	r1, #64	; 0x40
 8001628:	438a      	bics	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	001a      	movs	r2, r3
 8001632:	2106      	movs	r1, #6
 8001634:	2000      	movs	r0, #0
 8001636:	f000 fc71 	bl	8001f1c <write_single_icm20948_reg>
	HAL_Delay(100);
 800163a:	2064      	movs	r0, #100	; 0x64
 800163c:	f001 fdb6 	bl	80031ac <HAL_Delay>
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b003      	add	sp, #12
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800164e:	1dfc      	adds	r4, r7, #7
 8001650:	2103      	movs	r1, #3
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fc30 	bl	8001eb8 <read_single_icm20948_reg>
 8001658:	0003      	movs	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	2110      	movs	r1, #16
 8001664:	430a      	orrs	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	2103      	movs	r1, #3
 8001670:	2000      	movs	r0, #0
 8001672:	f000 fc53 	bl	8001f1c <write_single_icm20948_reg>
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b003      	add	sp, #12
 800167c:	bd90      	pop	{r4, r7, pc}

0800167e <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800167e:	b590      	push	{r4, r7, lr}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001684:	1dfc      	adds	r4, r7, #7
 8001686:	2103      	movs	r1, #3
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fc15 	bl	8001eb8 <read_single_icm20948_reg>
 800168e:	0003      	movs	r3, r0
 8001690:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	1dfa      	adds	r2, r7, #7
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	2102      	movs	r1, #2
 800169a:	430a      	orrs	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001a      	movs	r2, r3
 80016a4:	2103      	movs	r1, #3
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 fc38 	bl	8001f1c <write_single_icm20948_reg>
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b003      	add	sp, #12
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80016ba:	1dfc      	adds	r4, r7, #7
 80016bc:	2103      	movs	r1, #3
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 fbfa 	bl	8001eb8 <read_single_icm20948_reg>
 80016c4:	0003      	movs	r3, r0
 80016c6:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	1dfa      	adds	r2, r7, #7
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	2120      	movs	r1, #32
 80016d0:	430a      	orrs	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	001a      	movs	r2, r3
 80016da:	2103      	movs	r1, #3
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fc1d 	bl	8001f1c <write_single_icm20948_reg>
	HAL_Delay(100);
 80016e2:	2064      	movs	r0, #100	; 0x64
 80016e4:	f001 fd62 	bl	80031ac <HAL_Delay>
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b003      	add	sp, #12
 80016ee:	bd90      	pop	{r4, r7, pc}

080016f0 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80016fc:	250f      	movs	r5, #15
 80016fe:	197c      	adds	r4, r7, r5
 8001700:	2101      	movs	r1, #1
 8001702:	2030      	movs	r0, #48	; 0x30
 8001704:	f000 fbd8 	bl	8001eb8 <read_single_icm20948_reg>
 8001708:	0003      	movs	r3, r0
 800170a:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 800170c:	0028      	movs	r0, r5
 800170e:	183b      	adds	r3, r7, r0
 8001710:	1839      	adds	r1, r7, r0
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7809      	ldrb	r1, [r1, #0]
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 800171c:	183b      	adds	r3, r7, r0
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	001a      	movs	r2, r3
 8001722:	2101      	movs	r1, #1
 8001724:	2030      	movs	r0, #48	; 0x30
 8001726:	f000 fbf9 	bl	8001f1c <write_single_icm20948_reg>
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bdb0      	pop	{r4, r5, r7, pc}

08001732 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8001732:	b5b0      	push	{r4, r5, r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	0002      	movs	r2, r0
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800173e:	250f      	movs	r5, #15
 8001740:	197c      	adds	r4, r7, r5
 8001742:	2106      	movs	r1, #6
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fbb7 	bl	8001eb8 <read_single_icm20948_reg>
 800174a:	0003      	movs	r3, r0
 800174c:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 800174e:	0028      	movs	r0, r5
 8001750:	183b      	adds	r3, r7, r0
 8001752:	1839      	adds	r1, r7, r0
 8001754:	1dfa      	adds	r2, r7, #7
 8001756:	7809      	ldrb	r1, [r1, #0]
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800175e:	183b      	adds	r3, r7, r0
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	001a      	movs	r2, r3
 8001764:	2106      	movs	r1, #6
 8001766:	2000      	movs	r0, #0
 8001768:	f000 fbd8 	bl	8001f1c <write_single_icm20948_reg>
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bdb0      	pop	{r4, r5, r7, pc}

08001774 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001778:	2201      	movs	r2, #1
 800177a:	2109      	movs	r1, #9
 800177c:	2020      	movs	r0, #32
 800177e:	f000 fbcd 	bl	8001f1c <write_single_icm20948_reg>
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001794:	250f      	movs	r5, #15
 8001796:	197c      	adds	r4, r7, r5
 8001798:	2101      	movs	r1, #1
 800179a:	2020      	movs	r0, #32
 800179c:	f000 fb8c 	bl	8001eb8 <read_single_icm20948_reg>
 80017a0:	0003      	movs	r3, r0
 80017a2:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	197b      	adds	r3, r7, r5
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	001a      	movs	r2, r3
 80017c0:	2101      	movs	r1, #1
 80017c2:	2020      	movs	r0, #32
 80017c4:	f000 fbaa 	bl	8001f1c <write_single_icm20948_reg>
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}

080017d0 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	0002      	movs	r2, r0
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80017dc:	250f      	movs	r5, #15
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	2114      	movs	r1, #20
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 fb68 	bl	8001eb8 <read_single_icm20948_reg>
 80017e8:	0003      	movs	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	197b      	adds	r3, r7, r5
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	197b      	adds	r3, r7, r5
 8001800:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	001a      	movs	r2, r3
 8001808:	2101      	movs	r1, #1
 800180a:	2020      	movs	r0, #32
 800180c:	f000 fb86 	bl	8001f1c <write_single_icm20948_reg>
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bdb0      	pop	{r4, r5, r7, pc}

08001818 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	0002      	movs	r2, r0
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	2100      	movs	r1, #0
 800182c:	2020      	movs	r0, #32
 800182e:	f000 fb75 	bl	8001f1c <write_single_icm20948_reg>
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}

0800183a <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800183a:	b590      	push	{r4, r7, lr}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	0002      	movs	r2, r0
 8001842:	1dbb      	adds	r3, r7, #6
 8001844:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8001846:	1dbb      	adds	r3, r7, #6
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29a      	uxth	r2, r3
 800184e:	200f      	movs	r0, #15
 8001850:	183b      	adds	r3, r7, r0
 8001852:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8001854:	1dbb      	adds	r3, r7, #6
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	240e      	movs	r4, #14
 800185c:	193b      	adds	r3, r7, r4
 800185e:	210f      	movs	r1, #15
 8001860:	400a      	ands	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8001864:	183b      	adds	r3, r7, r0
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	2110      	movs	r1, #16
 800186c:	2020      	movs	r0, #32
 800186e:	f000 fb55 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8001872:	193b      	adds	r3, r7, r4
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	001a      	movs	r2, r3
 8001878:	2111      	movs	r1, #17
 800187a:	2020      	movs	r0, #32
 800187c:	f000 fb4e 	bl	8001f1c <write_single_icm20948_reg>
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b005      	add	sp, #20
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	0002      	movs	r2, r0
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	0019      	movs	r1, r3
 800189a:	2031      	movs	r0, #49	; 0x31
 800189c:	f000 fbfd 	bl	800209a <write_single_ak09916_reg>
	HAL_Delay(100);
 80018a0:	2064      	movs	r0, #100	; 0x64
 80018a2:	f001 fc83 	bl	80031ac <HAL_Delay>
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}

080018ae <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80018ae:	b5b0      	push	{r4, r5, r7, lr}
 80018b0:	b08a      	sub	sp, #40	; 0x28
 80018b2:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80018b4:	230c      	movs	r3, #12
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	0018      	movs	r0, r3
 80018ba:	230c      	movs	r3, #12
 80018bc:	001a      	movs	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f005 fc0a 	bl	80070d8 <memset>
	uint8_t gyro_offset[6] = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	e041      	b.n	8001958 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 80018d4:	2518      	movs	r5, #24
 80018d6:	197b      	adds	r3, r7, r5
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fdc7 	bl	800146c <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80018de:	240c      	movs	r4, #12
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff fa27 	bl	8000d38 <__aeabi_i2f>
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	197b      	adds	r3, r7, r5
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c19      	adds	r1, r3, #0
 80018f2:	1c10      	adds	r0, r2, #0
 80018f4:	f7fe fe9c 	bl	8000630 <__aeabi_fadd>
 80018f8:	1c03      	adds	r3, r0, #0
 80018fa:	1c18      	adds	r0, r3, #0
 80018fc:	f7ff f9fc 	bl	8000cf8 <__aeabi_f2iz>
 8001900:	0002      	movs	r2, r0
 8001902:	193b      	adds	r3, r7, r4
 8001904:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8001906:	193b      	adds	r3, r7, r4
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fa14 	bl	8000d38 <__aeabi_i2f>
 8001910:	1c02      	adds	r2, r0, #0
 8001912:	197b      	adds	r3, r7, r5
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	1c19      	adds	r1, r3, #0
 8001918:	1c10      	adds	r0, r2, #0
 800191a:	f7fe fe89 	bl	8000630 <__aeabi_fadd>
 800191e:	1c03      	adds	r3, r0, #0
 8001920:	1c18      	adds	r0, r3, #0
 8001922:	f7ff f9e9 	bl	8000cf8 <__aeabi_f2iz>
 8001926:	0002      	movs	r2, r0
 8001928:	193b      	adds	r3, r7, r4
 800192a:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 800192c:	193b      	adds	r3, r7, r4
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fa01 	bl	8000d38 <__aeabi_i2f>
 8001936:	1c02      	adds	r2, r0, #0
 8001938:	197b      	adds	r3, r7, r5
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	1c19      	adds	r1, r3, #0
 800193e:	1c10      	adds	r0, r2, #0
 8001940:	f7fe fe76 	bl	8000630 <__aeabi_fadd>
 8001944:	1c03      	adds	r3, r0, #0
 8001946:	1c18      	adds	r0, r3, #0
 8001948:	f7ff f9d6 	bl	8000cf8 <__aeabi_f2iz>
 800194c:	0002      	movs	r2, r0
 800194e:	193b      	adds	r3, r7, r4
 8001950:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2b63      	cmp	r3, #99	; 0x63
 800195c:	ddba      	ble.n	80018d4 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 800195e:	240c      	movs	r4, #12
 8001960:	193b      	adds	r3, r7, r4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2164      	movs	r1, #100	; 0x64
 8001966:	0018      	movs	r0, r3
 8001968:	f7fe fc62 	bl	8000230 <__divsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	001a      	movs	r2, r3
 8001970:	193b      	adds	r3, r7, r4
 8001972:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 8001974:	193b      	adds	r3, r7, r4
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2164      	movs	r1, #100	; 0x64
 800197a:	0018      	movs	r0, r3
 800197c:	f7fe fc58 	bl	8000230 <__divsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	193b      	adds	r3, r7, r4
 8001986:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8001988:	193b      	adds	r3, r7, r4
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2164      	movs	r1, #100	; 0x64
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fc4e 	bl	8000230 <__divsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	001a      	movs	r2, r3
 8001998:	193b      	adds	r3, r7, r4
 800199a:	609a      	str	r2, [r3, #8]

	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	425b      	negs	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da00      	bge.n	80019a8 <icm20948_gyro_calibration+0xfa>
 80019a6:	3303      	adds	r3, #3
 80019a8:	109b      	asrs	r3, r3, #2
 80019aa:	121b      	asrs	r3, r3, #8
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 80019b2:	230c      	movs	r3, #12
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	425b      	negs	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da00      	bge.n	80019c0 <icm20948_gyro_calibration+0x112>
 80019be:	3303      	adds	r3, #3
 80019c0:	109b      	asrs	r3, r3, #2
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80019c8:	230c      	movs	r3, #12
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	425b      	negs	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da00      	bge.n	80019d6 <icm20948_gyro_calibration+0x128>
 80019d4:	3303      	adds	r3, #3
 80019d6:	109b      	asrs	r3, r3, #2
 80019d8:	121b      	asrs	r3, r3, #8
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80019e0:	230c      	movs	r3, #12
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	425b      	negs	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <icm20948_gyro_calibration+0x140>
 80019ec:	3303      	adds	r3, #3
 80019ee:	109b      	asrs	r3, r3, #2
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80019f6:	230c      	movs	r3, #12
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	425b      	negs	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da00      	bge.n	8001a04 <icm20948_gyro_calibration+0x156>
 8001a02:	3303      	adds	r3, #3
 8001a04:	109b      	asrs	r3, r3, #2
 8001a06:	121b      	asrs	r3, r3, #8
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	425b      	negs	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da00      	bge.n	8001a1c <icm20948_gyro_calibration+0x16e>
 8001a1a:	3303      	adds	r3, #3
 8001a1c:	109b      	asrs	r3, r3, #2
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001a24:	1d3a      	adds	r2, r7, #4
 8001a26:	2306      	movs	r3, #6
 8001a28:	2103      	movs	r1, #3
 8001a2a:	2020      	movs	r0, #32
 8001a2c:	f000 fade 	bl	8001fec <write_multiple_icm20948_reg>
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b00a      	add	sp, #40	; 0x28
 8001a36:	bdb0      	pop	{r4, r5, r7, pc}

08001a38 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b090      	sub	sp, #64	; 0x40
 8001a3c:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8001a3e:	2318      	movs	r3, #24
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	0018      	movs	r0, r3
 8001a44:	230c      	movs	r3, #12
 8001a46:	001a      	movs	r2, r3
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f005 fb45 	bl	80070d8 <memset>
	int32_t accel_bias_reg[3] = {0};
 8001a4e:	230c      	movs	r3, #12
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	0018      	movs	r0, r3
 8001a54:	230c      	movs	r3, #12
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f005 fb3d 	bl	80070d8 <memset>
	uint8_t accel_offset[6] = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a6c:	e041      	b.n	8001af2 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 8001a6e:	2524      	movs	r5, #36	; 0x24
 8001a70:	197b      	adds	r3, r7, r5
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fd3c 	bl	80014f0 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001a78:	2418      	movs	r4, #24
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff f95a 	bl	8000d38 <__aeabi_i2f>
 8001a84:	1c02      	adds	r2, r0, #0
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c19      	adds	r1, r3, #0
 8001a8c:	1c10      	adds	r0, r2, #0
 8001a8e:	f7fe fdcf 	bl	8000630 <__aeabi_fadd>
 8001a92:	1c03      	adds	r3, r0, #0
 8001a94:	1c18      	adds	r0, r3, #0
 8001a96:	f7ff f92f 	bl	8000cf8 <__aeabi_f2iz>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff f947 	bl	8000d38 <__aeabi_i2f>
 8001aaa:	1c02      	adds	r2, r0, #0
 8001aac:	197b      	adds	r3, r7, r5
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1c19      	adds	r1, r3, #0
 8001ab2:	1c10      	adds	r0, r2, #0
 8001ab4:	f7fe fdbc 	bl	8000630 <__aeabi_fadd>
 8001ab8:	1c03      	adds	r3, r0, #0
 8001aba:	1c18      	adds	r0, r3, #0
 8001abc:	f7ff f91c 	bl	8000cf8 <__aeabi_f2iz>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	605a      	str	r2, [r3, #4]
		accel_bias[2] -= temp.z;
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff f934 	bl	8000d38 <__aeabi_i2f>
 8001ad0:	1c02      	adds	r2, r0, #0
 8001ad2:	197b      	adds	r3, r7, r5
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	1c19      	adds	r1, r3, #0
 8001ad8:	1c10      	adds	r0, r2, #0
 8001ada:	f7fe ff45 	bl	8000968 <__aeabi_fsub>
 8001ade:	1c03      	adds	r3, r0, #0
 8001ae0:	1c18      	adds	r0, r3, #0
 8001ae2:	f7ff f909 	bl	8000cf8 <__aeabi_f2iz>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8001aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aee:	3301      	adds	r3, #1
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	2b63      	cmp	r3, #99	; 0x63
 8001af6:	ddba      	ble.n	8001a6e <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8001af8:	2418      	movs	r4, #24
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2164      	movs	r1, #100	; 0x64
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe fb95 	bl	8000230 <__divsi3>
 8001b06:	0003      	movs	r3, r0
 8001b08:	001a      	movs	r2, r3
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2164      	movs	r1, #100	; 0x64
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7fe fb8b 	bl	8000230 <__divsi3>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2164      	movs	r1, #100	; 0x64
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe fb81 	bl	8000230 <__divsi3>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	001a      	movs	r2, r3
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001b36:	003b      	movs	r3, r7
 8001b38:	4a68      	ldr	r2, [pc, #416]	; (8001cdc <icm20948_accel_calibration+0x2a4>)
 8001b3a:	8811      	ldrh	r1, [r2, #0]
 8001b3c:	8019      	strh	r1, [r3, #0]
 8001b3e:	7892      	ldrb	r2, [r2, #2]
 8001b40:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8001b42:	2202      	movs	r2, #2
 8001b44:	2114      	movs	r1, #20
 8001b46:	2010      	movs	r0, #16
 8001b48:	f000 fa16 	bl	8001f78 <read_multiple_icm20948_reg>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b58:	3201      	adds	r2, #1
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	250c      	movs	r5, #12
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	3301      	adds	r3, #1
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	003b      	movs	r3, r7
 8001b72:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001b74:	2202      	movs	r2, #2
 8001b76:	2117      	movs	r1, #23
 8001b78:	2010      	movs	r0, #16
 8001b7a:	f000 f9fd 	bl	8001f78 <read_multiple_icm20948_reg>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8a:	3201      	adds	r2, #1
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	197b      	adds	r3, r7, r5
 8001b92:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	3301      	adds	r3, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	003b      	movs	r3, r7
 8001ba2:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	211a      	movs	r1, #26
 8001ba8:	2010      	movs	r0, #16
 8001baa:	f000 f9e5 	bl	8001f78 <read_multiple_icm20948_reg>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bba:	3201      	adds	r2, #1
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	197b      	adds	r3, r7, r5
 8001bc2:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	003b      	movs	r3, r7
 8001bd2:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001bd4:	197b      	adds	r3, r7, r5
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da00      	bge.n	8001be2 <icm20948_accel_calibration+0x1aa>
 8001be0:	3307      	adds	r3, #7
 8001be2:	10db      	asrs	r3, r3, #3
 8001be4:	425b      	negs	r3, r3
 8001be6:	18d2      	adds	r2, r2, r3
 8001be8:	210c      	movs	r1, #12
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	2318      	movs	r3, #24
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da00      	bge.n	8001bfe <icm20948_accel_calibration+0x1c6>
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	10db      	asrs	r3, r3, #3
 8001c00:	425b      	negs	r3, r3
 8001c02:	18d2      	adds	r2, r2, r3
 8001c04:	210c      	movs	r1, #12
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	2318      	movs	r3, #24
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da00      	bge.n	8001c1a <icm20948_accel_calibration+0x1e2>
 8001c18:	3307      	adds	r3, #7
 8001c1a:	10db      	asrs	r3, r3, #3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	18d2      	adds	r2, r2, r3
 8001c20:	210c      	movs	r1, #12
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	121b      	asrs	r3, r3, #8
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	785a      	ldrb	r2, [r3, #1]
 8001c46:	003b      	movs	r3, r7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	121b      	asrs	r3, r3, #8
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2201      	movs	r2, #1
 8001c66:	4393      	bics	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	78da      	ldrb	r2, [r3, #3]
 8001c72:	003b      	movs	r3, r7
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	121b      	asrs	r3, r3, #8
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2201      	movs	r2, #1
 8001c92:	4393      	bics	r3, r2
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	795a      	ldrb	r2, [r3, #5]
 8001c9e:	003b      	movs	r3, r7
 8001ca0:	789b      	ldrb	r3, [r3, #2]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001caa:	1d3a      	adds	r2, r7, #4
 8001cac:	2302      	movs	r3, #2
 8001cae:	2114      	movs	r1, #20
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f000 f99b 	bl	8001fec <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	1c9a      	adds	r2, r3, #2
 8001cba:	2302      	movs	r3, #2
 8001cbc:	2117      	movs	r1, #23
 8001cbe:	2010      	movs	r0, #16
 8001cc0:	f000 f994 	bl	8001fec <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	1d1a      	adds	r2, r3, #4
 8001cc8:	2302      	movs	r3, #2
 8001cca:	211a      	movs	r1, #26
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f000 f98d 	bl	8001fec <write_multiple_icm20948_reg>
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b010      	add	sp, #64	; 0x40
 8001cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	0800794c 	.word	0x0800794c

08001ce0 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001cec:	230f      	movs	r3, #15
 8001cee:	18fc      	adds	r4, r7, r3
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2020      	movs	r0, #32
 8001cf4:	f000 f8e0 	bl	8001eb8 <read_single_icm20948_reg>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d027      	beq.n	8001d54 <icm20948_gyro_full_scale_select+0x74>
 8001d04:	dc31      	bgt.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d019      	beq.n	8001d3e <icm20948_gyro_full_scale_select+0x5e>
 8001d0a:	dc2e      	bgt.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <icm20948_gyro_full_scale_select+0x36>
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d009      	beq.n	8001d28 <icm20948_gyro_full_scale_select+0x48>
 8001d14:	e029      	b.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8001d16:	220f      	movs	r2, #15
 8001d18:	18bb      	adds	r3, r7, r2
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <icm20948_gyro_full_scale_select+0xa4>)
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <icm20948_gyro_full_scale_select+0xa8>)
 8001d24:	601a      	str	r2, [r3, #0]
			break;
 8001d26:	e020      	b.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 8001d28:	220f      	movs	r2, #15
 8001d2a:	18bb      	adds	r3, r7, r2
 8001d2c:	18ba      	adds	r2, r7, r2
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	2102      	movs	r1, #2
 8001d32:	430a      	orrs	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <icm20948_gyro_full_scale_select+0xa4>)
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <icm20948_gyro_full_scale_select+0xac>)
 8001d3a:	601a      	str	r2, [r3, #0]
			break;
 8001d3c:	e015      	b.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 8001d3e:	220f      	movs	r2, #15
 8001d40:	18bb      	adds	r3, r7, r2
 8001d42:	18ba      	adds	r2, r7, r2
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	2104      	movs	r1, #4
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <icm20948_gyro_full_scale_select+0xa4>)
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <icm20948_gyro_full_scale_select+0xb0>)
 8001d50:	601a      	str	r2, [r3, #0]
			break;
 8001d52:	e00a      	b.n	8001d6a <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 8001d54:	220f      	movs	r2, #15
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	18ba      	adds	r2, r7, r2
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	2106      	movs	r1, #6
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <icm20948_gyro_full_scale_select+0xa4>)
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <icm20948_gyro_full_scale_select+0xb4>)
 8001d66:	601a      	str	r2, [r3, #0]
			break;
 8001d68:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	001a      	movs	r2, r3
 8001d72:	2101      	movs	r1, #1
 8001d74:	2020      	movs	r0, #32
 8001d76:	f000 f8d1 	bl	8001f1c <write_single_icm20948_reg>
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b005      	add	sp, #20
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	2000014c 	.word	0x2000014c
 8001d88:	43030000 	.word	0x43030000
 8001d8c:	42830000 	.word	0x42830000
 8001d90:	42033333 	.word	0x42033333
 8001d94:	41833333 	.word	0x41833333

08001d98 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	0002      	movs	r2, r0
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001da4:	230f      	movs	r3, #15
 8001da6:	18fc      	adds	r4, r7, r3
 8001da8:	2114      	movs	r1, #20
 8001daa:	2020      	movs	r0, #32
 8001dac:	f000 f884 	bl	8001eb8 <read_single_icm20948_reg>
 8001db0:	0003      	movs	r3, r0
 8001db2:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d02a      	beq.n	8001e12 <icm20948_accel_full_scale_select+0x7a>
 8001dbc:	dc35      	bgt.n	8001e2a <icm20948_accel_full_scale_select+0x92>
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d01b      	beq.n	8001dfa <icm20948_accel_full_scale_select+0x62>
 8001dc2:	dc32      	bgt.n	8001e2a <icm20948_accel_full_scale_select+0x92>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <icm20948_accel_full_scale_select+0x36>
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d00a      	beq.n	8001de2 <icm20948_accel_full_scale_select+0x4a>
 8001dcc:	e02d      	b.n	8001e2a <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 8001dce:	220f      	movs	r2, #15
 8001dd0:	18bb      	adds	r3, r7, r2
 8001dd2:	18ba      	adds	r2, r7, r2
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <icm20948_accel_full_scale_select+0xac>)
 8001dda:	228d      	movs	r2, #141	; 0x8d
 8001ddc:	05d2      	lsls	r2, r2, #23
 8001dde:	601a      	str	r2, [r3, #0]
			break;
 8001de0:	e023      	b.n	8001e2a <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8001de2:	220f      	movs	r2, #15
 8001de4:	18bb      	adds	r3, r7, r2
 8001de6:	18ba      	adds	r2, r7, r2
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	2102      	movs	r1, #2
 8001dec:	430a      	orrs	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <icm20948_accel_full_scale_select+0xac>)
 8001df2:	228c      	movs	r2, #140	; 0x8c
 8001df4:	05d2      	lsls	r2, r2, #23
 8001df6:	601a      	str	r2, [r3, #0]
			break;
 8001df8:	e017      	b.n	8001e2a <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	18bb      	adds	r3, r7, r2
 8001dfe:	18ba      	adds	r2, r7, r2
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	2104      	movs	r1, #4
 8001e04:	430a      	orrs	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <icm20948_accel_full_scale_select+0xac>)
 8001e0a:	228b      	movs	r2, #139	; 0x8b
 8001e0c:	05d2      	lsls	r2, r2, #23
 8001e0e:	601a      	str	r2, [r3, #0]
			break;
 8001e10:	e00b      	b.n	8001e2a <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8001e12:	220f      	movs	r2, #15
 8001e14:	18bb      	adds	r3, r7, r2
 8001e16:	18ba      	adds	r2, r7, r2
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	2106      	movs	r1, #6
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <icm20948_accel_full_scale_select+0xac>)
 8001e22:	228a      	movs	r2, #138	; 0x8a
 8001e24:	05d2      	lsls	r2, r2, #23
 8001e26:	601a      	str	r2, [r3, #0]
			break;
 8001e28:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	001a      	movs	r2, r3
 8001e32:	2114      	movs	r1, #20
 8001e34:	2020      	movs	r0, #32
 8001e36:	f000 f871 	bl	8001f1c <write_single_icm20948_reg>
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b005      	add	sp, #20
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000150 	.word	0x20000150

08001e48 <cs_high>:


static void cs_high()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	0219      	lsls	r1, r3, #8
 8001e50:	23a0      	movs	r3, #160	; 0xa0
 8001e52:	05db      	lsls	r3, r3, #23
 8001e54:	2201      	movs	r2, #1
 8001e56:	0018      	movs	r0, r3
 8001e58:	f002 f982 	bl	8004160 <HAL_GPIO_WritePin>
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <cs_low>:

static void cs_low()
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	0219      	lsls	r1, r3, #8
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	2200      	movs	r2, #0
 8001e70:	0018      	movs	r0, r3
 8001e72:	f002 f975 	bl	8004160 <HAL_GPIO_WritePin>
}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001e88:	240c      	movs	r4, #12
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	227f      	movs	r2, #127	; 0x7f
 8001e8e:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8001e90:	193b      	adds	r3, r7, r4
 8001e92:	1dfa      	adds	r2, r7, #7
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	705a      	strb	r2, [r3, #1]

	cs_low();
 8001e98:	f7ff ffe3 	bl	8001e62 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001e9c:	1939      	adds	r1, r7, r4
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <select_user_bank+0x38>)
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f003 fa32 	bl	800530c <HAL_SPI_Transmit>
	cs_high();
 8001ea8:	f7ff ffce 	bl	8001e48 <cs_high>
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b005      	add	sp, #20
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	2000029c 	.word	0x2000029c

08001eb8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	1dbb      	adds	r3, r7, #6
 8001ec6:	1c0a      	adds	r2, r1, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	4252      	negs	r2, r2
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	240f      	movs	r4, #15
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff ffcb 	bl	8001e7c <select_user_bank>

	cs_low();
 8001ee6:	f7ff ffbc 	bl	8001e62 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001eea:	23fa      	movs	r3, #250	; 0xfa
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	1939      	adds	r1, r7, r4
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <read_single_icm20948_reg+0x60>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f003 fa0a 	bl	800530c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001ef8:	23fa      	movs	r3, #250	; 0xfa
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	240e      	movs	r4, #14
 8001efe:	1939      	adds	r1, r7, r4
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <read_single_icm20948_reg+0x60>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	f003 fb58 	bl	80055b8 <HAL_SPI_Receive>
	cs_high();
 8001f08:	f7ff ff9e 	bl	8001e48 <cs_high>

	return reg_val;
 8001f0c:	193b      	adds	r3, r7, r4
 8001f0e:	781b      	ldrb	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b005      	add	sp, #20
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	2000029c 	.word	0x2000029c

08001f1c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0004      	movs	r4, r0
 8001f24:	0008      	movs	r0, r1
 8001f26:	0011      	movs	r1, r2
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	1c22      	adds	r2, r4, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	1dbb      	adds	r3, r7, #6
 8001f30:	1c02      	adds	r2, r0, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	1d7b      	adds	r3, r7, #5
 8001f36:	1c0a      	adds	r2, r1, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001f3a:	240c      	movs	r4, #12
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	1dba      	adds	r2, r7, #6
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	1d7a      	adds	r2, r7, #5
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff93 	bl	8001e7c <select_user_bank>

	cs_low();
 8001f56:	f7ff ff84 	bl	8001e62 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001f5a:	23fa      	movs	r3, #250	; 0xfa
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	1939      	adds	r1, r7, r4
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <write_single_icm20948_reg+0x58>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	f003 f9d2 	bl	800530c <HAL_SPI_Transmit>
	cs_high();
 8001f68:	f7ff ff6e 	bl	8001e48 <cs_high>
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b005      	add	sp, #20
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	2000029c 	.word	0x2000029c

08001f78 <read_multiple_icm20948_reg>:

uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	0004      	movs	r4, r0
 8001f80:	0008      	movs	r0, r1
 8001f82:	0011      	movs	r1, r2
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	1c22      	adds	r2, r4, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	1c02      	adds	r2, r0, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	1d7b      	adds	r3, r7, #5
 8001f92:	1c0a      	adds	r2, r1, #0
 8001f94:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	4252      	negs	r2, r2
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	240f      	movs	r4, #15
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7ff ff65 	bl	8001e7c <select_user_bank>

	cs_low();
 8001fb2:	f7ff ff56 	bl	8001e62 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001fb6:	23fa      	movs	r3, #250	; 0xfa
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	1939      	adds	r1, r7, r4
 8001fbc:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <read_multiple_icm20948_reg+0x6c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f003 f9a4 	bl	800530c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001fc4:	1d7b      	adds	r3, r7, #5
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	23fa      	movs	r3, #250	; 0xfa
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <read_multiple_icm20948_reg+0x70>)
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <read_multiple_icm20948_reg+0x6c>)
 8001fd2:	f003 faf1 	bl	80055b8 <HAL_SPI_Receive>
	cs_high();
 8001fd6:	f7ff ff37 	bl	8001e48 <cs_high>

	return reg_val;
 8001fda:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <read_multiple_icm20948_reg+0x70>)
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b005      	add	sp, #20
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	2000029c 	.word	0x2000029c
 8001fe8:	20000154 	.word	0x20000154

08001fec <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	0008      	movs	r0, r1
 8001ff6:	603a      	str	r2, [r7, #0]
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	1c22      	adds	r2, r4, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	1c02      	adds	r2, r0, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	1d7b      	adds	r3, r7, #5
 8002008:	1c0a      	adds	r2, r1, #0
 800200a:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 800200c:	240f      	movs	r4, #15
 800200e:	193b      	adds	r3, r7, r4
 8002010:	1dba      	adds	r2, r7, #6
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	f7ff ff2e 	bl	8001e7c <select_user_bank>

	cs_low();
 8002020:	f7ff ff1f 	bl	8001e62 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8002024:	23fa      	movs	r3, #250	; 0xfa
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	1939      	adds	r1, r7, r4
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <write_multiple_icm20948_reg+0x64>)
 800202c:	2201      	movs	r2, #1
 800202e:	f003 f96d 	bl	800530c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8002032:	1d7b      	adds	r3, r7, #5
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b29a      	uxth	r2, r3
 8002038:	23fa      	movs	r3, #250	; 0xfa
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	4804      	ldr	r0, [pc, #16]	; (8002050 <write_multiple_icm20948_reg+0x64>)
 8002040:	f003 f964 	bl	800530c <HAL_SPI_Transmit>
	cs_high();
 8002044:	f7ff ff00 	bl	8001e48 <cs_high>
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b005      	add	sp, #20
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	2000029c 	.word	0x2000029c

08002054 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	0002      	movs	r2, r0
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002060:	228c      	movs	r2, #140	; 0x8c
 8002062:	2103      	movs	r1, #3
 8002064:	2030      	movs	r0, #48	; 0x30
 8002066:	f7ff ff59 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	001a      	movs	r2, r3
 8002070:	2104      	movs	r1, #4
 8002072:	2030      	movs	r0, #48	; 0x30
 8002074:	f7ff ff52 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002078:	2281      	movs	r2, #129	; 0x81
 800207a:	2105      	movs	r1, #5
 800207c:	2030      	movs	r0, #48	; 0x30
 800207e:	f7ff ff4d 	bl	8001f1c <write_single_icm20948_reg>

	HAL_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f001 f892 	bl	80031ac <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002088:	213b      	movs	r1, #59	; 0x3b
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff ff14 	bl	8001eb8 <read_single_icm20948_reg>
 8002090:	0003      	movs	r3, r0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	0002      	movs	r2, r0
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	1c0a      	adds	r2, r1, #0
 80020aa:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80020ac:	220c      	movs	r2, #12
 80020ae:	2103      	movs	r1, #3
 80020b0:	2030      	movs	r0, #48	; 0x30
 80020b2:	f7ff ff33 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	001a      	movs	r2, r3
 80020bc:	2104      	movs	r1, #4
 80020be:	2030      	movs	r0, #48	; 0x30
 80020c0:	f7ff ff2c 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	2106      	movs	r1, #6
 80020cc:	2030      	movs	r0, #48	; 0x30
 80020ce:	f7ff ff25 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80020d2:	2281      	movs	r2, #129	; 0x81
 80020d4:	2105      	movs	r1, #5
 80020d6:	2030      	movs	r0, #48	; 0x30
 80020d8:	f7ff ff20 	bl	8001f1c <write_single_icm20948_reg>
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <read_multiple_ak09916_reg>:

uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0002      	movs	r2, r0
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	1c0a      	adds	r2, r1, #0
 80020f4:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80020f6:	228c      	movs	r2, #140	; 0x8c
 80020f8:	2103      	movs	r1, #3
 80020fa:	2030      	movs	r0, #48	; 0x30
 80020fc:	f7ff ff0e 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	001a      	movs	r2, r3
 8002106:	2104      	movs	r1, #4
 8002108:	2030      	movs	r0, #48	; 0x30
 800210a:	f7ff ff07 	bl	8001f1c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	4252      	negs	r2, r2
 8002116:	4313      	orrs	r3, r2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	001a      	movs	r2, r3
 800211c:	2105      	movs	r1, #5
 800211e:	2030      	movs	r0, #48	; 0x30
 8002120:	f7ff fefc 	bl	8001f1c <write_single_icm20948_reg>

	HAL_Delay(1);
 8002124:	2001      	movs	r0, #1
 8002126:	f001 f841 	bl	80031ac <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	001a      	movs	r2, r3
 8002130:	213b      	movs	r1, #59	; 0x3b
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff ff20 	bl	8001f78 <read_multiple_icm20948_reg>
 8002138:	0003      	movs	r3, r0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}

08002142 <icm20948_init>:

static void ak09916_init();
static void icm20948_init();

void icm20948_init()
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	f7ff fa1e 	bl	8001588 <icm20948_who_am_i>
 800214c:	0003      	movs	r3, r0
 800214e:	001a      	movs	r2, r3
 8002150:	2301      	movs	r3, #1
 8002152:	4053      	eors	r3, r2
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f6      	bne.n	8002148 <icm20948_init+0x6>

	icm20948_device_reset();
 800215a:	f7ff fa3e 	bl	80015da <icm20948_device_reset>
	icm20948_wakeup();
 800215e:	f7ff fa55 	bl	800160c <icm20948_wakeup>

	icm20948_clock_source(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff fae5 	bl	8001732 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002168:	f7ff fb04 	bl	8001774 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 800216c:	f7ff fa6c 	bl	8001648 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff fb09 	bl	8001788 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff fb2a 	bl	80017d0 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fb4b 	bl	8001818 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fb59 	bl	800183a <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002188:	f7ff fb91 	bl	80018ae <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 800218c:	f7ff fc54 	bl	8001a38 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002190:	2003      	movs	r0, #3
 8002192:	f7ff fda5 	bl	8001ce0 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8002196:	2003      	movs	r0, #3
 8002198:	f7ff fdfe 	bl	8001d98 <icm20948_accel_full_scale_select>
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <ak09916_init>:

void ak09916_init()
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 80021a6:	f7ff fa6a 	bl	800167e <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 80021aa:	f7ff fa83 	bl	80016b4 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 80021ae:	2007      	movs	r0, #7
 80021b0:	f7ff fa9e 	bl	80016f0 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	f7ff f9fc 	bl	80015b2 <ak09916_who_am_i>
 80021ba:	0003      	movs	r3, r0
 80021bc:	001a      	movs	r2, r3
 80021be:	2301      	movs	r3, #1
 80021c0:	4053      	eors	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f6      	bne.n	80021b6 <ak09916_init+0x14>

	ak09916_soft_reset();
 80021c8:	f7ff fa14 	bl	80015f4 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80021cc:	2008      	movs	r0, #8
 80021ce:	f7ff fb5b 	bl	8001888 <ak09916_operation_mode_setting>
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <IMU_Init>:

void IMU_Init()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 80021dc:	f000 fcc2 	bl	8002b64 <MX_SPI1_Init>
	icm20948_init();
 80021e0:	f7ff ffaf 	bl	8002142 <icm20948_init>
	ak09916_init();
 80021e4:	f7ff ffdd 	bl	80021a2 <ak09916_init>
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <print_imu_raw>:
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer2, m, 100);
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer3, n, 100);
}*/

void print_imu_raw()
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b0af      	sub	sp, #188	; 0xbc
 80021f4:	af04      	add	r7, sp, #16
	char buffer1[50] = {0};
 80021f6:	2368      	movs	r3, #104	; 0x68
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	3304      	adds	r3, #4
 8002200:	222e      	movs	r2, #46	; 0x2e
 8002202:	2100      	movs	r1, #0
 8002204:	0018      	movs	r0, r3
 8002206:	f004 ff67 	bl	80070d8 <memset>
	char buffer2[50] = {0};
 800220a:	2234      	movs	r2, #52	; 0x34
 800220c:	18bb      	adds	r3, r7, r2
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	3304      	adds	r3, #4
 8002214:	222e      	movs	r2, #46	; 0x2e
 8002216:	2100      	movs	r1, #0
 8002218:	0018      	movs	r0, r3
 800221a:	f004 ff5d 	bl	80070d8 <memset>
	char buffer3[50] = {0};
 800221e:	003b      	movs	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	3304      	adds	r3, #4
 8002226:	222e      	movs	r2, #46	; 0x2e
 8002228:	2100      	movs	r1, #0
 800222a:	0018      	movs	r0, r3
 800222c:	f004 ff54 	bl	80070d8 <memset>
	int l = sprintf(buffer1, "%02x%02x%02x%02x%02x%02x", ((gyro.x & 0xff00)>>8), (gyro.x & 0xff), ((gyro.y & 0xff00)>>8), (gyro.y & 0xff), ((gyro.z & 0xff00)>>8), (gyro.z & 0xff));
 8002230:	4b54      	ldr	r3, [pc, #336]	; (8002384 <print_imu_raw+0x194>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	b29b      	uxth	r3, r3
 8002238:	469c      	mov	ip, r3
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <print_imu_raw+0x194>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	001a      	movs	r2, r3
 8002240:	23ff      	movs	r3, #255	; 0xff
 8002242:	0014      	movs	r4, r2
 8002244:	401c      	ands	r4, r3
 8002246:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <print_imu_raw+0x194>)
 8002248:	885b      	ldrh	r3, [r3, #2]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	001d      	movs	r5, r3
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <print_imu_raw+0x194>)
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	001a      	movs	r2, r3
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	4013      	ands	r3, r2
 800225a:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <print_imu_raw+0x194>)
 800225c:	8892      	ldrh	r2, [r2, #4]
 800225e:	0a12      	lsrs	r2, r2, #8
 8002260:	b292      	uxth	r2, r2
 8002262:	0016      	movs	r6, r2
 8002264:	4a47      	ldr	r2, [pc, #284]	; (8002384 <print_imu_raw+0x194>)
 8002266:	8892      	ldrh	r2, [r2, #4]
 8002268:	0011      	movs	r1, r2
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	400a      	ands	r2, r1
 800226e:	4946      	ldr	r1, [pc, #280]	; (8002388 <print_imu_raw+0x198>)
 8002270:	2068      	movs	r0, #104	; 0x68
 8002272:	1838      	adds	r0, r7, r0
 8002274:	9203      	str	r2, [sp, #12]
 8002276:	9602      	str	r6, [sp, #8]
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	9500      	str	r5, [sp, #0]
 800227c:	0023      	movs	r3, r4
 800227e:	4662      	mov	r2, ip
 8002280:	f004 ff32 	bl	80070e8 <siprintf>
 8002284:	0003      	movs	r3, r0
 8002286:	21a4      	movs	r1, #164	; 0xa4
 8002288:	187c      	adds	r4, r7, r1
 800228a:	6023      	str	r3, [r4, #0]
	int m = sprintf(buffer2, "%02x%02x%02x%02x%02x%02x", ((accel.x & 0xff00)>>8), (accel.x & 0xff), ((accel.y & 0xff00)>>8), (accel.y & 0xff), ((accel.z & 0xff00)>>8), (accel.z & 0xff));
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <print_imu_raw+0x19c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	b29b      	uxth	r3, r3
 8002294:	469c      	mov	ip, r3
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <print_imu_raw+0x19c>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	001a      	movs	r2, r3
 800229c:	23ff      	movs	r3, #255	; 0xff
 800229e:	0014      	movs	r4, r2
 80022a0:	401c      	ands	r4, r3
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <print_imu_raw+0x19c>)
 80022a4:	885b      	ldrh	r3, [r3, #2]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	001d      	movs	r5, r3
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <print_imu_raw+0x19c>)
 80022ae:	885b      	ldrh	r3, [r3, #2]
 80022b0:	001a      	movs	r2, r3
 80022b2:	23ff      	movs	r3, #255	; 0xff
 80022b4:	4013      	ands	r3, r2
 80022b6:	4a35      	ldr	r2, [pc, #212]	; (800238c <print_imu_raw+0x19c>)
 80022b8:	8892      	ldrh	r2, [r2, #4]
 80022ba:	0a12      	lsrs	r2, r2, #8
 80022bc:	b292      	uxth	r2, r2
 80022be:	0016      	movs	r6, r2
 80022c0:	4a32      	ldr	r2, [pc, #200]	; (800238c <print_imu_raw+0x19c>)
 80022c2:	8892      	ldrh	r2, [r2, #4]
 80022c4:	0011      	movs	r1, r2
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	400a      	ands	r2, r1
 80022ca:	492f      	ldr	r1, [pc, #188]	; (8002388 <print_imu_raw+0x198>)
 80022cc:	2034      	movs	r0, #52	; 0x34
 80022ce:	1838      	adds	r0, r7, r0
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	9602      	str	r6, [sp, #8]
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	9500      	str	r5, [sp, #0]
 80022d8:	0023      	movs	r3, r4
 80022da:	4662      	mov	r2, ip
 80022dc:	f004 ff04 	bl	80070e8 <siprintf>
 80022e0:	0003      	movs	r3, r0
 80022e2:	24a0      	movs	r4, #160	; 0xa0
 80022e4:	193d      	adds	r5, r7, r4
 80022e6:	602b      	str	r3, [r5, #0]
	int n = sprintf(buffer3, "%02x%02x%02x%02x%02x%02x\r\n", ((mag.x & 0xff00)>>8), (mag.x & 0xff), ((mag.y & 0xff00)>>8), (mag.y & 0xff), ((mag.z & 0xff00)>>8), (mag.z & 0xff));
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <print_imu_raw+0x1a0>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	469c      	mov	ip, r3
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <print_imu_raw+0x1a0>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	001a      	movs	r2, r3
 80022f8:	23ff      	movs	r3, #255	; 0xff
 80022fa:	401a      	ands	r2, r3
 80022fc:	0014      	movs	r4, r2
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <print_imu_raw+0x1a0>)
 8002300:	885b      	ldrh	r3, [r3, #2]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	001d      	movs	r5, r3
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <print_imu_raw+0x1a0>)
 800230a:	885b      	ldrh	r3, [r3, #2]
 800230c:	001a      	movs	r2, r3
 800230e:	23ff      	movs	r3, #255	; 0xff
 8002310:	4013      	ands	r3, r2
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <print_imu_raw+0x1a0>)
 8002314:	8892      	ldrh	r2, [r2, #4]
 8002316:	0a12      	lsrs	r2, r2, #8
 8002318:	b292      	uxth	r2, r2
 800231a:	0016      	movs	r6, r2
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <print_imu_raw+0x1a0>)
 800231e:	8892      	ldrh	r2, [r2, #4]
 8002320:	0011      	movs	r1, r2
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	400a      	ands	r2, r1
 8002326:	491b      	ldr	r1, [pc, #108]	; (8002394 <print_imu_raw+0x1a4>)
 8002328:	0038      	movs	r0, r7
 800232a:	9203      	str	r2, [sp, #12]
 800232c:	9602      	str	r6, [sp, #8]
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	9500      	str	r5, [sp, #0]
 8002332:	0023      	movs	r3, r4
 8002334:	4662      	mov	r2, ip
 8002336:	f004 fed7 	bl	80070e8 <siprintf>
 800233a:	0003      	movs	r3, r0
 800233c:	259c      	movs	r5, #156	; 0x9c
 800233e:	197e      	adds	r6, r7, r5
 8002340:	6033      	str	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer1, l, 100);
 8002342:	21a4      	movs	r1, #164	; 0xa4
 8002344:	1879      	adds	r1, r7, r1
 8002346:	680b      	ldr	r3, [r1, #0]
 8002348:	b29a      	uxth	r2, r3
 800234a:	2068      	movs	r0, #104	; 0x68
 800234c:	1839      	adds	r1, r7, r0
 800234e:	4812      	ldr	r0, [pc, #72]	; (8002398 <print_imu_raw+0x1a8>)
 8002350:	2364      	movs	r3, #100	; 0x64
 8002352:	f004 f971 	bl	8006638 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer2, m, 100);
 8002356:	24a0      	movs	r4, #160	; 0xa0
 8002358:	193b      	adds	r3, r7, r4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	2034      	movs	r0, #52	; 0x34
 8002360:	1839      	adds	r1, r7, r0
 8002362:	480d      	ldr	r0, [pc, #52]	; (8002398 <print_imu_raw+0x1a8>)
 8002364:	2364      	movs	r3, #100	; 0x64
 8002366:	f004 f967 	bl	8006638 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer3, n, 100);
 800236a:	197b      	adds	r3, r7, r5
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
 8002370:	0039      	movs	r1, r7
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <print_imu_raw+0x1a8>)
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	f004 f95f 	bl	8006638 <HAL_UART_Transmit>
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b02b      	add	sp, #172	; 0xac
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000268 	.word	0x20000268
 8002388:	08007950 	.word	0x08007950
 800238c:	20000260 	.word	0x20000260
 8002390:	20000294 	.word	0x20000294
 8002394:	0800796c 	.word	0x0800796c
 8002398:	200003bc 	.word	0x200003bc

0800239c <IMU_read_all_raw>:

void IMU_read_all_raw()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	while(!ak09916_mag_read_raw(&mag) && attempt < 500)
 80023a0:	e004      	b.n	80023ac <IMU_read_all_raw+0x10>
	{
		attempt++;
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <IMU_read_all_raw+0x54>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <IMU_read_all_raw+0x54>)
 80023aa:	601a      	str	r2, [r3, #0]
	while(!ak09916_mag_read_raw(&mag) && attempt < 500)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <IMU_read_all_raw+0x58>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff f804 	bl	80013bc <ak09916_mag_read_raw>
 80023b4:	0003      	movs	r3, r0
 80023b6:	001a      	movs	r2, r3
 80023b8:	2301      	movs	r3, #1
 80023ba:	4053      	eors	r3, r2
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <IMU_read_all_raw+0x32>
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <IMU_read_all_raw+0x54>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	23fa      	movs	r3, #250	; 0xfa
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbe9      	blt.n	80023a2 <IMU_read_all_raw+0x6>
	}

	if(attempt < 500)
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <IMU_read_all_raw+0x54>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	23fa      	movs	r3, #250	; 0xfa
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	429a      	cmp	r2, r3
 80023d8:	da07      	bge.n	80023ea <IMU_read_all_raw+0x4e>
	{
		icm20948_gyro_read_raw(&gyro);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <IMU_read_all_raw+0x5c>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f7fe ff7d 	bl	80012dc <icm20948_gyro_read_raw>
		icm20948_accel_read_raw(&accel);
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <IMU_read_all_raw+0x60>)
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe ffb1 	bl	800134c <icm20948_accel_read_raw>
	}

}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000015c 	.word	0x2000015c
 80023f4:	20000294 	.word	0x20000294
 80023f8:	20000268 	.word	0x20000268
 80023fc:	20000260 	.word	0x20000260

08002400 <initialize_gpioa>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void initialize_gpioa(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	RCC->IOPRSTR |= RCC_IOPRSTR_GPIOARST;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <initialize_gpioa+0x30>)
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <initialize_gpioa+0x30>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
	RCC->IOPRSTR &= ~RCC_IOPRSTR_GPIOARST;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <initialize_gpioa+0x30>)
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <initialize_gpioa+0x30>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	61da      	str	r2, [r3, #28]
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <initialize_gpioa+0x30>)
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <initialize_gpioa+0x30>)
 8002422:	2101      	movs	r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000

08002434 <initialize_gpiob>:

void initialize_gpiob(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
    RCC->IOPRSTR |= RCC_IOPRSTR_GPIOBRST;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <initialize_gpiob+0x30>)
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <initialize_gpiob+0x30>)
 800243e:	2102      	movs	r1, #2
 8002440:	430a      	orrs	r2, r1
 8002442:	61da      	str	r2, [r3, #28]
    RCC->IOPRSTR &= ~RCC_IOPRSTR_GPIOBRST;
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <initialize_gpiob+0x30>)
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <initialize_gpiob+0x30>)
 800244a:	2102      	movs	r1, #2
 800244c:	438a      	bics	r2, r1
 800244e:	61da      	str	r2, [r3, #28]
    RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <initialize_gpiob+0x30>)
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <initialize_gpiob+0x30>)
 8002456:	2102      	movs	r1, #2
 8002458:	430a      	orrs	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40021000 	.word	0x40021000

08002468 <setup_gpio>:

void setup_gpio(GPIO_TypeDef  *GPIOx, int num, enum mode m, int pupd, int speed)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	701a      	strb	r2, [r3, #0]
    if(num > 15)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	dd00      	ble.n	8002480 <setup_gpio+0x18>
 800247e:	e197      	b.n	80027b0 <setup_gpio+0x348>
    {
        return;
    }
    //input mode
    if(m == input)
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d000      	beq.n	800248a <setup_gpio+0x22>
 8002488:	e076      	b.n	8002578 <setup_gpio+0x110>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	0052      	lsls	r2, r2, #1
 8002492:	2103      	movs	r1, #3
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	43d2      	mvns	r2, r2
 800249a:	401a      	ands	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]
    	GPIOx->PUPDR &= ~(3<<(2*num));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	2103      	movs	r1, #3
 80024aa:	4091      	lsls	r1, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	43d2      	mvns	r2, r2
 80024b0:	401a      	ands	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	60da      	str	r2, [r3, #12]
    	//pull up = 1; pull down = 0
    	if(pupd)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <setup_gpio+0x6a>
    	{
    		GPIOx->PUPDR |= (1<<(2*num));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	0052      	lsls	r2, r2, #1
 80024c4:	2101      	movs	r1, #1
 80024c6:	4091      	lsls	r1, r2
 80024c8:	000a      	movs	r2, r1
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	e009      	b.n	80024e6 <setup_gpio+0x7e>
    	}
    	else
    	{
    		GPIOx->PUPDR |= (2<<(2*num));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	0052      	lsls	r2, r2, #1
 80024da:	2102      	movs	r1, #2
 80024dc:	4091      	lsls	r1, r2
 80024de:	000a      	movs	r2, r1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	60da      	str	r2, [r3, #12]
    	}
    	if(speed == 0)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <setup_gpio+0x9a>
    	{
    		GPIOx->OSPEEDR &= ~(3<<(2*num));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	0052      	lsls	r2, r2, #1
 80024f4:	2103      	movs	r1, #3
 80024f6:	4091      	lsls	r1, r2
 80024f8:	000a      	movs	r2, r1
 80024fa:	43d2      	mvns	r2, r2
 80024fc:	401a      	ands	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
    	}
    	if(speed == 1)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d114      	bne.n	8002532 <setup_gpio+0xca>
    	{
    		GPIOx->OSPEEDR &= ~(3<<(2*num));
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	0052      	lsls	r2, r2, #1
 8002510:	2103      	movs	r1, #3
 8002512:	4091      	lsls	r1, r2
 8002514:	000a      	movs	r2, r1
 8002516:	43d2      	mvns	r2, r2
 8002518:	401a      	ands	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
    		GPIOx->OSPEEDR |= (1<<(2*num));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	0052      	lsls	r2, r2, #1
 8002526:	2101      	movs	r1, #1
 8002528:	4091      	lsls	r1, r2
 800252a:	000a      	movs	r2, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
    	}
    	if(speed == 2)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d115      	bne.n	8002564 <setup_gpio+0xfc>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	0052      	lsls	r2, r2, #1
 8002540:	2103      	movs	r1, #3
 8002542:	4091      	lsls	r1, r2
 8002544:	000a      	movs	r2, r1
 8002546:	43d2      	mvns	r2, r2
 8002548:	401a      	ands	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (2<<(2*num));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	0052      	lsls	r2, r2, #1
 8002556:	2102      	movs	r1, #2
 8002558:	4091      	lsls	r1, r2
 800255a:	000a      	movs	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	e009      	b.n	8002578 <setup_gpio+0x110>
		}
    	else
    	{
    		GPIOx->OSPEEDR |= (3<<(2*num));
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	0052      	lsls	r2, r2, #1
 800256c:	2103      	movs	r1, #3
 800256e:	4091      	lsls	r1, r2
 8002570:	000a      	movs	r2, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
    	}
    }
    //output mode
    if(m == output)
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d15d      	bne.n	800263c <setup_gpio+0x1d4>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	0052      	lsls	r2, r2, #1
 8002588:	2103      	movs	r1, #3
 800258a:	4091      	lsls	r1, r2
 800258c:	000a      	movs	r2, r1
 800258e:	43d2      	mvns	r2, r2
 8002590:	401a      	ands	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
    	GPIOx->MODER |= (1<<(2*num));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	0052      	lsls	r2, r2, #1
 800259e:	2101      	movs	r1, #1
 80025a0:	4091      	lsls	r1, r2
 80025a2:	000a      	movs	r2, r1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	601a      	str	r2, [r3, #0]
    	if(speed == 0)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <setup_gpio+0x15e>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	2103      	movs	r1, #3
 80025ba:	4091      	lsls	r1, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	43d2      	mvns	r2, r2
 80025c0:	401a      	ands	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
		}
		if(speed == 1)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d114      	bne.n	80025f6 <setup_gpio+0x18e>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	2103      	movs	r1, #3
 80025d6:	4091      	lsls	r1, r2
 80025d8:	000a      	movs	r2, r1
 80025da:	43d2      	mvns	r2, r2
 80025dc:	401a      	ands	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (1<<(2*num));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	0052      	lsls	r2, r2, #1
 80025ea:	2101      	movs	r1, #1
 80025ec:	4091      	lsls	r1, r2
 80025ee:	000a      	movs	r2, r1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	609a      	str	r2, [r3, #8]
		}
		if(speed == 2)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d115      	bne.n	8002628 <setup_gpio+0x1c0>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	0052      	lsls	r2, r2, #1
 8002604:	2103      	movs	r1, #3
 8002606:	4091      	lsls	r1, r2
 8002608:	000a      	movs	r2, r1
 800260a:	43d2      	mvns	r2, r2
 800260c:	401a      	ands	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (2<<(2*num));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	0052      	lsls	r2, r2, #1
 800261a:	2102      	movs	r1, #2
 800261c:	4091      	lsls	r1, r2
 800261e:	000a      	movs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	e009      	b.n	800263c <setup_gpio+0x1d4>
		}
		else
		{
			GPIOx->OSPEEDR |= (3<<(2*num));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	2103      	movs	r1, #3
 8002632:	4091      	lsls	r1, r2
 8002634:	000a      	movs	r2, r1
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
		}
    }
    //alt mode
    if(m == alternate)
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d15d      	bne.n	8002700 <setup_gpio+0x298>
    {
    	GPIOx->MODER &= ~(3<<(2*num));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	0052      	lsls	r2, r2, #1
 800264c:	2103      	movs	r1, #3
 800264e:	4091      	lsls	r1, r2
 8002650:	000a      	movs	r2, r1
 8002652:	43d2      	mvns	r2, r2
 8002654:	401a      	ands	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
    	GPIOx->MODER |= (2<<(2*num));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	0052      	lsls	r2, r2, #1
 8002662:	2102      	movs	r1, #2
 8002664:	4091      	lsls	r1, r2
 8002666:	000a      	movs	r2, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
    	if(speed == 0)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <setup_gpio+0x222>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	0052      	lsls	r2, r2, #1
 800267c:	2103      	movs	r1, #3
 800267e:	4091      	lsls	r1, r2
 8002680:	000a      	movs	r2, r1
 8002682:	43d2      	mvns	r2, r2
 8002684:	401a      	ands	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	609a      	str	r2, [r3, #8]
		}
		if(speed == 1)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d114      	bne.n	80026ba <setup_gpio+0x252>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	0052      	lsls	r2, r2, #1
 8002698:	2103      	movs	r1, #3
 800269a:	4091      	lsls	r1, r2
 800269c:	000a      	movs	r2, r1
 800269e:	43d2      	mvns	r2, r2
 80026a0:	401a      	ands	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (1<<(2*num));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	0052      	lsls	r2, r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	4091      	lsls	r1, r2
 80026b2:	000a      	movs	r2, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
		}
		if(speed == 2)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d115      	bne.n	80026ec <setup_gpio+0x284>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	0052      	lsls	r2, r2, #1
 80026c8:	2103      	movs	r1, #3
 80026ca:	4091      	lsls	r1, r2
 80026cc:	000a      	movs	r2, r1
 80026ce:	43d2      	mvns	r2, r2
 80026d0:	401a      	ands	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (2<<(2*num));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	0052      	lsls	r2, r2, #1
 80026de:	2102      	movs	r1, #2
 80026e0:	4091      	lsls	r1, r2
 80026e2:	000a      	movs	r2, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	e009      	b.n	8002700 <setup_gpio+0x298>
		}
		else
		{
			GPIOx->OSPEEDR |= (3<<(2*num));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	0052      	lsls	r2, r2, #1
 80026f4:	2103      	movs	r1, #3
 80026f6:	4091      	lsls	r1, r2
 80026f8:	000a      	movs	r2, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	609a      	str	r2, [r3, #8]
		}
    }
    //analog mode
    if(m == analog)
 8002700:	1dfb      	adds	r3, r7, #7
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d154      	bne.n	80027b2 <setup_gpio+0x34a>
    {
    	GPIOx->MODER |= (3<<(2*num));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	2103      	movs	r1, #3
 8002712:	4091      	lsls	r1, r2
 8002714:	000a      	movs	r2, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]
    	if(speed == 0)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <setup_gpio+0x2d0>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	0052      	lsls	r2, r2, #1
 800272a:	2103      	movs	r1, #3
 800272c:	4091      	lsls	r1, r2
 800272e:	000a      	movs	r2, r1
 8002730:	43d2      	mvns	r2, r2
 8002732:	401a      	ands	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]
		}
		if(speed == 1)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d114      	bne.n	8002768 <setup_gpio+0x300>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	0052      	lsls	r2, r2, #1
 8002746:	2103      	movs	r1, #3
 8002748:	4091      	lsls	r1, r2
 800274a:	000a      	movs	r2, r1
 800274c:	43d2      	mvns	r2, r2
 800274e:	401a      	ands	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (1<<(2*num));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	0052      	lsls	r2, r2, #1
 800275c:	2101      	movs	r1, #1
 800275e:	4091      	lsls	r1, r2
 8002760:	000a      	movs	r2, r1
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]
		}
		if(speed == 2)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d115      	bne.n	800279a <setup_gpio+0x332>
		{
			GPIOx->OSPEEDR &= ~(3<<(2*num));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	0052      	lsls	r2, r2, #1
 8002776:	2103      	movs	r1, #3
 8002778:	4091      	lsls	r1, r2
 800277a:	000a      	movs	r2, r1
 800277c:	43d2      	mvns	r2, r2
 800277e:	401a      	ands	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= (2<<(2*num));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	0052      	lsls	r2, r2, #1
 800278c:	2102      	movs	r1, #2
 800278e:	4091      	lsls	r1, r2
 8002790:	000a      	movs	r2, r1
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e00b      	b.n	80027b2 <setup_gpio+0x34a>
		}
		else
		{
			GPIOx->OSPEEDR |= (3<<(2*num));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	0052      	lsls	r2, r2, #1
 80027a2:	2103      	movs	r1, #3
 80027a4:	4091      	lsls	r1, r2
 80027a6:	000a      	movs	r2, r1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e000      	b.n	80027b2 <setup_gpio+0x34a>
        return;
 80027b0:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
    	//error state
    }
}
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b004      	add	sp, #16
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <setup_alt>:

void setup_alt(GPIO_TypeDef  *GPIOx, int num, int mode)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
	if(num < 8)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b07      	cmp	r3, #7
 80027c8:	dc15      	bgt.n	80027f6 <setup_alt+0x3e>
	{
		GPIOx->AFR[0] &= ~(0xf<<(4*(num)));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	210f      	movs	r1, #15
 80027d4:	4091      	lsls	r1, r2
 80027d6:	000a      	movs	r2, r1
 80027d8:	43d2      	mvns	r2, r2
 80027da:	401a      	ands	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	621a      	str	r2, [r3, #32]
		GPIOx->AFR[0] |= mode << (4*(num));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4091      	lsls	r1, r2
 80027ec:	000a      	movs	r2, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]
	else
	{
		GPIOx->AFR[1] &= ~(0xf<<(4*(num-8)));
		GPIOx->AFR[1] |= mode << (4*(num-8));
	}
}
 80027f4:	e016      	b.n	8002824 <setup_alt+0x6c>
		GPIOx->AFR[1] &= ~(0xf<<(4*(num-8)));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	3a08      	subs	r2, #8
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	210f      	movs	r1, #15
 8002802:	4091      	lsls	r1, r2
 8002804:	000a      	movs	r2, r1
 8002806:	43d2      	mvns	r2, r2
 8002808:	401a      	ands	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFR[1] |= mode << (4*(num-8));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	3a08      	subs	r2, #8
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4091      	lsls	r1, r2
 800281c:	000a      	movs	r2, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}

0800282c <toggle_on>:

void toggle_on(GPIO_TypeDef  *GPIOx, int num)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    GPIOx->ODR |= (1<<num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2101      	movs	r1, #1
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4091      	lsls	r1, r2
 8002840:	000a      	movs	r2, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	615a      	str	r2, [r3, #20]
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <toggle_off>:

void toggle_off(GPIO_TypeDef  *GPIOx, int num)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
    GPIOx->ODR &= ~(1<<num);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2101      	movs	r1, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4091      	lsls	r1, r2
 8002864:	000a      	movs	r2, r1
 8002866:	43d2      	mvns	r2, r2
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	615a      	str	r2, [r3, #20]
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <setup_tim2>:
    }
    return 1;
}

void setup_tim2()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af02      	add	r7, sp, #8
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST;
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <setup_tim2+0xbc>)
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <setup_tim2+0xbc>)
 8002884:	2101      	movs	r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <setup_tim2+0xbc>)
 800288c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <setup_tim2+0xbc>)
 8002890:	2101      	movs	r1, #1
 8002892:	438a      	bics	r2, r1
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <setup_tim2+0xbc>)
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <setup_tim2+0xbc>)
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
    setup_gpio(GPIOA, 1, alternate, 0, 1);
 80028a2:	23a0      	movs	r3, #160	; 0xa0
 80028a4:	05d8      	lsls	r0, r3, #23
 80028a6:	2301      	movs	r3, #1
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	2202      	movs	r2, #2
 80028ae:	2101      	movs	r1, #1
 80028b0:	f7ff fdda 	bl	8002468 <setup_gpio>
    setup_alt(GPIOA, 1, 2);
 80028b4:	23a0      	movs	r3, #160	; 0xa0
 80028b6:	05db      	lsls	r3, r3, #23
 80028b8:	2202      	movs	r2, #2
 80028ba:	2101      	movs	r1, #1
 80028bc:	0018      	movs	r0, r3
 80028be:	f7ff ff7b 	bl	80027b8 <setup_alt>
    //TIM2->DIER |= TIM_DIER_UDE | TIM_DIER_CC2DE;
    TIM2->CR1 |= TIM_CR1_ARPE;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	05db      	lsls	r3, r3, #23
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
    //TIM2->EGR |= TIM_EGR_UG; // TIM_EGR_CC2G;
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE + TIM_CCMR1_OC2M_2 + TIM_CCMR1_OC2M_1;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	21d0      	movs	r1, #208	; 0xd0
 80028de:	01c9      	lsls	r1, r1, #7
 80028e0:	430a      	orrs	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]
    TIM2->PSC = 16000;
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	05db      	lsls	r3, r3, #23
 80028e8:	22fa      	movs	r2, #250	; 0xfa
 80028ea:	0192      	lsls	r2, r2, #6
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 50;
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	05db      	lsls	r3, r3, #23
 80028f2:	2232      	movs	r2, #50	; 0x32
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR2 = 40;
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	2228      	movs	r2, #40	; 0x28
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CCER |= TIM_CCER_CC2E;
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	05db      	lsls	r3, r3, #23
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	05db      	lsls	r3, r3, #23
 8002908:	2110      	movs	r1, #16
 800290a:	430a      	orrs	r2, r1
 800290c:	621a      	str	r2, [r3, #32]
    TIM2->CR1 |= TIM_CR1_CEN;
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	05db      	lsls	r3, r3, #23
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
    TIM2->EGR |= TIM_EGR_UG;
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	05db      	lsls	r3, r3, #23
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <print_adc>:
		 {}
	}
}

void print_adc(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
	char buffer[20];
	uint8_t value = 0;
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
	if(AD_RES < 420 || AD_RES > 1598)
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <print_adc+0x7c>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	23d2      	movs	r3, #210	; 0xd2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	429a      	cmp	r2, r3
 8002950:	d304      	bcc.n	800295c <print_adc+0x24>
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <print_adc+0x7c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <print_adc+0x80>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d904      	bls.n	8002966 <print_adc+0x2e>
	{
		value = 255;
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	22ff      	movs	r2, #255	; 0xff
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e012      	b.n	800298c <print_adc+0x54>
	}
	else
	{
		value = AD_RES * 10201/100000 - 13;
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <print_adc+0x7c>)
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	000b      	movs	r3, r1
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	185b      	adds	r3, r3, r1
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	00d2      	lsls	r2, r2, #3
 8002976:	1853      	adds	r3, r2, r1
 8002978:	4910      	ldr	r1, [pc, #64]	; (80029bc <print_adc+0x84>)
 800297a:	0018      	movs	r0, r3
 800297c:	f7fd fbce 	bl	800011c <__udivsi3>
 8002980:	0003      	movs	r3, r0
 8002982:	b2da      	uxtb	r2, r3
 8002984:	231f      	movs	r3, #31
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	3a0d      	subs	r2, #13
 800298a:	701a      	strb	r2, [r3, #0]
	}
	int l = sprintf(buffer, "SHW,0018,%04x", AD_RES);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <print_adc+0x7c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <print_adc+0x88>)
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	0018      	movs	r0, r3
 8002996:	f004 fba7 	bl	80070e8 <siprintf>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, l, 100);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	1d39      	adds	r1, r7, #4
 80029a4:	4807      	ldr	r0, [pc, #28]	; (80029c4 <print_adc+0x8c>)
 80029a6:	2364      	movs	r3, #100	; 0x64
 80029a8:	f003 fe46 	bl	8006638 <HAL_UART_Transmit>
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b008      	add	sp, #32
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000160 	.word	0x20000160
 80029b8:	0000063e 	.word	0x0000063e
 80029bc:	000186a0 	.word	0x000186a0
 80029c0:	080079a8 	.word	0x080079a8
 80029c4:	200003bc 	.word	0x200003bc

080029c8 <sample>:

void sample()
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc, &AD_RES, 1);
 80029cc:	4909      	ldr	r1, [pc, #36]	; (80029f4 <sample+0x2c>)
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <sample+0x30>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fd82 	bl	80034dc <HAL_ADC_Start_DMA>
	print_adc();
 80029d8:	f7ff ffae 	bl	8002938 <print_adc>
	print_imu_raw();
 80029dc:	f7ff fc08 	bl	80021f0 <print_imu_raw>
	if(AD_RES > 2000)
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <sample+0x2c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	23fa      	movs	r3, #250	; 0xfa
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d900      	bls.n	80029ee <sample+0x26>
	{
		asm("NOP");
 80029ec:	46c0      	nop			; (mov r8, r8)
	//__asm__("cpsid if");
	//IMU_read_all_raw(&gyro_buffer, &accel_buffer, &mag_buffer);
	//HAL_UART_Transmit(&huart1, (uint8_t*)temp, 7, 100);
	//BLE_transmit(gyro_buffer, accel_buffer, mag_buffer);
	//__asm__("cpsie if");
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000160 	.word	0x20000160
 80029f8:	200001b8 	.word	0x200001b8

080029fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a02:	f000 fb63 	bl	80030cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a06:	f000 f83d 	bl	8002a84 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialize_gpioa();
 8002a0a:	f7ff fcf9 	bl	8002400 <initialize_gpioa>
  initialize_gpiob();
 8002a0e:	f7ff fd11 	bl	8002434 <initialize_gpiob>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a12:	f7fe fbbd 	bl	8001190 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002a16:	f000 f9c5 	bl	8002da4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002a1a:	f7fe fbdb 	bl	80011d4 <MX_I2C1_Init>
  //MX_SPI1_Init();
  MX_USART1_UART_Init();
 8002a1e:	f000 fa87 	bl	8002f30 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8002a22:	f7fe fb8f 	bl	8001144 <MX_DMA_Init>
  MX_TIM6_Init();
 8002a26:	f000 fa13 	bl	8002e50 <MX_TIM6_Init>
  MX_ADC_Init();
 8002a2a:	f7fe f9f5 	bl	8000e18 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	0018      	movs	r0, r3
 8002a34:	f001 fce0 	bl	80043f8 <HAL_PWR_EnableWakeUpPin>
  setup_gpio(GPIOA, 1, output, 0, 0);
 8002a38:	23a0      	movs	r3, #160	; 0xa0
 8002a3a:	05d8      	lsls	r0, r3, #23
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	2201      	movs	r2, #1
 8002a44:	2101      	movs	r1, #1
 8002a46:	f7ff fd0f 	bl	8002468 <setup_gpio>
  toggle_off(GPIOA, 1);
 8002a4a:	23a0      	movs	r3, #160	; 0xa0
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	2101      	movs	r1, #1
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fefd 	bl	8002850 <toggle_off>
  //setup_tim2();
  IMU_Init();
 8002a56:	f7ff fbbf 	bl	80021d8 <IMU_Init>
  BLE_Init();
 8002a5a:	f7fe faad 	bl	8000fb8 <BLE_Init>
  //HAL_UART_Transmit(&huart1, (uint8_t*)sleep, 16, 100);
  //reset_reg();
  //HAL_PWR_EnterSTANDBYMode();
  //ADC_config();
  HAL_Delay(3000);
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <main+0x80>)
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fba3 	bl	80031ac <HAL_Delay>
  setup_tim2();
 8002a66:	f7ff ff07 	bl	8002878 <setup_tim2>
  //setup_tim6();
  HAL_TIM_Base_Start_IT(&htim6);
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <main+0x84>)
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f003 fa03 	bl	8005e78 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //debug_imu();
  while (1)
  {
	  IMU_read_all_raw();
 8002a72:	f7ff fc93 	bl	800239c <IMU_read_all_raw>
	  asm("NOP");
 8002a76:	46c0      	nop			; (mov r8, r8)
	  IMU_read_all_raw();
 8002a78:	e7fb      	b.n	8002a72 <main+0x76>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	00000bb8 	.word	0x00000bb8
 8002a80:	20000334 	.word	0x20000334

08002a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b09b      	sub	sp, #108	; 0x6c
 8002a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8a:	2434      	movs	r4, #52	; 0x34
 8002a8c:	193b      	adds	r3, r7, r4
 8002a8e:	0018      	movs	r0, r3
 8002a90:	2334      	movs	r3, #52	; 0x34
 8002a92:	001a      	movs	r2, r3
 8002a94:	2100      	movs	r1, #0
 8002a96:	f004 fb1f 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	2314      	movs	r3, #20
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f004 fb17 	bl	80070d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aaa:	003b      	movs	r3, r7
 8002aac:	0018      	movs	r0, r3
 8002aae:	2320      	movs	r3, #32
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f004 fb10 	bl	80070d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <SystemClock_Config+0xcc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <SystemClock_Config+0xd0>)
 8002abe:	401a      	ands	r2, r3
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <SystemClock_Config+0xcc>)
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	0109      	lsls	r1, r1, #4
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aca:	0021      	movs	r1, r4
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2202      	movs	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2210      	movs	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 fc96 	bl	8004418 <HAL_RCC_OscConfig>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002af0:	f000 f832 	bl	8002b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af4:	2120      	movs	r1, #32
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	220f      	movs	r2, #15
 8002afa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2201      	movs	r2, #1
 8002b00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2100      	movs	r1, #0
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f001 fff9 	bl	8004b10 <HAL_RCC_ClockConfig>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b22:	f000 f819 	bl	8002b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002b26:	003b      	movs	r3, r7
 8002b28:	2209      	movs	r2, #9
 8002b2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b32:	003b      	movs	r3, r7
 8002b34:	2200      	movs	r2, #0
 8002b36:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	003b      	movs	r3, r7
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f002 fa0c 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b44:	f000 f808 	bl	8002b58 <Error_Handler>
  }
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b01b      	add	sp, #108	; 0x6c
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	40007000 	.word	0x40007000
 8002b54:	ffffe7ff 	.word	0xffffe7ff

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <Error_Handler+0x8>
	...

08002b64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <MX_SPI1_Init+0x6c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b70:	2282      	movs	r2, #130	; 0x82
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	0092      	lsls	r2, r2, #2
 8002b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b98:	2218      	movs	r2, #24
 8002b9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <MX_SPI1_Init+0x68>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f002 fb14 	bl	80051e4 <HAL_SPI_Init>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002bc0:	f7ff ffca 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	2000029c 	.word	0x2000029c
 8002bd0:	40013000 	.word	0x40013000

08002bd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08b      	sub	sp, #44	; 0x2c
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	240c      	movs	r4, #12
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	0018      	movs	r0, r3
 8002be2:	2314      	movs	r3, #20
 8002be4:	001a      	movs	r2, r3
 8002be6:	2100      	movs	r1, #0
 8002be8:	f004 fa76 	bl	80070d8 <memset>
  if(spiHandle->Instance==SPI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d131      	bne.n	8002c5a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
	  setup_gpio(GPIOA, 15, output, 0, 3);
 8002bf6:	23a0      	movs	r3, #160	; 0xa0
 8002bf8:	05d8      	lsls	r0, r3, #23
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2201      	movs	r2, #1
 8002c02:	210f      	movs	r1, #15
 8002c04:	f7ff fc30 	bl	8002468 <setup_gpio>
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0149      	lsls	r1, r1, #5
 8002c12:	430a      	orrs	r2, r1
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c2e:	0021      	movs	r1, r4
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2238      	movs	r2, #56	; 0x38
 8002c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2202      	movs	r2, #2
 8002c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2203      	movs	r2, #3
 8002c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_SPI_MspInit+0x98>)
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f001 f905 	bl	8003e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b009      	add	sp, #36	; 0x24
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40013000 	.word	0x40013000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	50000400 	.word	0x50000400

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_MspInit+0x24>)
 8002c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_MspInit+0x24>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_MspInit+0x24>)
 8002c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_MspInit+0x24>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	0549      	lsls	r1, r1, #21
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000

08002c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <NMI_Handler+0x4>

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cbc:	f000 fa5a 	bl	8003174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//print_ad();
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <DMA1_Channel1_IRQHandler+0x14>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 ffec 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000170 	.word	0x20000170

08002ce0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 ffe0 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000374 	.word	0x20000374

08002cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <TIM3_IRQHandler+0x14>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f003 f90c 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200002f4 	.word	0x200002f4

08002d10 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	//TIM6->SR &= ~TIM_SR_UIF;
	sample();
 8002d14:	f7ff fe58 	bl	80029c8 <sample>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <TIM6_IRQHandler+0x18>)
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f003 f8fe 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
	//TIM6->EGR |= TIM_EGR_UG;
  /* USER CODE END TIM6_IRQn 1 */
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000334 	.word	0x20000334

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f004 f992 	bl	8007084 <__errno>
 8002d60:	0003      	movs	r3, r0
 8002d62:	220c      	movs	r2, #12
 8002d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	425b      	negs	r3, r3
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	18d2      	adds	r2, r2, r3
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <_sbrk+0x64>)
 8002d7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b006      	add	sp, #24
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20005000 	.word	0x20005000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	20000164 	.word	0x20000164
 8002d94:	20000458 	.word	0x20000458

08002d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002daa:	2308      	movs	r3, #8
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	0018      	movs	r0, r3
 8002db0:	2310      	movs	r3, #16
 8002db2:	001a      	movs	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	f004 f98f 	bl	80070d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dba:	003b      	movs	r3, r7
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f004 f988 	bl	80070d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <MX_TIM3_Init+0xa4>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <MX_TIM3_Init+0xa8>)
 8002dde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002dee:	0018      	movs	r0, r3
 8002df0:	f003 f802 	bl	8005df8 <HAL_TIM_Base_Init>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002df8:	f7ff feae 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	0152      	lsls	r2, r2, #5
 8002e04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e06:	187a      	adds	r2, r7, r1
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f003 f96d 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e16:	f7ff fe9f 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e20:	003b      	movs	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e26:	003a      	movs	r2, r7
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_TIM3_Init+0xa0>)
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f003 fb51 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002e36:	f7ff fe8f 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b006      	add	sp, #24
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	200002f4 	.word	0x200002f4
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	0000ffff 	.word	0x0000ffff

08002e50 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e56:	003b      	movs	r3, r7
 8002e58:	0018      	movs	r0, r3
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f004 f93a 	bl	80070d8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <MX_TIM6_Init+0x70>)
 8002e68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e6c:	22fa      	movs	r2, #250	; 0xfa
 8002e6e:	0192      	lsls	r2, r2, #6
 8002e70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e7a:	220a      	movs	r2, #10
 8002e7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f002 ffb6 	bl	8005df8 <HAL_TIM_Base_Init>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002e90:	f7ff fe62 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e94:	003b      	movs	r3, r7
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ea0:	003a      	movs	r2, r7
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_TIM6_Init+0x6c>)
 8002ea4:	0011      	movs	r1, r2
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f003 fb14 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002eb0:	f7ff fe52 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000334 	.word	0x20000334
 8002ec0:	40001000 	.word	0x40001000

08002ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_TIM_Base_MspInit+0x60>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_TIM_Base_MspInit+0x64>)
 8002ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_TIM_Base_MspInit+0x64>)
 8002edc:	2102      	movs	r1, #2
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2010      	movs	r0, #16
 8002ee8:	f000 fdd0 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eec:	2010      	movs	r0, #16
 8002eee:	f000 fde2 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002ef2:	e012      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_TIM_Base_MspInit+0x68>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10d      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_TIM_Base_MspInit+0x64>)
 8002f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_TIM_Base_MspInit+0x64>)
 8002f04:	2110      	movs	r1, #16
 8002f06:	430a      	orrs	r2, r1
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2011      	movs	r0, #17
 8002f10:	f000 fdbc 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002f14:	2011      	movs	r0, #17
 8002f16:	f000 fdce 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40001000 	.word	0x40001000

08002f30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <MX_USART1_UART_Init+0x60>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f3c:	22e1      	movs	r2, #225	; 0xe1
 8002f3e:	0252      	lsls	r2, r2, #9
 8002f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f5c:	22c0      	movs	r2, #192	; 0xc0
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <MX_USART1_UART_Init+0x5c>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f003 fb0a 	bl	8006590 <HAL_UART_Init>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002f80:	f7ff fdea 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	200003bc 	.word	0x200003bc
 8002f90:	40013800 	.word	0x40013800

08002f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	240c      	movs	r4, #12
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f004 f896 	bl	80070d8 <memset>
  if(uartHandle->Instance==USART1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_UART_MspInit+0xd4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d153      	bne.n	800305e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_UART_MspInit+0xd8>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_UART_MspInit+0xd8>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	01c9      	lsls	r1, r1, #7
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_UART_MspInit+0xd8>)
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_UART_MspInit+0xd8>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_UART_MspInit+0xd8>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	22f0      	movs	r2, #240	; 0xf0
 8002fe0:	0152      	lsls	r2, r2, #5
 8002fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	0021      	movs	r1, r4
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2202      	movs	r2, #2
 8002fea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	187a      	adds	r2, r7, r1
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	0011      	movs	r1, r2
 8003006:	0018      	movs	r0, r3
 8003008:	f000 ff2c 	bl	8003e64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_UART_MspInit+0xdc>)
 800300e:	4a19      	ldr	r2, [pc, #100]	; (8003074 <HAL_UART_MspInit+0xe0>)
 8003010:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003014:	2203      	movs	r2, #3
 8003016:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_UART_MspInit+0xdc>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_UART_MspInit+0xdc>)
 800302c:	2200      	movs	r2, #0
 800302e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003038:	2200      	movs	r2, #0
 800303a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_UART_MspInit+0xdc>)
 800303e:	2200      	movs	r2, #0
 8003040:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fd53 	bl	8003af0 <HAL_DMA_Init>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800304e:	f7ff fd83 	bl	8002b58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a06      	ldr	r2, [pc, #24]	; (8003070 <HAL_UART_MspInit+0xdc>)
 8003056:	671a      	str	r2, [r3, #112]	; 0x70
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_UART_MspInit+0xdc>)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b009      	add	sp, #36	; 0x24
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40013800 	.word	0x40013800
 800306c:	40021000 	.word	0x40021000
 8003070:	20000374 	.word	0x20000374
 8003074:	40020030 	.word	0x40020030

08003078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800307a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800307e:	490e      	ldr	r1, [pc, #56]	; (80030b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <LoopForever+0xe>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003084:	e002      	b.n	800308c <LoopCopyDataInit>

08003086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308a:	3304      	adds	r3, #4

0800308c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800308c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003090:	d3f9      	bcc.n	8003086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003094:	4c0b      	ldr	r4, [pc, #44]	; (80030c4 <LoopForever+0x16>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003098:	e001      	b.n	800309e <LoopFillZerobss>

0800309a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800309c:	3204      	adds	r2, #4

0800309e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a0:	d3fb      	bcc.n	800309a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030a2:	f7ff fe79 	bl	8002d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a6:	f003 fff3 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030aa:	f7ff fca7 	bl	80029fc <main>

080030ae <LoopForever>:

LoopForever:
    b LoopForever
 80030ae:	e7fe      	b.n	80030ae <LoopForever>
   ldr   r0, =_estack
 80030b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80030b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b8:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80030bc:	08007aac 	.word	0x08007aac
  ldr r2, =_sbss
 80030c0:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80030c4:	20000454 	.word	0x20000454

080030c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c8:	e7fe      	b.n	80030c8 <ADC1_COMP_IRQHandler>
	...

080030cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_Init+0x3c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_Init+0x3c>)
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 f811 	bl	800310c <HAL_InitTick>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e001      	b.n	80030fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030f6:	f7ff fdbb 	bl	8002c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	40022000 	.word	0x40022000

0800310c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_InitTick+0x5c>)
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_InitTick+0x60>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	0019      	movs	r1, r3
 800311e:	23fa      	movs	r3, #250	; 0xfa
 8003120:	0098      	lsls	r0, r3, #2
 8003122:	f7fc fffb 	bl	800011c <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	0019      	movs	r1, r3
 800312a:	0020      	movs	r0, r4
 800312c:	f7fc fff6 	bl	800011c <__udivsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fccf 	bl	8003ad6 <HAL_SYSTICK_Config>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d001      	beq.n	8003140 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e00f      	b.n	8003160 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d80b      	bhi.n	800315e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	2301      	movs	r3, #1
 800314a:	425b      	negs	r3, r3
 800314c:	2200      	movs	r2, #0
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fc9c 	bl	8003a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_InitTick+0x64>)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b003      	add	sp, #12
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	200000c0 	.word	0x200000c0
 800316c:	200000c8 	.word	0x200000c8
 8003170:	200000c4 	.word	0x200000c4

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_IncTick+0x1c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	001a      	movs	r2, r3
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_IncTick+0x20>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	18d2      	adds	r2, r2, r3
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_IncTick+0x20>)
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	200000c8 	.word	0x200000c8
 8003194:	20000440 	.word	0x20000440

08003198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  return uwTick;
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <HAL_GetTick+0x10>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	20000440 	.word	0x20000440

080031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff fff0 	bl	8003198 <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_Delay+0x44>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	001a      	movs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	f7ff ffe0 	bl	8003198 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d8f7      	bhi.n	80031d4 <HAL_Delay+0x28>
  {
  }
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	200000c8 	.word	0x200000c8

080031f4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e159      	b.n	80034ba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2250      	movs	r2, #80	; 0x50
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f7fd fe5e 	bl	8000ee0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	2210      	movs	r2, #16
 800322a:	4013      	ands	r3, r2
 800322c:	2b10      	cmp	r3, #16
 800322e:	d005      	beq.n	800323c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2204      	movs	r2, #4
 8003238:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800323a:	d00b      	beq.n	8003254 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	2210      	movs	r2, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2250      	movs	r2, #80	; 0x50
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e132      	b.n	80034ba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	4a9a      	ldr	r2, [pc, #616]	; (80034c4 <HAL_ADC_Init+0x2d0>)
 800325a:	4013      	ands	r3, r2
 800325c:	2202      	movs	r2, #2
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2203      	movs	r2, #3
 800326c:	4013      	ands	r3, r2
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_ADC_Init+0x90>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ADC_Init+0x90>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_ADC_Init+0x92>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d149      	bne.n	800331e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	429a      	cmp	r2, r3
 8003294:	d00b      	beq.n	80032ae <HAL_ADC_Init+0xba>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	429a      	cmp	r2, r3
 80032a0:	d005      	beq.n	80032ae <HAL_ADC_Init+0xba>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d111      	bne.n	80032d2 <HAL_ADC_Init+0xde>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	0892      	lsrs	r2, r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6919      	ldr	r1, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]
 80032d0:	e014      	b.n	80032fc <HAL_ADC_Init+0x108>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	0892      	lsrs	r2, r2, #2
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 80032e8:	4978      	ldr	r1, [pc, #480]	; (80034cc <HAL_ADC_Init+0x2d8>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 80032f0:	6819      	ldr	r1, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4b74      	ldr	r3, [pc, #464]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2118      	movs	r1, #24
 8003308:	438a      	bics	r2, r1
 800330a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68d9      	ldr	r1, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b69      	ldr	r3, [pc, #420]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 8003324:	496a      	ldr	r1, [pc, #424]	; (80034d0 <HAL_ADC_Init+0x2dc>)
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	065a      	lsls	r2, r3, #25
 8003334:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <HAL_ADC_Init+0x2d4>)
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	055b      	lsls	r3, r3, #21
 8003344:	4013      	ands	r3, r2
 8003346:	d108      	bne.n	800335a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	0549      	lsls	r1, r1, #21
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	495b      	ldr	r1, [pc, #364]	; (80034d4 <HAL_ADC_Init+0x2e0>)
 8003366:	400a      	ands	r2, r1
 8003368:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68d9      	ldr	r1, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_Init+0x18c>
 800337c:	2304      	movs	r3, #4
 800337e:	e000      	b.n	8003382 <HAL_ADC_Init+0x18e>
 8003380:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003382:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2020      	movs	r0, #32
 8003388:	5c1b      	ldrb	r3, [r3, r0]
 800338a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800338c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	202c      	movs	r0, #44	; 0x2c
 8003392:	5c1b      	ldrb	r3, [r3, r0]
 8003394:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003396:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800339c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80033a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80033ac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ba:	23c2      	movs	r3, #194	; 0xc2
 80033bc:	33ff      	adds	r3, #255	; 0xff
 80033be:	429a      	cmp	r2, r3
 80033c0:	d00b      	beq.n	80033da <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68d9      	ldr	r1, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2221      	movs	r2, #33	; 0x21
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11a      	bne.n	800341a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	0249      	lsls	r1, r1, #9
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	e00b      	b.n	800341a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	2220      	movs	r2, #32
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	2201      	movs	r2, #1
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d11f      	bne.n	8003462 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	492a      	ldr	r1, [pc, #168]	; (80034d8 <HAL_ADC_Init+0x2e4>)
 800342e:	400a      	ands	r2, r1
 8003430:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6919      	ldr	r1, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003440:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003446:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2101      	movs	r1, #1
 800345c:	430a      	orrs	r2, r1
 800345e:	611a      	str	r2, [r3, #16]
 8003460:	e00e      	b.n	8003480 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2107      	movs	r1, #7
 800348c:	438a      	bics	r2, r1
 800348e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6959      	ldr	r1, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2203      	movs	r2, #3
 80034ae:	4393      	bics	r3, r2
 80034b0:	2201      	movs	r2, #1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b002      	add	sp, #8
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	fffffefd 	.word	0xfffffefd
 80034c8:	40012708 	.word	0x40012708
 80034cc:	ffc3ffff 	.word	0xffc3ffff
 80034d0:	fdffffff 	.word	0xfdffffff
 80034d4:	fffe0219 	.word	0xfffe0219
 80034d8:	fffffc03 	.word	0xfffffc03

080034dc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e8:	2317      	movs	r3, #23
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2204      	movs	r2, #4
 80034f8:	4013      	ands	r3, r2
 80034fa:	d15e      	bne.n	80035ba <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2250      	movs	r2, #80	; 0x50
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_Start_DMA+0x2e>
 8003506:	2302      	movs	r3, #2
 8003508:	e05e      	b.n	80035c8 <HAL_ADC_Start_DMA+0xec>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2250      	movs	r2, #80	; 0x50
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	430a      	orrs	r2, r1
 8003520:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d007      	beq.n	800353a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800352a:	2317      	movs	r3, #23
 800352c:	18fc      	adds	r4, r7, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f8f3 	bl	800371c <ADC_Enable>
 8003536:	0003      	movs	r3, r0
 8003538:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800353a:	2317      	movs	r3, #23
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13e      	bne.n	80035c2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_ADC_Start_DMA+0xf4>)
 800354a:	4013      	ands	r3, r2
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	0052      	lsls	r2, r2, #1
 8003550:	431a      	orrs	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2250      	movs	r2, #80	; 0x50
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_ADC_Start_DMA+0xf8>)
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_ADC_Start_DMA+0xfc>)
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <HAL_ADC_Start_DMA+0x100>)
 800357a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	221c      	movs	r2, #28
 8003582:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2110      	movs	r1, #16
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3340      	adds	r3, #64	; 0x40
 800359e:	0019      	movs	r1, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f000 fb1c 	bl	8003be0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2104      	movs	r1, #4
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e003      	b.n	80035c2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035ba:	2317      	movs	r3, #23
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b007      	add	sp, #28
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	fffff0fe 	.word	0xfffff0fe
 80035d4:	080037ed 	.word	0x080037ed
 80035d8:	080038a1 	.word	0x080038a1
 80035dc:	080038bf 	.word	0x080038bf

080035e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2250      	movs	r2, #80	; 0x50
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e06c      	b.n	8003702 <HAL_ADC_ConfigChannel+0xf2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2250      	movs	r2, #80	; 0x50
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2204      	movs	r2, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d00b      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	2220      	movs	r2, #32
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2250      	movs	r2, #80	; 0x50
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e056      	b.n	8003702 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <HAL_ADC_ConfigChannel+0xfc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d028      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	035b      	lsls	r3, r3, #13
 800366a:	0b5a      	lsrs	r2, r3, #13
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	02db      	lsls	r3, r3, #11
 800367c:	4013      	ands	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	0409      	lsls	r1, r1, #16
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800368e:	200a      	movs	r0, #10
 8003690:	f000 f930 	bl	80038f4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	029b      	lsls	r3, r3, #10
 800369c:	4013      	ands	r3, r2
 800369e:	d02b      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	03c9      	lsls	r1, r1, #15
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e023      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	035b      	lsls	r3, r3, #13
 80036bc:	0b5b      	lsrs	r3, r3, #13
 80036be:	43d9      	mvns	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	400a      	ands	r2, r1
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	02db      	lsls	r3, r3, #11
 80036d0:	4013      	ands	r3, r2
 80036d2:	d005      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036da:	490e      	ldr	r1, [pc, #56]	; (8003714 <HAL_ADC_ConfigChannel+0x104>)
 80036dc:	400a      	ands	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	029b      	lsls	r3, r3, #10
 80036e8:	4013      	ands	r3, r2
 80036ea:	d005      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_ADC_ConfigChannel+0x100>)
 80036f2:	4909      	ldr	r1, [pc, #36]	; (8003718 <HAL_ADC_ConfigChannel+0x108>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2250      	movs	r2, #80	; 0x50
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	00001001 	.word	0x00001001
 8003710:	40012708 	.word	0x40012708
 8003714:	ff7fffff 	.word	0xff7fffff
 8003718:	ffbfffff 	.word	0xffbfffff

0800371c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2203      	movs	r2, #3
 8003730:	4013      	ands	r3, r2
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <ADC_Enable+0x2c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4013      	ands	r3, r2
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <ADC_Enable+0x2c>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <ADC_Enable+0x2e>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d146      	bne.n	80037dc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <ADC_Enable+0xcc>)
 8003756:	4013      	ands	r3, r2
 8003758:	d00d      	beq.n	8003776 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	2210      	movs	r2, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	2201      	movs	r2, #1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e033      	b.n	80037de <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003786:	2001      	movs	r0, #1
 8003788:	f000 f8b4 	bl	80038f4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800378c:	f7ff fd04 	bl	8003198 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003794:	e01b      	b.n	80037ce <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003796:	f7ff fcff 	bl	8003198 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b0a      	cmp	r3, #10
 80037a2:	d914      	bls.n	80037ce <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d00d      	beq.n	80037ce <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	2210      	movs	r2, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	2201      	movs	r2, #1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d1dc      	bne.n	8003796 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	80000017 	.word	0x80000017

080037ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	2250      	movs	r2, #80	; 0x50
 8003800:	4013      	ands	r3, r2
 8003802:	d141      	bne.n	8003888 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	23c0      	movs	r3, #192	; 0xc0
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4013      	ands	r3, r2
 800381e:	d12e      	bne.n	800387e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003826:	2b00      	cmp	r3, #0
 8003828:	d129      	bne.n	800387e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	4013      	ands	r3, r2
 8003834:	2b08      	cmp	r3, #8
 8003836:	d122      	bne.n	800387e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2204      	movs	r2, #4
 8003840:	4013      	ands	r3, r2
 8003842:	d110      	bne.n	8003866 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	210c      	movs	r1, #12
 8003850:	438a      	bics	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	4a10      	ldr	r2, [pc, #64]	; (800389c <ADC_DMAConvCplt+0xb0>)
 800385a:	4013      	ands	r3, r2
 800385c:	2201      	movs	r2, #1
 800385e:	431a      	orrs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
 8003864:	e00b      	b.n	800387e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	2220      	movs	r2, #32
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	2201      	movs	r2, #1
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff fead 	bl	80035e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003886:	e005      	b.n	8003894 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	0010      	movs	r0, r2
 8003892:	4798      	blx	r3
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}
 800389c:	fffffefe 	.word	0xfffffefe

080038a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff fe9d 	bl	80035f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}

080038be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	2204      	movs	r2, #4
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fe8a 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b004      	add	sp, #16
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <ADC_DelayMicroSecond+0x38>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	490b      	ldr	r1, [pc, #44]	; (8003930 <ADC_DelayMicroSecond+0x3c>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fc fc0a 	bl	800011c <__udivsi3>
 8003908:	0003      	movs	r3, r0
 800390a:	001a      	movs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4353      	muls	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003912:	e002      	b.n	800391a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3b01      	subs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f9      	bne.n	8003914 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	200000c0 	.word	0x200000c0
 8003930:	000f4240 	.word	0x000f4240

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b7f      	cmp	r3, #127	; 0x7f
 8003946:	d809      	bhi.n	800395c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	231f      	movs	r3, #31
 8003950:	401a      	ands	r2, r3
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_EnableIRQ+0x30>)
 8003954:	2101      	movs	r1, #1
 8003956:	4091      	lsls	r1, r2
 8003958:	000a      	movs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  }
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	0002      	movs	r2, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b7f      	cmp	r3, #127	; 0x7f
 800397c:	d828      	bhi.n	80039d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b25b      	sxtb	r3, r3
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	33c0      	adds	r3, #192	; 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	1dfa      	adds	r2, r7, #7
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	0011      	movs	r1, r2
 8003994:	2203      	movs	r2, #3
 8003996:	400a      	ands	r2, r1
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	4091      	lsls	r1, r2
 800399e:	000a      	movs	r2, r1
 80039a0:	43d2      	mvns	r2, r2
 80039a2:	401a      	ands	r2, r3
 80039a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	401a      	ands	r2, r3
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	4003      	ands	r3, r0
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	481f      	ldr	r0, [pc, #124]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	430a      	orrs	r2, r1
 80039c8:	33c0      	adds	r3, #192	; 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ce:	e031      	b.n	8003a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	0019      	movs	r1, r3
 80039d8:	230f      	movs	r3, #15
 80039da:	400b      	ands	r3, r1
 80039dc:	3b08      	subs	r3, #8
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3306      	adds	r3, #6
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1dfa      	adds	r2, r7, #7
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	0011      	movs	r1, r2
 80039f0:	2203      	movs	r2, #3
 80039f2:	400a      	ands	r2, r1
 80039f4:	00d2      	lsls	r2, r2, #3
 80039f6:	21ff      	movs	r1, #255	; 0xff
 80039f8:	4091      	lsls	r1, r2
 80039fa:	000a      	movs	r2, r1
 80039fc:	43d2      	mvns	r2, r2
 80039fe:	401a      	ands	r2, r3
 8003a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	401a      	ands	r2, r3
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	2303      	movs	r3, #3
 8003a12:	4003      	ands	r3, r0
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a18:	4809      	ldr	r0, [pc, #36]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	001c      	movs	r4, r3
 8003a20:	230f      	movs	r3, #15
 8003a22:	4023      	ands	r3, r4
 8003a24:	3b08      	subs	r3, #8
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	3306      	adds	r3, #6
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	18c3      	adds	r3, r0, r3
 8003a30:	3304      	adds	r3, #4
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1e5a      	subs	r2, r3, #1
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	045b      	lsls	r3, r3, #17
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d301      	bcc.n	8003a5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e010      	b.n	8003a7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <SysTick_Config+0x44>)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	3a01      	subs	r2, #1
 8003a62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a64:	2301      	movs	r3, #1
 8003a66:	425b      	negs	r3, r3
 8003a68:	2103      	movs	r1, #3
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7ff ff7c 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <SysTick_Config+0x44>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <SysTick_Config+0x44>)
 8003a78:	2207      	movs	r2, #7
 8003a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	e000e010 	.word	0xe000e010

08003a8c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	210f      	movs	r1, #15
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	1c02      	adds	r2, r0, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	0002      	movs	r2, r0
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff ff33 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ffaf 	bl	8003a44 <SysTick_Config>
 8003ae6:	0003      	movs	r3, r0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e061      	b.n	8003bc6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a32      	ldr	r2, [pc, #200]	; (8003bd0 <HAL_DMA_Init+0xe0>)
 8003b08:	4694      	mov	ip, r2
 8003b0a:	4463      	add	r3, ip
 8003b0c:	2114      	movs	r1, #20
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7fc fb04 	bl	800011c <__udivsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <HAL_DMA_Init+0xe4>)
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2225      	movs	r2, #37	; 0x25
 8003b26:	2102      	movs	r1, #2
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <HAL_DMA_Init+0xe8>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	01db      	lsls	r3, r3, #7
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d018      	beq.n	8003bae <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_DMA_Init+0xec>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	211c      	movs	r1, #28
 8003b86:	400b      	ands	r3, r1
 8003b88:	210f      	movs	r1, #15
 8003b8a:	4099      	lsls	r1, r3
 8003b8c:	000b      	movs	r3, r1
 8003b8e:	43d9      	mvns	r1, r3
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_DMA_Init+0xec>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_DMA_Init+0xec>)
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	201c      	movs	r0, #28
 8003ba4:	4003      	ands	r3, r0
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_DMA_Init+0xec>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2225      	movs	r2, #37	; 0x25
 8003bb8:	2101      	movs	r1, #1
 8003bba:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b004      	add	sp, #16
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	bffdfff8 	.word	0xbffdfff8
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	ffff800f 	.word	0xffff800f
 8003bdc:	400200a8 	.word	0x400200a8

08003be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2317      	movs	r3, #23
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2224      	movs	r2, #36	; 0x24
 8003bfa:	5c9b      	ldrb	r3, [r3, r2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_DMA_Start_IT+0x24>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e04f      	b.n	8003ca4 <HAL_DMA_Start_IT+0xc4>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2225      	movs	r2, #37	; 0x25
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d13a      	bne.n	8003c8e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2225      	movs	r2, #37	; 0x25
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	438a      	bics	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f8e3 	bl	8003e08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	210e      	movs	r1, #14
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e00f      	b.n	8003c7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2104      	movs	r1, #4
 8003c68:	438a      	bics	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	210a      	movs	r1, #10
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e007      	b.n	8003c9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2224      	movs	r2, #36	; 0x24
 8003c92:	2100      	movs	r1, #0
 8003c94:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c96:	2317      	movs	r3, #23
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003c9e:	2317      	movs	r3, #23
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	781b      	ldrb	r3, [r3, #0]
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b006      	add	sp, #24
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	221c      	movs	r2, #28
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2204      	movs	r2, #4
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d026      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x7a>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d107      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	221c      	movs	r2, #28
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2104      	movs	r1, #4
 8003d0a:	4091      	lsls	r1, r2
 8003d0c:	000a      	movs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d100      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x6e>
 8003d18:	e071      	b.n	8003dfe <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	0010      	movs	r0, r2
 8003d22:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003d24:	e06b      	b.n	8003dfe <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	221c      	movs	r2, #28
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2202      	movs	r2, #2
 8003d30:	409a      	lsls	r2, r3
 8003d32:	0013      	movs	r3, r2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	d02d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xea>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d029      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d10b      	bne.n	8003d66 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	210a      	movs	r1, #10
 8003d5a:	438a      	bics	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2225      	movs	r2, #37	; 0x25
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	221c      	movs	r2, #28
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2102      	movs	r1, #2
 8003d74:	4091      	lsls	r1, r2
 8003d76:	000a      	movs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d039      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	0010      	movs	r0, r2
 8003d92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d94:	e033      	b.n	8003dfe <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	221c      	movs	r2, #28
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2208      	movs	r2, #8
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	d02a      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x154>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2208      	movs	r2, #8
 8003dae:	4013      	ands	r3, r2
 8003db0:	d026      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	210e      	movs	r1, #14
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	221c      	movs	r2, #28
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4091      	lsls	r1, r2
 8003dd2:	000a      	movs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2225      	movs	r2, #37	; 0x25
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	0010      	movs	r0, r2
 8003dfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46c0      	nop			; (mov r8, r8)
}
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	221c      	movs	r2, #28
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2101      	movs	r1, #1
 8003e24:	4091      	lsls	r1, r2
 8003e26:	000a      	movs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d108      	bne.n	8003e4c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e4a:	e007      	b.n	8003e5c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e7a:	e155      	b.n	8004128 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4091      	lsls	r1, r2
 8003e86:	000a      	movs	r2, r1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d100      	bne.n	8003e94 <HAL_GPIO_Init+0x30>
 8003e92:	e146      	b.n	8004122 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2203      	movs	r2, #3
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d005      	beq.n	8003eac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d130      	bne.n	8003f0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	0013      	movs	r3, r2
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	0013      	movs	r3, r2
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	0013      	movs	r3, r2
 8003eea:	43da      	mvns	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	2201      	movs	r2, #1
 8003efa:	401a      	ands	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	409a      	lsls	r2, r3
 8003f00:	0013      	movs	r3, r2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2203      	movs	r2, #3
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d017      	beq.n	8003f4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	409a      	lsls	r2, r3
 8003f28:	0013      	movs	r3, r2
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d123      	bne.n	8003f9e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	0092      	lsls	r2, r2, #2
 8003f60:	58d3      	ldr	r3, [r2, r3]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2207      	movs	r2, #7
 8003f68:	4013      	ands	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	0013      	movs	r3, r2
 8003f72:	43da      	mvns	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2107      	movs	r1, #7
 8003f82:	400b      	ands	r3, r1
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	409a      	lsls	r2, r3
 8003f88:	0013      	movs	r3, r2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	0092      	lsls	r2, r2, #2
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	23c0      	movs	r3, #192	; 0xc0
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <HAL_GPIO_Init+0x17c>
 8003fde:	e0a0      	b.n	8004122 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe0:	4b57      	ldr	r3, [pc, #348]	; (8004140 <HAL_GPIO_Init+0x2dc>)
 8003fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe4:	4b56      	ldr	r3, [pc, #344]	; (8004140 <HAL_GPIO_Init+0x2dc>)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fec:	4a55      	ldr	r2, [pc, #340]	; (8004144 <HAL_GPIO_Init+0x2e0>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	589b      	ldr	r3, [r3, r2]
 8003ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	4013      	ands	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	409a      	lsls	r2, r3
 8004006:	0013      	movs	r3, r2
 8004008:	43da      	mvns	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	23a0      	movs	r3, #160	; 0xa0
 8004014:	05db      	lsls	r3, r3, #23
 8004016:	429a      	cmp	r2, r3
 8004018:	d01f      	beq.n	800405a <HAL_GPIO_Init+0x1f6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <HAL_GPIO_Init+0x2e4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0x1f2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a49      	ldr	r2, [pc, #292]	; (800414c <HAL_GPIO_Init+0x2e8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0x1ee>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a48      	ldr	r2, [pc, #288]	; (8004150 <HAL_GPIO_Init+0x2ec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_GPIO_Init+0x1ea>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_GPIO_Init+0x2f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <HAL_GPIO_Init+0x1e6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_GPIO_Init+0x2f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_GPIO_Init+0x1e2>
 8004042:	2305      	movs	r3, #5
 8004044:	e00a      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 8004046:	2306      	movs	r3, #6
 8004048:	e008      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 800404a:	2304      	movs	r3, #4
 800404c:	e006      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 800404e:	2303      	movs	r3, #3
 8004050:	e004      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 8004052:	2302      	movs	r3, #2
 8004054:	e002      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_GPIO_Init+0x1f8>
 800405a:	2300      	movs	r3, #0
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	2103      	movs	r1, #3
 8004060:	400a      	ands	r2, r1
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	4093      	lsls	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800406c:	4935      	ldr	r1, [pc, #212]	; (8004144 <HAL_GPIO_Init+0x2e0>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	3302      	adds	r3, #2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_GPIO_Init+0x2f8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43da      	mvns	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	025b      	lsls	r3, r3, #9
 8004092:	4013      	ands	r3, r2
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80040a4:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040c8:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43da      	mvns	r2, r3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	035b      	lsls	r3, r3, #13
 80040e6:	4013      	ands	r3, r2
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_GPIO_Init+0x2f8>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43da      	mvns	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	039b      	lsls	r3, r3, #14
 8004110:	4013      	ands	r3, r2
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_GPIO_Init+0x2f8>)
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	40da      	lsrs	r2, r3
 8004130:	1e13      	subs	r3, r2, #0
 8004132:	d000      	beq.n	8004136 <HAL_GPIO_Init+0x2d2>
 8004134:	e6a2      	b.n	8003e7c <HAL_GPIO_Init+0x18>
  }
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b006      	add	sp, #24
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	40010000 	.word	0x40010000
 8004148:	50000400 	.word	0x50000400
 800414c:	50000800 	.word	0x50000800
 8004150:	50000c00 	.word	0x50000c00
 8004154:	50001000 	.word	0x50001000
 8004158:	50001c00 	.word	0x50001c00
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	0008      	movs	r0, r1
 800416a:	0011      	movs	r1, r2
 800416c:	1cbb      	adds	r3, r7, #2
 800416e:	1c02      	adds	r2, r0, #0
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	1c7b      	adds	r3, r7, #1
 8004174:	1c0a      	adds	r2, r1, #0
 8004176:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004178:	1c7b      	adds	r3, r7, #1
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004180:	1cbb      	adds	r3, r7, #2
 8004182:	881a      	ldrh	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800418a:	1cbb      	adds	r3, r7, #2
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e082      	b.n	80042b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2241      	movs	r2, #65	; 0x41
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fd f845 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2241      	movs	r2, #65	; 0x41
 80041ce:	2124      	movs	r1, #36	; 0x24
 80041d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2101      	movs	r1, #1
 80041de:	438a      	bics	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_I2C_Init+0x120>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4931      	ldr	r1, [pc, #196]	; (80042c0 <HAL_I2C_Init+0x124>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d108      	bne.n	800421a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	0209      	lsls	r1, r1, #8
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e007      	b.n	800422a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2184      	movs	r1, #132	; 0x84
 8004224:	0209      	lsls	r1, r1, #8
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d104      	bne.n	800423c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	491f      	ldr	r1, [pc, #124]	; (80042c4 <HAL_I2C_Init+0x128>)
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	491a      	ldr	r1, [pc, #104]	; (80042c0 <HAL_I2C_Init+0x124>)
 8004258:	400a      	ands	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	431a      	orrs	r2, r3
 8004266:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69d9      	ldr	r1, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2241      	movs	r2, #65	; 0x41
 80042a0:	2120      	movs	r1, #32
 80042a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2242      	movs	r2, #66	; 0x42
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b002      	add	sp, #8
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	f0ffffff 	.word	0xf0ffffff
 80042c0:	ffff7fff 	.word	0xffff7fff
 80042c4:	02008000 	.word	0x02008000

080042c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2241      	movs	r2, #65	; 0x41
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d138      	bne.n	8004350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e032      	b.n	8004352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	2101      	movs	r1, #1
 80042f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2241      	movs	r2, #65	; 0x41
 80042f8:	2124      	movs	r1, #36	; 0x24
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4911      	ldr	r1, [pc, #68]	; (800435c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004318:	400a      	ands	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2101      	movs	r1, #1
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2241      	movs	r2, #65	; 0x41
 8004340:	2120      	movs	r1, #32
 8004342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	ffffefff 	.word	0xffffefff

08004360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2241      	movs	r2, #65	; 0x41
 800436e:	5c9b      	ldrb	r3, [r3, r2]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	d139      	bne.n	80043ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2240      	movs	r2, #64	; 0x40
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004380:	2302      	movs	r3, #2
 8004382:	e033      	b.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2241      	movs	r2, #65	; 0x41
 8004390:	2124      	movs	r1, #36	; 0x24
 8004392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	438a      	bics	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2241      	movs	r2, #65	; 0x41
 80043da:	2120      	movs	r1, #32
 80043dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	fffff0ff 	.word	0xfffff0ff

080043f8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40007000 	.word	0x40007000

08004418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b5b0      	push	{r4, r5, r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f000 fb6c 	bl	8004b04 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442c:	4bc8      	ldr	r3, [pc, #800]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	220c      	movs	r2, #12
 8004432:	4013      	ands	r3, r2
 8004434:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004436:	4bc6      	ldr	r3, [pc, #792]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	025b      	lsls	r3, r3, #9
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x36>
 800444c:	e07d      	b.n	800454a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d007      	beq.n	8004464 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d112      	bne.n	8004480 <HAL_RCC_OscConfig+0x68>
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	025b      	lsls	r3, r3, #9
 8004460:	429a      	cmp	r2, r3
 8004462:	d10d      	bne.n	8004480 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	4bba      	ldr	r3, [pc, #744]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	4013      	ands	r3, r2
 800446e:	d100      	bne.n	8004472 <HAL_RCC_OscConfig+0x5a>
 8004470:	e06a      	b.n	8004548 <HAL_RCC_OscConfig+0x130>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d166      	bne.n	8004548 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f000 fb42 	bl	8004b04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x84>
 800448c:	4bb0      	ldr	r3, [pc, #704]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4baf      	ldr	r3, [pc, #700]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	0249      	lsls	r1, r1, #9
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e027      	b.n	80044ec <HAL_RCC_OscConfig+0xd4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	23a0      	movs	r3, #160	; 0xa0
 80044a2:	02db      	lsls	r3, r3, #11
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d10e      	bne.n	80044c6 <HAL_RCC_OscConfig+0xae>
 80044a8:	4ba9      	ldr	r3, [pc, #676]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4ba8      	ldr	r3, [pc, #672]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	02c9      	lsls	r1, r1, #11
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	4ba6      	ldr	r3, [pc, #664]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4ba5      	ldr	r3, [pc, #660]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0249      	lsls	r1, r1, #9
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e012      	b.n	80044ec <HAL_RCC_OscConfig+0xd4>
 80044c6:	4ba2      	ldr	r3, [pc, #648]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4ba1      	ldr	r3, [pc, #644]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044cc:	49a1      	ldr	r1, [pc, #644]	; (8004754 <HAL_RCC_OscConfig+0x33c>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	4b9f      	ldr	r3, [pc, #636]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b9a      	ldr	r3, [pc, #616]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80044e6:	499c      	ldr	r1, [pc, #624]	; (8004758 <HAL_RCC_OscConfig+0x340>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d014      	beq.n	800451e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fe50 	bl	8003198 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fe:	f7fe fe4b 	bl	8003198 <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e2f9      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004510:	4b8f      	ldr	r3, [pc, #572]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0xe6>
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe fe3b 	bl	8003198 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004528:	f7fe fe36 	bl	8003198 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2e4      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	4013      	ands	r3, r2
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x110>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d100      	bne.n	8004556 <HAL_RCC_OscConfig+0x13e>
 8004554:	e099      	b.n	800468a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	2220      	movs	r2, #32
 8004560:	4013      	ands	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004564:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b79      	ldr	r3, [pc, #484]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800456a:	2120      	movs	r1, #32
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2220      	movs	r2, #32
 8004574:	4393      	bics	r3, r2
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b04      	cmp	r3, #4
 800457c:	d005      	beq.n	800458a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d13e      	bne.n	8004602 <HAL_RCC_OscConfig+0x1ea>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d13b      	bne.n	8004602 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800458a:	4b71      	ldr	r3, [pc, #452]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2204      	movs	r2, #4
 8004590:	4013      	ands	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_RCC_OscConfig+0x186>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e2b2      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_RCC_OscConfig+0x344>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	4b68      	ldr	r3, [pc, #416]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045b4:	4b66      	ldr	r3, [pc, #408]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2209      	movs	r2, #9
 80045ba:	4393      	bics	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c6:	f000 fbeb 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 80045ca:	0001      	movs	r1, r0
 80045cc:	4b60      	ldr	r3, [pc, #384]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	220f      	movs	r2, #15
 80045d4:	4013      	ands	r3, r2
 80045d6:	4a62      	ldr	r2, [pc, #392]	; (8004760 <HAL_RCC_OscConfig+0x348>)
 80045d8:	5cd3      	ldrb	r3, [r2, r3]
 80045da:	000a      	movs	r2, r1
 80045dc:	40da      	lsrs	r2, r3
 80045de:	4b61      	ldr	r3, [pc, #388]	; (8004764 <HAL_RCC_OscConfig+0x34c>)
 80045e0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80045e2:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCC_OscConfig+0x350>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2513      	movs	r5, #19
 80045e8:	197c      	adds	r4, r7, r5
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7fe fd8e 	bl	800310c <HAL_InitTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80045f4:	197b      	adds	r3, r7, r5
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d046      	beq.n	800468a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80045fc:	197b      	adds	r3, r7, r5
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	e280      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d027      	beq.n	8004658 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004608:	4b51      	ldr	r3, [pc, #324]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2209      	movs	r2, #9
 800460e:	4393      	bics	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe fdbd 	bl	8003198 <HAL_GetTick>
 800461e:	0003      	movs	r3, r0
 8004620:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004624:	f7fe fdb8 	bl	8003198 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e266      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004636:	4b46      	ldr	r3, [pc, #280]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	d0f1      	beq.n	8004624 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a45      	ldr	r2, [pc, #276]	; (800475c <HAL_RCC_OscConfig+0x344>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e018      	b.n	800468a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004658:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800465e:	2101      	movs	r1, #1
 8004660:	438a      	bics	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe fd98 	bl	8003198 <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fd93 	bl	8003198 <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e241      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2204      	movs	r2, #4
 8004686:	4013      	ands	r3, r2
 8004688:	d1f1      	bne.n	800466e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	4013      	ands	r3, r2
 8004692:	d100      	bne.n	8004696 <HAL_RCC_OscConfig+0x27e>
 8004694:	e0a1      	b.n	80047da <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d140      	bne.n	800471e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_OscConfig+0x29c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e227      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <HAL_RCC_OscConfig+0x354>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	4b23      	ldr	r3, [pc, #140]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c8:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	0a19      	lsrs	r1, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	061a      	lsls	r2, r3, #24
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	0b5b      	lsrs	r3, r3, #13
 80046e2:	3301      	adds	r3, #1
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	0212      	lsls	r2, r2, #8
 80046e8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046ea:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	210f      	movs	r1, #15
 80046f2:	400b      	ands	r3, r1
 80046f4:	491a      	ldr	r1, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x348>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCC_OscConfig+0x34c>)
 80046fc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCC_OscConfig+0x350>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2513      	movs	r5, #19
 8004704:	197c      	adds	r4, r7, r5
 8004706:	0018      	movs	r0, r3
 8004708:	f7fe fd00 	bl	800310c <HAL_InitTick>
 800470c:	0003      	movs	r3, r0
 800470e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004710:	197b      	adds	r3, r7, r5
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d060      	beq.n	80047da <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004718:	197b      	adds	r3, r7, r5
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	e1f2      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03f      	beq.n	80047a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_OscConfig+0x338>)
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0049      	lsls	r1, r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fe fd30 	bl	8003198 <HAL_GetTick>
 8004738:	0003      	movs	r3, r0
 800473a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800473c:	e018      	b.n	8004770 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800473e:	f7fe fd2b 	bl	8003198 <HAL_GetTick>
 8004742:	0002      	movs	r2, r0
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d911      	bls.n	8004770 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e1d9      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
 8004750:	40021000 	.word	0x40021000
 8004754:	fffeffff 	.word	0xfffeffff
 8004758:	fffbffff 	.word	0xfffbffff
 800475c:	ffffe0ff 	.word	0xffffe0ff
 8004760:	080079fc 	.word	0x080079fc
 8004764:	200000c0 	.word	0x200000c0
 8004768:	200000c4 	.word	0x200000c4
 800476c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004770:	4bc9      	ldr	r3, [pc, #804]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d0e0      	beq.n	800473e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800477c:	4bc6      	ldr	r3, [pc, #792]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4ac6      	ldr	r2, [pc, #792]	; (8004a9c <HAL_RCC_OscConfig+0x684>)
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1a      	ldr	r2, [r3, #32]
 800478a:	4bc3      	ldr	r3, [pc, #780]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004790:	4bc1      	ldr	r3, [pc, #772]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	0a19      	lsrs	r1, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	061a      	lsls	r2, r3, #24
 800479e:	4bbe      	ldr	r3, [pc, #760]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	e019      	b.n	80047da <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a6:	4bbc      	ldr	r3, [pc, #752]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4bbb      	ldr	r3, [pc, #748]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047ac:	49bc      	ldr	r1, [pc, #752]	; (8004aa0 <HAL_RCC_OscConfig+0x688>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fe fcf1 	bl	8003198 <HAL_GetTick>
 80047b6:	0003      	movs	r3, r0
 80047b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047bc:	f7fe fcec 	bl	8003198 <HAL_GetTick>
 80047c0:	0002      	movs	r2, r0
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e19a      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ce:	4bb2      	ldr	r3, [pc, #712]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4013      	ands	r3, r2
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2208      	movs	r2, #8
 80047e0:	4013      	ands	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d019      	beq.n	8004820 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ec:	4baa      	ldr	r3, [pc, #680]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f0:	4ba9      	ldr	r3, [pc, #676]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	430a      	orrs	r2, r1
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fe fcce 	bl	8003198 <HAL_GetTick>
 80047fc:	0003      	movs	r3, r0
 80047fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004802:	f7fe fcc9 	bl	8003198 <HAL_GetTick>
 8004806:	0002      	movs	r2, r0
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e177      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004814:	4ba0      	ldr	r3, [pc, #640]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004818:	2202      	movs	r2, #2
 800481a:	4013      	ands	r3, r2
 800481c:	d0f1      	beq.n	8004802 <HAL_RCC_OscConfig+0x3ea>
 800481e:	e018      	b.n	8004852 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004820:	4b9d      	ldr	r3, [pc, #628]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004824:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fe fcb4 	bl	8003198 <HAL_GetTick>
 8004830:	0003      	movs	r3, r0
 8004832:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004836:	f7fe fcaf 	bl	8003198 <HAL_GetTick>
 800483a:	0002      	movs	r2, r0
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e15d      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004848:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	2202      	movs	r2, #2
 800484e:	4013      	ands	r3, r2
 8004850:	d1f1      	bne.n	8004836 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2204      	movs	r2, #4
 8004858:	4013      	ands	r3, r2
 800485a:	d100      	bne.n	800485e <HAL_RCC_OscConfig+0x446>
 800485c:	e0ae      	b.n	80049bc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2023      	movs	r0, #35	; 0x23
 8004860:	183b      	adds	r3, r7, r0
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004866:	4b8c      	ldr	r3, [pc, #560]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	055b      	lsls	r3, r3, #21
 800486e:	4013      	ands	r3, r2
 8004870:	d109      	bne.n	8004886 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004876:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	0549      	lsls	r1, r1, #21
 800487c:	430a      	orrs	r2, r1
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004880:	183b      	adds	r3, r7, r0
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b87      	ldr	r3, [pc, #540]	; (8004aa4 <HAL_RCC_OscConfig+0x68c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4013      	ands	r3, r2
 8004890:	d11a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x68c>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b83      	ldr	r3, [pc, #524]	; (8004aa4 <HAL_RCC_OscConfig+0x68c>)
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0049      	lsls	r1, r1, #1
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a0:	f7fe fc7a 	bl	8003198 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048aa:	f7fe fc75 	bl	8003198 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	; 0x64
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e123      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	4b79      	ldr	r3, [pc, #484]	; (8004aa4 <HAL_RCC_OscConfig+0x68c>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4cc>
 80048d4:	4b70      	ldr	r3, [pc, #448]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d8:	4b6f      	ldr	r3, [pc, #444]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	0049      	lsls	r1, r1, #1
 80048de:	430a      	orrs	r2, r1
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
 80048e2:	e031      	b.n	8004948 <HAL_RCC_OscConfig+0x530>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_OscConfig+0x4ee>
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f0:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048f2:	496b      	ldr	r1, [pc, #428]	; (8004aa0 <HAL_RCC_OscConfig+0x688>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	651a      	str	r2, [r3, #80]	; 0x50
 80048f8:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fc:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80048fe:	496a      	ldr	r1, [pc, #424]	; (8004aa8 <HAL_RCC_OscConfig+0x690>)
 8004900:	400a      	ands	r2, r1
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
 8004904:	e020      	b.n	8004948 <HAL_RCC_OscConfig+0x530>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	23a0      	movs	r3, #160	; 0xa0
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	429a      	cmp	r2, r3
 8004910:	d10e      	bne.n	8004930 <HAL_RCC_OscConfig+0x518>
 8004912:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004916:	4b60      	ldr	r3, [pc, #384]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	00c9      	lsls	r1, r1, #3
 800491c:	430a      	orrs	r2, r1
 800491e:	651a      	str	r2, [r3, #80]	; 0x50
 8004920:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004924:	4b5c      	ldr	r3, [pc, #368]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0049      	lsls	r1, r1, #1
 800492a:	430a      	orrs	r2, r1
 800492c:	651a      	str	r2, [r3, #80]	; 0x50
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x530>
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004934:	4b58      	ldr	r3, [pc, #352]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004936:	495a      	ldr	r1, [pc, #360]	; (8004aa0 <HAL_RCC_OscConfig+0x688>)
 8004938:	400a      	ands	r2, r1
 800493a:	651a      	str	r2, [r3, #80]	; 0x50
 800493c:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 800493e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004940:	4b55      	ldr	r3, [pc, #340]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004942:	4959      	ldr	r1, [pc, #356]	; (8004aa8 <HAL_RCC_OscConfig+0x690>)
 8004944:	400a      	ands	r2, r1
 8004946:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fe fc22 	bl	8003198 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004958:	e009      	b.n	800496e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fe fc1d 	bl	8003198 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	4a51      	ldr	r2, [pc, #324]	; (8004aac <HAL_RCC_OscConfig+0x694>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0ca      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496e:	4b4a      	ldr	r3, [pc, #296]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4013      	ands	r3, r2
 8004978:	d0ef      	beq.n	800495a <HAL_RCC_OscConfig+0x542>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fe fc0c 	bl	8003198 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004984:	e009      	b.n	800499a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fc07 	bl	8003198 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	4a46      	ldr	r2, [pc, #280]	; (8004aac <HAL_RCC_OscConfig+0x694>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0b4      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 800499c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4013      	ands	r3, r2
 80049a4:	d1ef      	bne.n	8004986 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049a6:	2323      	movs	r3, #35	; 0x23
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80049b6:	493e      	ldr	r1, [pc, #248]	; (8004ab0 <HAL_RCC_OscConfig+0x698>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d100      	bne.n	80049c6 <HAL_RCC_OscConfig+0x5ae>
 80049c4:	e09d      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d100      	bne.n	80049ce <HAL_RCC_OscConfig+0x5b6>
 80049cc:	e076      	b.n	8004abc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d145      	bne.n	8004a62 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 80049dc:	4935      	ldr	r1, [pc, #212]	; (8004ab4 <HAL_RCC_OscConfig+0x69c>)
 80049de:	400a      	ands	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fe fbd9 	bl	8003198 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fe fbd4 	bl	8003198 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e082      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	049b      	lsls	r3, r3, #18
 8004a06:	4013      	ands	r3, r2
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x6a0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	431a      	orrs	r2, r3
 8004a24:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a26:	430a      	orrs	r2, r1
 8004a28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	0449      	lsls	r1, r1, #17
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fe fbae 	bl	8003198 <HAL_GetTick>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fe fba9 	bl	8003198 <HAL_GetTick>
 8004a46:	0002      	movs	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e057      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	049b      	lsls	r3, r3, #18
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x62a>
 8004a60:	e04f      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a68:	4912      	ldr	r1, [pc, #72]	; (8004ab4 <HAL_RCC_OscConfig+0x69c>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fe fb93 	bl	8003198 <HAL_GetTick>
 8004a72:	0003      	movs	r3, r0
 8004a74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe fb8e 	bl	8003198 <HAL_GetTick>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e03c      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a8a:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <HAL_RCC_OscConfig+0x680>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	049b      	lsls	r3, r3, #18
 8004a92:	4013      	ands	r3, r2
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x660>
 8004a96:	e034      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ea>
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	ffff1fff 	.word	0xffff1fff
 8004aa0:	fffffeff 	.word	0xfffffeff
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	fffffbff 	.word	0xfffffbff
 8004aac:	00001388 	.word	0x00001388
 8004ab0:	efffffff 	.word	0xefffffff
 8004ab4:	feffffff 	.word	0xfeffffff
 8004ab8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x6f4>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	025b      	lsls	r3, r3, #9
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10f      	bne.n	8004afe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	23f0      	movs	r3, #240	; 0xf0
 8004ae2:	039b      	lsls	r3, r3, #14
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	401a      	ands	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b00a      	add	sp, #40	; 0x28
 8004b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0c:	40021000 	.word	0x40021000

08004b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e128      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b96      	ldr	r3, [pc, #600]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d91e      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4393      	bics	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	4b90      	ldr	r3, [pc, #576]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b44:	f7fe fb28 	bl	8003198 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4c:	e009      	b.n	8004b62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4e:	f7fe fb23 	bl	8003198 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4a8a      	ldr	r2, [pc, #552]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e109      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b87      	ldr	r3, [pc, #540]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7a:	4b83      	ldr	r3, [pc, #524]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	22f0      	movs	r2, #240	; 0xf0
 8004b80:	4393      	bics	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	d100      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x8a>
 8004b98:	e089      	b.n	8004cae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba2:	4b79      	ldr	r3, [pc, #484]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	4013      	ands	r3, r2
 8004bac:	d120      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0e1      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bba:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	049b      	lsls	r3, r3, #18
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d114      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0d5      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0ca      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004be0:	4b69      	ldr	r3, [pc, #420]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0c2      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	4393      	bics	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b62      	ldr	r3, [pc, #392]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fe fac8 	bl	8003198 <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d111      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c14:	e009      	b.n	8004c2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c16:	f7fe fabf 	bl	8003198 <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0a5      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c2a:	4b57      	ldr	r3, [pc, #348]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	220c      	movs	r2, #12
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d1ef      	bne.n	8004c16 <HAL_RCC_ClockConfig+0x106>
 8004c36:	e03a      	b.n	8004cae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d111      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c40:	e009      	b.n	8004c56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c42:	f7fe faa9 	bl	8003198 <HAL_GetTick>
 8004c46:	0002      	movs	r2, r0
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	4a4d      	ldr	r2, [pc, #308]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e08f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c56:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d1ef      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x132>
 8004c62:	e024      	b.n	8004cae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6c:	e009      	b.n	8004c82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6e:	f7fe fa93 	bl	8003198 <HAL_GetTick>
 8004c72:	0002      	movs	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	4a42      	ldr	r2, [pc, #264]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e079      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c82:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	220c      	movs	r2, #12
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x15e>
 8004c8e:	e00e      	b.n	8004cae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fe fa82 	bl	8003198 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e068      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ca4:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	220c      	movs	r2, #12
 8004caa:	4013      	ands	r3, r2
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cae:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d21e      	bcs.n	8004cfa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbc:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cce:	f7fe fa63 	bl	8003198 <HAL_GetTick>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	e009      	b.n	8004cec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd8:	f7fe fa5e 	bl	8003198 <HAL_GetTick>
 8004cdc:	0002      	movs	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e044      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cec:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1ee      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <HAL_RCC_ClockConfig+0x27c>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d22:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_RCC_ClockConfig+0x280>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00da      	lsls	r2, r3, #3
 8004d32:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d38:	f000 f832 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d3c:	0001      	movs	r1, r0
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RCC_ClockConfig+0x278>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	220f      	movs	r2, #15
 8004d46:	4013      	ands	r3, r2
 8004d48:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x284>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	000a      	movs	r2, r1
 8004d4e:	40da      	lsrs	r2, r3
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCC_ClockConfig+0x288>)
 8004d52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_ClockConfig+0x28c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	250b      	movs	r5, #11
 8004d5a:	197c      	adds	r4, r7, r5
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fe f9d5 	bl	800310c <HAL_InitTick>
 8004d62:	0003      	movs	r3, r0
 8004d64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004d66:	197b      	adds	r3, r7, r5
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004d6e:	197b      	adds	r3, r7, r5
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b004      	add	sp, #16
 8004d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	40022000 	.word	0x40022000
 8004d84:	00001388 	.word	0x00001388
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	fffff8ff 	.word	0xfffff8ff
 8004d90:	ffffc7ff 	.word	0xffffc7ff
 8004d94:	080079fc 	.word	0x080079fc
 8004d98:	200000c0 	.word	0x200000c0
 8004d9c:	200000c4 	.word	0x200000c4

08004da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004da6:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	230c      	movs	r3, #12
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d014      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x40>
 8004db6:	d900      	bls.n	8004dba <HAL_RCC_GetSysClockFreq+0x1a>
 8004db8:	e07b      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x112>
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x24>
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d00b      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x3a>
 8004dc2:	e076      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004dc4:	4b44      	ldr	r3, [pc, #272]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004dce:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004dd2:	e07c      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x140>)
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dd8:	e079      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x144>)
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dde:	e076      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	0c9a      	lsrs	r2, r3, #18
 8004de4:	230f      	movs	r3, #15
 8004de6:	401a      	ands	r2, r3
 8004de8:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x148>)
 8004dea:	5c9b      	ldrb	r3, [r3, r2]
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	0d9a      	lsrs	r2, r3, #22
 8004df2:	2303      	movs	r3, #3
 8004df4:	4013      	ands	r3, r2
 8004df6:	3301      	adds	r3, #1
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	4013      	ands	r3, r2
 8004e04:	d01a      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	4a35      	ldr	r2, [pc, #212]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e10:	2300      	movs	r3, #0
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	f7fb fb17 	bl	8000448 <__aeabi_lmul>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	000b      	movs	r3, r1
 8004e1e:	0010      	movs	r0, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f7fb faeb 	bl	8000408 <__aeabi_uldivmod>
 8004e32:	0002      	movs	r2, r0
 8004e34:	000b      	movs	r3, r1
 8004e36:	0013      	movs	r3, r2
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3a:	e037      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2210      	movs	r2, #16
 8004e42:	4013      	ands	r3, r2
 8004e44:	d01a      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	4a23      	ldr	r2, [pc, #140]	; (8004edc <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	68b8      	ldr	r0, [r7, #8]
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	f7fb faf7 	bl	8000448 <__aeabi_lmul>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	000b      	movs	r3, r1
 8004e5e:	0010      	movs	r0, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f7fb facb 	bl	8000408 <__aeabi_uldivmod>
 8004e72:	0002      	movs	r2, r0
 8004e74:	000b      	movs	r3, r1
 8004e76:	0013      	movs	r3, r2
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7a:	e017      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	0018      	movs	r0, r3
 8004e80:	2300      	movs	r3, #0
 8004e82:	0019      	movs	r1, r3
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x140>)
 8004e86:	2300      	movs	r3, #0
 8004e88:	f7fb fade 	bl	8000448 <__aeabi_lmul>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	000b      	movs	r3, r1
 8004e90:	0010      	movs	r0, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	001c      	movs	r4, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	001d      	movs	r5, r3
 8004e9c:	0022      	movs	r2, r4
 8004e9e:	002b      	movs	r3, r5
 8004ea0:	f7fb fab2 	bl	8000408 <__aeabi_uldivmod>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	000b      	movs	r3, r1
 8004ea8:	0013      	movs	r3, r2
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004eb0:	e00d      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0b5b      	lsrs	r3, r3, #13
 8004eb8:	2207      	movs	r2, #7
 8004eba:	4013      	ands	r3, r2
 8004ebc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	0212      	lsls	r2, r2, #8
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	0013      	movs	r3, r2
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ecc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b00e      	add	sp, #56	; 0x38
 8004ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	003d0900 	.word	0x003d0900
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	007a1200 	.word	0x007a1200
 8004ee8:	08007a14 	.word	0x08007a14

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	200000c0 	.word	0x200000c0

08004f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f04:	f7ff fff2 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f08:	0001      	movs	r1, r0
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	2207      	movs	r2, #7
 8004f12:	4013      	ands	r3, r2
 8004f14:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	40d9      	lsrs	r1, r3
 8004f1a:	000b      	movs	r3, r1
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	40021000 	.word	0x40021000
 8004f28:	08007a0c 	.word	0x08007a0c

08004f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f30:	f7ff ffdc 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f34:	0001      	movs	r1, r0
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	0adb      	lsrs	r3, r3, #11
 8004f3c:	2207      	movs	r2, #7
 8004f3e:	4013      	ands	r3, r2
 8004f40:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	40d9      	lsrs	r1, r3
 8004f46:	000b      	movs	r3, r1
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	40021000 	.word	0x40021000
 8004f54:	08007a0c 	.word	0x08007a0c

08004f58 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f60:	2017      	movs	r0, #23
 8004f62:	183b      	adds	r3, r7, r0
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d100      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f72:	e0c2      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f74:	4b91      	ldr	r3, [pc, #580]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	055b      	lsls	r3, r3, #21
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b8e      	ldr	r3, [pc, #568]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f84:	4b8d      	ldr	r3, [pc, #564]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	0549      	lsls	r1, r1, #21
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f8e:	183b      	adds	r3, r7, r0
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b8a      	ldr	r3, [pc, #552]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d11a      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa0:	4b87      	ldr	r3, [pc, #540]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b86      	ldr	r3, [pc, #536]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa6:	2180      	movs	r1, #128	; 0x80
 8004fa8:	0049      	lsls	r1, r1, #1
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7fe f8f3 	bl	8003198 <HAL_GetTick>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb8:	f7fe f8ee 	bl	8003198 <HAL_GetTick>
 8004fbc:	0002      	movs	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0f3      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004fd6:	4b79      	ldr	r3, [pc, #484]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	039b      	lsls	r3, r3, #14
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	23c0      	movs	r3, #192	; 0xc0
 8004fe8:	039b      	lsls	r3, r3, #14
 8004fea:	4013      	ands	r3, r2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d013      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	23c0      	movs	r3, #192	; 0xc0
 8004ff8:	029b      	lsls	r3, r3, #10
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	23c0      	movs	r3, #192	; 0xc0
 8004ffe:	029b      	lsls	r3, r3, #10
 8005000:	429a      	cmp	r2, r3
 8005002:	d10a      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005004:	4b6d      	ldr	r3, [pc, #436]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	401a      	ands	r2, r3
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	429a      	cmp	r2, r3
 8005014:	d101      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e0cb      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800501a:	4b68      	ldr	r3, [pc, #416]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800501e:	23c0      	movs	r3, #192	; 0xc0
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	23c0      	movs	r3, #192	; 0xc0
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	4013      	ands	r3, r2
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d033      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2220      	movs	r2, #32
 8005042:	4013      	ands	r3, r2
 8005044:	d02e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005046:	4b5d      	ldr	r3, [pc, #372]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	4a5e      	ldr	r2, [pc, #376]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005050:	4b5a      	ldr	r3, [pc, #360]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005056:	2180      	movs	r1, #128	; 0x80
 8005058:	0309      	lsls	r1, r1, #12
 800505a:	430a      	orrs	r2, r1
 800505c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800505e:	4b57      	ldr	r3, [pc, #348]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005062:	4b56      	ldr	r3, [pc, #344]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005064:	4958      	ldr	r1, [pc, #352]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005066:	400a      	ands	r2, r1
 8005068:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4013      	ands	r3, r2
 8005078:	d014      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fe f88d 	bl	8003198 <HAL_GetTick>
 800507e:	0003      	movs	r3, r0
 8005080:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005082:	e009      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fe f888 	bl	8003198 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	4a4f      	ldr	r2, [pc, #316]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e08c      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005098:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800509a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4013      	ands	r3, r2
 80050a2:	d0ef      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	23c0      	movs	r3, #192	; 0xc0
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	401a      	ands	r2, r3
 80050ae:	23c0      	movs	r3, #192	; 0xc0
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80050b6:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a45      	ldr	r2, [pc, #276]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80050bc:	4013      	ands	r3, r2
 80050be:	0019      	movs	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	23c0      	movs	r3, #192	; 0xc0
 80050c6:	039b      	lsls	r3, r3, #14
 80050c8:	401a      	ands	r2, r3
 80050ca:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	23c0      	movs	r3, #192	; 0xc0
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	401a      	ands	r2, r3
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e0:	430a      	orrs	r2, r1
 80050e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050e4:	2317      	movs	r3, #23
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005108:	2203      	movs	r2, #3
 800510a:	4393      	bics	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005114:	430a      	orrs	r2, r1
 8005116:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2202      	movs	r2, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	220c      	movs	r2, #12
 8005128:	4393      	bics	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	4b22      	ldr	r3, [pc, #136]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005132:	430a      	orrs	r2, r1
 8005134:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005144:	4a24      	ldr	r2, [pc, #144]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005146:	4013      	ands	r3, r2
 8005148:	0019      	movs	r1, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005150:	430a      	orrs	r2, r1
 8005152:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2208      	movs	r2, #8
 800515a:	4013      	ands	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800516e:	430a      	orrs	r2, r1
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4013      	ands	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800518e:	430a      	orrs	r2, r1
 8005190:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	0019      	movs	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ac:	430a      	orrs	r2, r1
 80051ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b006      	add	sp, #24
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40007000 	.word	0x40007000
 80051c4:	fffcffff 	.word	0xfffcffff
 80051c8:	fff7ffff 	.word	0xfff7ffff
 80051cc:	00001388 	.word	0x00001388
 80051d0:	ffcfffff 	.word	0xffcfffff
 80051d4:	efffffff 	.word	0xefffffff
 80051d8:	fffff3ff 	.word	0xfffff3ff
 80051dc:	ffffcfff 	.word	0xffffcfff
 80051e0:	fff3ffff 	.word	0xfff3ffff

080051e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e083      	b.n	80052fe <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	2382      	movs	r3, #130	; 0x82
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	429a      	cmp	r2, r3
 8005208:	d009      	beq.n	800521e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	61da      	str	r2, [r3, #28]
 8005210:	e005      	b.n	800521e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2251      	movs	r2, #81	; 0x51
 8005228:	5c9b      	ldrb	r3, [r3, r2]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2250      	movs	r2, #80	; 0x50
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f7fd fcca 	bl	8002bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2251      	movs	r2, #81	; 0x51
 8005244:	2102      	movs	r1, #2
 8005246:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2140      	movs	r1, #64	; 0x40
 8005254:	438a      	bics	r2, r1
 8005256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	2382      	movs	r3, #130	; 0x82
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	2384      	movs	r3, #132	; 0x84
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	400b      	ands	r3, r1
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	400b      	ands	r3, r1
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2102      	movs	r1, #2
 8005280:	400b      	ands	r3, r1
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	2101      	movs	r1, #1
 800528a:	400b      	ands	r3, r1
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	400b      	ands	r3, r1
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2138      	movs	r1, #56	; 0x38
 80052a0:	400b      	ands	r3, r1
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	400b      	ands	r3, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	0011      	movs	r1, r2
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	019b      	lsls	r3, r3, #6
 80052b8:	401a      	ands	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	2204      	movs	r2, #4
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2210      	movs	r2, #16
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4907      	ldr	r1, [pc, #28]	; (8005308 <HAL_SPI_Init+0x124>)
 80052ea:	400a      	ands	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2251      	movs	r2, #81	; 0x51
 80052f8:	2101      	movs	r1, #1
 80052fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	fffff7ff 	.word	0xfffff7ff

0800530c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	1dbb      	adds	r3, r7, #6
 800531a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800531c:	231f      	movs	r3, #31
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2250      	movs	r2, #80	; 0x50
 8005328:	5c9b      	ldrb	r3, [r3, r2]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_SPI_Transmit+0x26>
 800532e:	2302      	movs	r3, #2
 8005330:	e13e      	b.n	80055b0 <HAL_SPI_Transmit+0x2a4>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2250      	movs	r2, #80	; 0x50
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533a:	f7fd ff2d 	bl	8003198 <HAL_GetTick>
 800533e:	0003      	movs	r3, r0
 8005340:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005342:	2316      	movs	r3, #22
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	1dba      	adds	r2, r7, #6
 8005348:	8812      	ldrh	r2, [r2, #0]
 800534a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2251      	movs	r2, #81	; 0x51
 8005350:	5c9b      	ldrb	r3, [r3, r2]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d004      	beq.n	8005362 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005358:	231f      	movs	r3, #31
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	2202      	movs	r2, #2
 800535e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005360:	e11b      	b.n	800559a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_SPI_Transmit+0x64>
 8005368:	1dbb      	adds	r3, r7, #6
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005370:	231f      	movs	r3, #31
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
    goto error;
 8005378:	e10f      	b.n	800559a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2251      	movs	r2, #81	; 0x51
 800537e:	2103      	movs	r1, #3
 8005380:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1dba      	adds	r2, r7, #6
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1dba      	adds	r2, r7, #6
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d110      	bne.n	80053ea <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2140      	movs	r1, #64	; 0x40
 80053d4:	438a      	bics	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2180      	movs	r1, #128	; 0x80
 80053e4:	01c9      	lsls	r1, r1, #7
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d007      	beq.n	8005408 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2140      	movs	r1, #64	; 0x40
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	429a      	cmp	r2, r3
 8005412:	d14e      	bne.n	80054b2 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_SPI_Transmit+0x11a>
 800541c:	2316      	movs	r3, #22
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d13f      	bne.n	80054a6 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800544a:	e02c      	b.n	80054a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d112      	bne.n	8005480 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	; 0x36
 800547e:	e012      	b.n	80054a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005480:	f7fd fe8a 	bl	8003198 <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d802      	bhi.n	8005496 <HAL_SPI_Transmit+0x18a>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	d102      	bne.n	800549c <HAL_SPI_Transmit+0x190>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800549c:	231f      	movs	r3, #31
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2203      	movs	r2, #3
 80054a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80054a4:	e079      	b.n	800559a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1cd      	bne.n	800544c <HAL_SPI_Transmit+0x140>
 80054b0:	e04f      	b.n	8005552 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <HAL_SPI_Transmit+0x1b8>
 80054ba:	2316      	movs	r3, #22
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d141      	bne.n	8005548 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054ea:	e02d      	b.n	8005548 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2202      	movs	r2, #2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d113      	bne.n	8005522 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005520:	e012      	b.n	8005548 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005522:	f7fd fe39 	bl	8003198 <HAL_GetTick>
 8005526:	0002      	movs	r2, r0
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d802      	bhi.n	8005538 <HAL_SPI_Transmit+0x22c>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	d102      	bne.n	800553e <HAL_SPI_Transmit+0x232>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800553e:	231f      	movs	r3, #31
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2203      	movs	r2, #3
 8005544:	701a      	strb	r2, [r3, #0]
          goto error;
 8005546:	e028      	b.n	800559a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1cc      	bne.n	80054ec <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	0018      	movs	r0, r3
 800555a:	f000 fc07 	bl	8005d6c <SPI_EndRxTxTransaction>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d002      	beq.n	8005568 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800558e:	231f      	movs	r3, #31
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e000      	b.n	800559a <HAL_SPI_Transmit+0x28e>
  }

error:
 8005598:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2251      	movs	r2, #81	; 0x51
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2250      	movs	r2, #80	; 0x50
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80055aa:	231f      	movs	r3, #31
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	781b      	ldrb	r3, [r3, #0]
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b008      	add	sp, #32
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	1dbb      	adds	r3, r7, #6
 80055c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c8:	2317      	movs	r3, #23
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	2382      	movs	r3, #130	; 0x82
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	429a      	cmp	r2, r3
 80055da:	d113      	bne.n	8005604 <HAL_SPI_Receive+0x4c>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2251      	movs	r2, #81	; 0x51
 80055e8:	2104      	movs	r1, #4
 80055ea:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055ec:	1dbb      	adds	r3, r7, #6
 80055ee:	881c      	ldrh	r4, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	0023      	movs	r3, r4
 80055fc:	f000 f902 	bl	8005804 <HAL_SPI_TransmitReceive>
 8005600:	0003      	movs	r3, r0
 8005602:	e0f9      	b.n	80057f8 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2250      	movs	r2, #80	; 0x50
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_SPI_Receive+0x5a>
 800560e:	2302      	movs	r3, #2
 8005610:	e0f2      	b.n	80057f8 <HAL_SPI_Receive+0x240>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2250      	movs	r2, #80	; 0x50
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561a:	f7fd fdbd 	bl	8003198 <HAL_GetTick>
 800561e:	0003      	movs	r3, r0
 8005620:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2251      	movs	r2, #81	; 0x51
 8005626:	5c9b      	ldrb	r3, [r3, r2]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d004      	beq.n	8005638 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800562e:	2317      	movs	r3, #23
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2202      	movs	r2, #2
 8005634:	701a      	strb	r2, [r3, #0]
    goto error;
 8005636:	e0d4      	b.n	80057e2 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_SPI_Receive+0x8e>
 800563e:	1dbb      	adds	r3, r7, #6
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
    goto error;
 800564e:	e0c8      	b.n	80057e2 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2251      	movs	r2, #81	; 0x51
 8005654:	2104      	movs	r1, #4
 8005656:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	1dba      	adds	r2, r7, #6
 8005668:	8812      	ldrh	r2, [r2, #0]
 800566a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1dba      	adds	r2, r7, #6
 8005670:	8812      	ldrh	r2, [r2, #0]
 8005672:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	429a      	cmp	r2, r3
 800569c:	d10f      	bne.n	80056be <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	438a      	bics	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4951      	ldr	r1, [pc, #324]	; (8005800 <HAL_SPI_Receive+0x248>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2240      	movs	r2, #64	; 0x40
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d007      	beq.n	80056dc <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d164      	bne.n	80057ae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056e4:	e02f      	b.n	8005746 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2201      	movs	r2, #1
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d115      	bne.n	8005720 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	001a      	movs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571e:	e012      	b.n	8005746 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005720:	f7fd fd3a 	bl	8003198 <HAL_GetTick>
 8005724:	0002      	movs	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d802      	bhi.n	8005736 <HAL_SPI_Receive+0x17e>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_SPI_Receive+0x184>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2317      	movs	r3, #23
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2203      	movs	r2, #3
 8005742:	701a      	strb	r2, [r3, #0]
          goto error;
 8005744:	e04d      	b.n	80057e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1ca      	bne.n	80056e6 <HAL_SPI_Receive+0x12e>
 8005750:	e032      	b.n	80057b8 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2201      	movs	r2, #1
 800575a:	4013      	ands	r3, r2
 800575c:	2b01      	cmp	r3, #1
 800575e:	d113      	bne.n	8005788 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	b292      	uxth	r2, r2
 800576c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	1c9a      	adds	r2, r3, #2
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005786:	e012      	b.n	80057ae <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005788:	f7fd fd06 	bl	8003198 <HAL_GetTick>
 800578c:	0002      	movs	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d802      	bhi.n	800579e <HAL_SPI_Receive+0x1e6>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Receive+0x1ec>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80057a4:	2317      	movs	r3, #23
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2203      	movs	r2, #3
 80057aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80057ac:	e019      	b.n	80057e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1cc      	bne.n	8005752 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fa6a 	bl	8005c98 <SPI_EndRxTransaction>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80057d6:	2317      	movs	r3, #23
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <HAL_SPI_Receive+0x22a>
  }

error :
 80057e0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2251      	movs	r2, #81	; 0x51
 80057e6:	2101      	movs	r1, #1
 80057e8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2250      	movs	r2, #80	; 0x50
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057f2:	2317      	movs	r3, #23
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	781b      	ldrb	r3, [r3, #0]
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b007      	add	sp, #28
 80057fe:	bd90      	pop	{r4, r7, pc}
 8005800:	ffffbfff 	.word	0xffffbfff

08005804 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	001a      	movs	r2, r3
 8005812:	1cbb      	adds	r3, r7, #2
 8005814:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005816:	2301      	movs	r3, #1
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800581a:	232b      	movs	r3, #43	; 0x2b
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2250      	movs	r2, #80	; 0x50
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x2c>
 800582c:	2302      	movs	r3, #2
 800582e:	e1a0      	b.n	8005b72 <HAL_SPI_TransmitReceive+0x36e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2250      	movs	r2, #80	; 0x50
 8005834:	2101      	movs	r1, #1
 8005836:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005838:	f7fd fcae 	bl	8003198 <HAL_GetTick>
 800583c:	0003      	movs	r3, r0
 800583e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005840:	2023      	movs	r0, #35	; 0x23
 8005842:	183b      	adds	r3, r7, r0
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	2151      	movs	r1, #81	; 0x51
 8005848:	5c52      	ldrb	r2, [r2, r1]
 800584a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005852:	231a      	movs	r3, #26
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	1cba      	adds	r2, r7, #2
 8005858:	8812      	ldrh	r2, [r2, #0]
 800585a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800585c:	183b      	adds	r3, r7, r0
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d011      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x84>
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	2382      	movs	r3, #130	; 0x82
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	429a      	cmp	r2, r3
 800586c:	d107      	bne.n	800587e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <HAL_SPI_TransmitReceive+0x7a>
 8005876:	183b      	adds	r3, r7, r0
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d004      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800587e:	232b      	movs	r3, #43	; 0x2b
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	2202      	movs	r2, #2
 8005884:	701a      	strb	r2, [r3, #0]
    goto error;
 8005886:	e169      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <HAL_SPI_TransmitReceive+0x98>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_SPI_TransmitReceive+0x98>
 8005894:	1cbb      	adds	r3, r7, #2
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800589c:	232b      	movs	r3, #43	; 0x2b
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80058a4:	e15a      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2251      	movs	r2, #81	; 0x51
 80058aa:	5c9b      	ldrb	r3, [r3, r2]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2251      	movs	r2, #81	; 0x51
 80058b6:	2105      	movs	r1, #5
 80058b8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1cba      	adds	r2, r7, #2
 80058ca:	8812      	ldrh	r2, [r2, #0]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1cba      	adds	r2, r7, #2
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1cba      	adds	r2, r7, #2
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1cba      	adds	r2, r7, #2
 80058e8:	8812      	ldrh	r2, [r2, #0]
 80058ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	4013      	ands	r3, r2
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d007      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	; 0x40
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	429a      	cmp	r2, r3
 8005920:	d000      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x120>
 8005922:	e07a      	b.n	8005a1a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_SPI_TransmitReceive+0x132>
 800592c:	231a      	movs	r3, #26
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d166      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595a:	e053      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d11b      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x19e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d016      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x19e>
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d113      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2201      	movs	r2, #1
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d119      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x1e0>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	b292      	uxth	r2, r2
 80059c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059e4:	f7fd fbd8 	bl	8003198 <HAL_GetTick>
 80059e8:	0002      	movs	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d807      	bhi.n	8005a04 <HAL_SPI_TransmitReceive+0x200>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	3301      	adds	r3, #1
 80059f8:	d004      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80059fa:	232b      	movs	r3, #43	; 0x2b
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	2203      	movs	r2, #3
 8005a00:	701a      	strb	r2, [r3, #0]
        goto error;
 8005a02:	e0ab      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1a6      	bne.n	800595c <HAL_SPI_TransmitReceive+0x158>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1a1      	bne.n	800595c <HAL_SPI_TransmitReceive+0x158>
 8005a18:	e07f      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x22a>
 8005a22:	231a      	movs	r3, #26
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d000      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x22a>
 8005a2c:	e06b      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a54:	e057      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11c      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x29a>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x29a>
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d114      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d119      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x2dc>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005adc:	2301      	movs	r3, #1
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ae0:	f7fd fb5a 	bl	8003198 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d802      	bhi.n	8005af6 <HAL_SPI_TransmitReceive+0x2f2>
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	3301      	adds	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x2f8>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8005afc:	232b      	movs	r3, #43	; 0x2b
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	2203      	movs	r2, #3
 8005b02:	701a      	strb	r2, [r3, #0]
        goto error;
 8005b04:	e02a      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1a2      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x252>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d19d      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 f923 	bl	8005d6c <SPI_EndRxTxTransaction>
 8005b26:	1e03      	subs	r3, r0, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8005b2a:	232b      	movs	r3, #43	; 0x2b
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b38:	e010      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	e000      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8005b5a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2251      	movs	r2, #81	; 0x51
 8005b60:	2101      	movs	r1, #1
 8005b62:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2250      	movs	r2, #80	; 0x50
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b6c:	232b      	movs	r3, #43	; 0x2b
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b00c      	add	sp, #48	; 0x30
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	1dfb      	adds	r3, r7, #7
 8005b8a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b8c:	f7fd fb04 	bl	8003198 <HAL_GetTick>
 8005b90:	0002      	movs	r2, r0
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	18d3      	adds	r3, r2, r3
 8005b9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b9c:	f7fd fafc 	bl	8003198 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ba4:	4b3a      	ldr	r3, [pc, #232]	; (8005c90 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	015b      	lsls	r3, r3, #5
 8005baa:	0d1b      	lsrs	r3, r3, #20
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	4353      	muls	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bb2:	e058      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	d055      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bba:	f7fd faed 	bl	8003198 <HAL_GetTick>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d902      	bls.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d142      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	21e0      	movs	r1, #224	; 0xe0
 8005bdc:	438a      	bics	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	2382      	movs	r3, #130	; 0x82
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d113      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d005      	beq.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d107      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2140      	movs	r1, #64	; 0x40
 8005c10:	438a      	bics	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	019b      	lsls	r3, r3, #6
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d110      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	491a      	ldr	r1, [pc, #104]	; (8005c94 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2180      	movs	r1, #128	; 0x80
 8005c3c:	0189      	lsls	r1, r1, #6
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2251      	movs	r2, #81	; 0x51
 8005c46:	2101      	movs	r1, #1
 8005c48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2250      	movs	r2, #80	; 0x50
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e017      	b.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	425a      	negs	r2, r3
 8005c76:	4153      	adcs	r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	1dfb      	adds	r3, r7, #7
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d197      	bne.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b008      	add	sp, #32
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	200000c0 	.word	0x200000c0
 8005c94:	ffffdfff 	.word	0xffffdfff

08005c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	2382      	movs	r3, #130	; 0x82
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d113      	bne.n	8005cd8 <SPI_EndRxTransaction+0x40>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d005      	beq.n	8005cc8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d107      	bne.n	8005cd8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2140      	movs	r1, #64	; 0x40
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	2382      	movs	r3, #130	; 0x82
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d12b      	bne.n	8005d3c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d012      	beq.n	8005d16 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	0013      	movs	r3, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2180      	movs	r1, #128	; 0x80
 8005cfe:	f7ff ff3d 	bl	8005b7c <SPI_WaitFlagStateUntilTimeout>
 8005d02:	1e03      	subs	r3, r0, #0
 8005d04:	d02d      	beq.n	8005d62 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e026      	b.n	8005d64 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	0013      	movs	r3, r2
 8005d20:	2200      	movs	r2, #0
 8005d22:	2101      	movs	r1, #1
 8005d24:	f7ff ff2a 	bl	8005b7c <SPI_WaitFlagStateUntilTimeout>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d01a      	beq.n	8005d62 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2220      	movs	r2, #32
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e013      	b.n	8005d64 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	0013      	movs	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	2101      	movs	r1, #1
 8005d4a:	f7ff ff17 	bl	8005b7c <SPI_WaitFlagStateUntilTimeout>
 8005d4e:	1e03      	subs	r3, r0, #0
 8005d50:	d007      	beq.n	8005d62 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	2220      	movs	r2, #32
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e000      	b.n	8005d64 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b004      	add	sp, #16
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <SPI_EndRxTxTransaction+0x84>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	491d      	ldr	r1, [pc, #116]	; (8005df4 <SPI_EndRxTxTransaction+0x88>)
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7fa f9cc 	bl	800011c <__udivsi3>
 8005d84:	0003      	movs	r3, r0
 8005d86:	001a      	movs	r2, r3
 8005d88:	0013      	movs	r3, r2
 8005d8a:	015b      	lsls	r3, r3, #5
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	2382      	movs	r3, #130	; 0x82
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d112      	bne.n	8005dc8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	0013      	movs	r3, r2
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	f7ff fee4 	bl	8005b7c <SPI_WaitFlagStateUntilTimeout>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d016      	beq.n	8005de6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e00f      	b.n	8005de8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d0f2      	beq.n	8005dc8 <SPI_EndRxTxTransaction+0x5c>
 8005de2:	e000      	b.n	8005de6 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005de4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	0018      	movs	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b006      	add	sp, #24
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200000c0 	.word	0x200000c0
 8005df4:	016e3600 	.word	0x016e3600

08005df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e032      	b.n	8005e70 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2239      	movs	r2, #57	; 0x39
 8005e0e:	5c9b      	ldrb	r3, [r3, r2]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2238      	movs	r2, #56	; 0x38
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7fd f84f 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2239      	movs	r2, #57	; 0x39
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3304      	adds	r3, #4
 8005e36:	0019      	movs	r1, r3
 8005e38:	0010      	movs	r0, r2
 8005e3a:	f000 fa53 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	223e      	movs	r2, #62	; 0x3e
 8005e42:	2101      	movs	r1, #1
 8005e44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	223a      	movs	r2, #58	; 0x3a
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	5499      	strb	r1, [r3, r2]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	223b      	movs	r2, #59	; 0x3b
 8005e52:	2101      	movs	r1, #1
 8005e54:	5499      	strb	r1, [r3, r2]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	223c      	movs	r2, #60	; 0x3c
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	223d      	movs	r2, #61	; 0x3d
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2239      	movs	r2, #57	; 0x39
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2239      	movs	r2, #57	; 0x39
 8005e84:	5c9b      	ldrb	r3, [r3, r2]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d001      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e03b      	b.n	8005f08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2239      	movs	r2, #57	; 0x39
 8005e94:	2102      	movs	r1, #2
 8005e96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	05db      	lsls	r3, r3, #23
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x5a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <HAL_TIM_Base_Start_IT+0x98>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d111      	bne.n	8005ef6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2207      	movs	r2, #7
 8005eda:	4013      	ands	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d010      	beq.n	8005f06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2101      	movs	r1, #1
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	e007      	b.n	8005f06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2101      	movs	r1, #1
 8005f02:	430a      	orrs	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b004      	add	sp, #16
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40010800 	.word	0x40010800
 8005f18:	40011400 	.word	0x40011400

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d124      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11d      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2203      	movs	r2, #3
 8005f46:	4252      	negs	r2, r2
 8005f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2203      	movs	r2, #3
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f000 f9a8 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e007      	b.n	8005f76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f99b 	bl	80062a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f9a7 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2204      	movs	r2, #4
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d125      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2204      	movs	r2, #4
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d11e      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	4252      	negs	r2, r2
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	23c0      	movs	r3, #192	; 0xc0
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 f97b 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005fbe:	e007      	b.n	8005fd0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f96e 	bl	80062a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 f97a 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d124      	bne.n	800602e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2208      	movs	r2, #8
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d11d      	bne.n	800602e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2209      	movs	r2, #9
 8005ff8:	4252      	negs	r2, r2
 8005ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	2203      	movs	r2, #3
 800600a:	4013      	ands	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f94f 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8006016:	e007      	b.n	8006028 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f942 	bl	80062a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 f94e 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	2b10      	cmp	r3, #16
 800603a:	d125      	bne.n	8006088 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2210      	movs	r2, #16
 8006044:	4013      	ands	r3, r2
 8006046:	2b10      	cmp	r3, #16
 8006048:	d11e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2211      	movs	r2, #17
 8006050:	4252      	negs	r2, r2
 8006052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2208      	movs	r2, #8
 8006058:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	23c0      	movs	r3, #192	; 0xc0
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4013      	ands	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0018      	movs	r0, r3
 800606c:	f000 f922 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8006070:	e007      	b.n	8006082 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 f915 	bl	80062a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0018      	movs	r0, r3
 800607e:	f000 f921 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2201      	movs	r2, #1
 8006090:	4013      	ands	r3, r2
 8006092:	2b01      	cmp	r3, #1
 8006094:	d10f      	bne.n	80060b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	4013      	ands	r3, r2
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d108      	bne.n	80060b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	4252      	negs	r2, r2
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f8ef 	bl	8006294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2240      	movs	r2, #64	; 0x40
 80060be:	4013      	ands	r3, r2
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d10f      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2240      	movs	r2, #64	; 0x40
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d108      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2241      	movs	r2, #65	; 0x41
 80060d8:	4252      	negs	r2, r2
 80060da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 f8f8 	bl	80062d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	230f      	movs	r3, #15
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2238      	movs	r2, #56	; 0x38
 8006102:	5c9b      	ldrb	r3, [r3, r2]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIM_ConfigClockSource+0x20>
 8006108:	2302      	movs	r3, #2
 800610a:	e0bc      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x19a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2238      	movs	r2, #56	; 0x38
 8006110:	2101      	movs	r1, #1
 8006112:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2239      	movs	r2, #57	; 0x39
 8006118:	2102      	movs	r1, #2
 800611a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2277      	movs	r2, #119	; 0x77
 8006128:	4393      	bics	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4a58      	ldr	r2, [pc, #352]	; (8006290 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006130:	4013      	ands	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2280      	movs	r2, #128	; 0x80
 8006142:	0192      	lsls	r2, r2, #6
 8006144:	4293      	cmp	r3, r2
 8006146:	d040      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xde>
 8006148:	2280      	movs	r2, #128	; 0x80
 800614a:	0192      	lsls	r2, r2, #6
 800614c:	4293      	cmp	r3, r2
 800614e:	d900      	bls.n	8006152 <HAL_TIM_ConfigClockSource+0x66>
 8006150:	e088      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	0152      	lsls	r2, r2, #5
 8006156:	4293      	cmp	r3, r2
 8006158:	d100      	bne.n	800615c <HAL_TIM_ConfigClockSource+0x70>
 800615a:	e088      	b.n	800626e <HAL_TIM_ConfigClockSource+0x182>
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	0152      	lsls	r2, r2, #5
 8006160:	4293      	cmp	r3, r2
 8006162:	d900      	bls.n	8006166 <HAL_TIM_ConfigClockSource+0x7a>
 8006164:	e07e      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 8006166:	2b70      	cmp	r3, #112	; 0x70
 8006168:	d018      	beq.n	800619c <HAL_TIM_ConfigClockSource+0xb0>
 800616a:	d900      	bls.n	800616e <HAL_TIM_ConfigClockSource+0x82>
 800616c:	e07a      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 800616e:	2b60      	cmp	r3, #96	; 0x60
 8006170:	d04f      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x126>
 8006172:	d900      	bls.n	8006176 <HAL_TIM_ConfigClockSource+0x8a>
 8006174:	e076      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 8006176:	2b50      	cmp	r3, #80	; 0x50
 8006178:	d03b      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x106>
 800617a:	d900      	bls.n	800617e <HAL_TIM_ConfigClockSource+0x92>
 800617c:	e072      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d057      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x146>
 8006182:	d900      	bls.n	8006186 <HAL_TIM_ConfigClockSource+0x9a>
 8006184:	e06e      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 8006186:	2b30      	cmp	r3, #48	; 0x30
 8006188:	d063      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x166>
 800618a:	d86b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d060      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x166>
 8006190:	d868      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d05d      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x166>
 8006196:	2b10      	cmp	r3, #16
 8006198:	d05b      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x166>
 800619a:	e063      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6899      	ldr	r1, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 f972 	bl	8006494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2277      	movs	r2, #119	; 0x77
 80061bc:	4313      	orrs	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e052      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6899      	ldr	r1, [r3, #8]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f000 f95b 	bl	8006494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	01c9      	lsls	r1, r1, #7
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
      break;
 80061f0:	e03e      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	001a      	movs	r2, r3
 8006200:	f000 f8ce 	bl	80063a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2150      	movs	r1, #80	; 0x50
 800620a:	0018      	movs	r0, r3
 800620c:	f000 f928 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8006210:	e02e      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	001a      	movs	r2, r3
 8006220:	f000 f8ec 	bl	80063fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2160      	movs	r1, #96	; 0x60
 800622a:	0018      	movs	r0, r3
 800622c:	f000 f918 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8006230:	e01e      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	001a      	movs	r2, r3
 8006240:	f000 f8ae 	bl	80063a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	0018      	movs	r0, r3
 800624c:	f000 f908 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8006250:	e00e      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	0019      	movs	r1, r3
 800625c:	0010      	movs	r0, r2
 800625e:	f000 f8ff 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8006262:	e005      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006264:	230f      	movs	r3, #15
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800626e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2239      	movs	r2, #57	; 0x39
 8006274:	2101      	movs	r1, #1
 8006276:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2238      	movs	r2, #56	; 0x38
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]

  return status;
 8006280:	230f      	movs	r3, #15
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	781b      	ldrb	r3, [r3, #0]
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	ffff00ff 	.word	0xffff00ff

08006294 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b002      	add	sp, #8
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	05db      	lsls	r3, r3, #23
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d00b      	beq.n	8006316 <TIM_Base_SetConfig+0x32>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a23      	ldr	r2, [pc, #140]	; (8006390 <TIM_Base_SetConfig+0xac>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0x32>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <TIM_Base_SetConfig+0xb0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0x32>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a21      	ldr	r2, [pc, #132]	; (8006398 <TIM_Base_SetConfig+0xb4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2270      	movs	r2, #112	; 0x70
 800631a:	4393      	bics	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	05db      	lsls	r3, r3, #23
 800632e:	429a      	cmp	r2, r3
 8006330:	d00b      	beq.n	800634a <TIM_Base_SetConfig+0x66>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a16      	ldr	r2, [pc, #88]	; (8006390 <TIM_Base_SetConfig+0xac>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <TIM_Base_SetConfig+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <TIM_Base_SetConfig+0xb0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_Base_SetConfig+0x66>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a14      	ldr	r2, [pc, #80]	; (8006398 <TIM_Base_SetConfig+0xb4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <TIM_Base_SetConfig+0xb8>)
 800634e:	4013      	ands	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2280      	movs	r2, #128	; 0x80
 8006360:	4393      	bics	r3, r2
 8006362:	001a      	movs	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	615a      	str	r2, [r3, #20]
}
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	b004      	add	sp, #16
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40000400 	.word	0x40000400
 8006394:	40010800 	.word	0x40010800
 8006398:	40011400 	.word	0x40011400
 800639c:	fffffcff 	.word	0xfffffcff

080063a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	2201      	movs	r2, #1
 80063b8:	4393      	bics	r3, r2
 80063ba:	001a      	movs	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	22f0      	movs	r2, #240	; 0xf0
 80063ca:	4393      	bics	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	220a      	movs	r2, #10
 80063dc:	4393      	bics	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	621a      	str	r2, [r3, #32]
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b006      	add	sp, #24
 80063fa:	bd80      	pop	{r7, pc}

080063fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	2210      	movs	r2, #16
 800640e:	4393      	bics	r3, r2
 8006410:	001a      	movs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <TIM_TI2_ConfigInputStage+0x60>)
 8006426:	4013      	ands	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	22a0      	movs	r2, #160	; 0xa0
 8006438:	4393      	bics	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	46bd      	mov	sp, r7
 8006456:	b006      	add	sp, #24
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	ffff0fff 	.word	0xffff0fff

08006460 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2270      	movs	r2, #112	; 0x70
 8006474:	4393      	bics	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	2207      	movs	r2, #7
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	609a      	str	r2, [r3, #8]
}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	46bd      	mov	sp, r7
 800648e:	b004      	add	sp, #16
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <TIM_ETR_SetConfig+0x3c>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b006      	add	sp, #24
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	ffff00ff 	.word	0xffff00ff

080064d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2238      	movs	r2, #56	; 0x38
 80064e2:	5c9b      	ldrb	r3, [r3, r2]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e047      	b.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2238      	movs	r2, #56	; 0x38
 80064f0:	2101      	movs	r1, #1
 80064f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2239      	movs	r2, #57	; 0x39
 80064f8:	2102      	movs	r1, #2
 80064fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2270      	movs	r2, #112	; 0x70
 8006510:	4393      	bics	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	05db      	lsls	r3, r3, #23
 800652e:	429a      	cmp	r2, r3
 8006530:	d00e      	beq.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a13      	ldr	r2, [pc, #76]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a11      	ldr	r2, [pc, #68]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a10      	ldr	r2, [pc, #64]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10c      	bne.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	4393      	bics	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2239      	movs	r2, #57	; 0x39
 800656e:	2101      	movs	r1, #1
 8006570:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2238      	movs	r2, #56	; 0x38
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40000400 	.word	0x40000400
 8006588:	40010800 	.word	0x40010800
 800658c:	40011400 	.word	0x40011400

08006590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e044      	b.n	800662c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2274      	movs	r2, #116	; 0x74
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fc fced 	bl	8002f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2224      	movs	r2, #36	; 0x24
 80065be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2101      	movs	r1, #1
 80065cc:	438a      	bics	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 f8d8 	bl	8006788 <UART_SetConfig>
 80065d8:	0003      	movs	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e024      	b.n	800662c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fb89 	bl	8006d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	490d      	ldr	r1, [pc, #52]	; (8006634 <HAL_UART_Init+0xa4>)
 80065fe:	400a      	ands	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	212a      	movs	r1, #42	; 0x2a
 800660e:	438a      	bics	r2, r1
 8006610:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2101      	movs	r1, #1
 800661e:	430a      	orrs	r2, r1
 8006620:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f000 fc21 	bl	8006e6c <UART_CheckIdleState>
 800662a:	0003      	movs	r3, r0
}
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	b002      	add	sp, #8
 8006632:	bd80      	pop	{r7, pc}
 8006634:	ffffb7ff 	.word	0xffffb7ff

08006638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	1dbb      	adds	r3, r7, #6
 8006646:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664c:	2b20      	cmp	r3, #32
 800664e:	d000      	beq.n	8006652 <HAL_UART_Transmit+0x1a>
 8006650:	e095      	b.n	800677e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_UART_Transmit+0x28>
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e08d      	b.n	8006780 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	015b      	lsls	r3, r3, #5
 800666c:	429a      	cmp	r2, r3
 800666e:	d109      	bne.n	8006684 <HAL_UART_Transmit+0x4c>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2201      	movs	r2, #1
 800667c:	4013      	ands	r3, r2
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e07d      	b.n	8006780 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2274      	movs	r2, #116	; 0x74
 8006688:	5c9b      	ldrb	r3, [r3, r2]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_UART_Transmit+0x5a>
 800668e:	2302      	movs	r3, #2
 8006690:	e076      	b.n	8006780 <HAL_UART_Transmit+0x148>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2274      	movs	r2, #116	; 0x74
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2280      	movs	r2, #128	; 0x80
 800669e:	2100      	movs	r1, #0
 80066a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2221      	movs	r2, #33	; 0x21
 80066a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a8:	f7fc fd76 	bl	8003198 <HAL_GetTick>
 80066ac:	0003      	movs	r3, r0
 80066ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1dba      	adds	r2, r7, #6
 80066b4:	2150      	movs	r1, #80	; 0x50
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1dba      	adds	r2, r7, #6
 80066be:	2152      	movs	r1, #82	; 0x52
 80066c0:	8812      	ldrh	r2, [r2, #0]
 80066c2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	015b      	lsls	r3, r3, #5
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d108      	bne.n	80066e2 <HAL_UART_Transmit+0xaa>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d104      	bne.n	80066e2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e003      	b.n	80066ea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2274      	movs	r2, #116	; 0x74
 80066ee:	2100      	movs	r1, #0
 80066f0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80066f2:	e02c      	b.n	800674e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	0013      	movs	r3, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	f000 fbfb 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8006706:	1e03      	subs	r3, r0, #0
 8006708:	d001      	beq.n	800670e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e038      	b.n	8006780 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	001a      	movs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	05d2      	lsls	r2, r2, #23
 8006720:	0dd2      	lsrs	r2, r2, #23
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	3302      	adds	r3, #2
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e007      	b.n	800673c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2252      	movs	r2, #82	; 0x52
 8006740:	5a9b      	ldrh	r3, [r3, r2]
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b299      	uxth	r1, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2252      	movs	r2, #82	; 0x52
 800674c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2252      	movs	r2, #82	; 0x52
 8006752:	5a9b      	ldrh	r3, [r3, r2]
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1cc      	bne.n	80066f4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	0013      	movs	r3, r2
 8006764:	2200      	movs	r2, #0
 8006766:	2140      	movs	r1, #64	; 0x40
 8006768:	f000 fbc8 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 800676c:	1e03      	subs	r3, r0, #0
 800676e:	d001      	beq.n	8006774 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e005      	b.n	8006780 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e000      	b.n	8006780 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800677e:	2302      	movs	r3, #2
  }
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b008      	add	sp, #32
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b08e      	sub	sp, #56	; 0x38
 800678c:	af00      	add	r7, sp, #0
 800678e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006790:	231a      	movs	r3, #26
 8006792:	2218      	movs	r2, #24
 8006794:	4694      	mov	ip, r2
 8006796:	44bc      	add	ip, r7
 8006798:	4463      	add	r3, ip
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4ab0      	ldr	r2, [pc, #704]	; (8006a80 <UART_SetConfig+0x2f8>)
 80067be:	4013      	ands	r3, r2
 80067c0:	0019      	movs	r1, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c8:	430a      	orrs	r2, r1
 80067ca:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4aac      	ldr	r2, [pc, #688]	; (8006a84 <UART_SetConfig+0x2fc>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	0019      	movs	r1, r3
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4aa6      	ldr	r2, [pc, #664]	; (8006a88 <UART_SetConfig+0x300>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067fa:	4313      	orrs	r3, r2
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	4aa1      	ldr	r2, [pc, #644]	; (8006a8c <UART_SetConfig+0x304>)
 8006806:	4013      	ands	r3, r2
 8006808:	0019      	movs	r1, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006810:	430a      	orrs	r2, r1
 8006812:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a9d      	ldr	r2, [pc, #628]	; (8006a90 <UART_SetConfig+0x308>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d136      	bne.n	800688c <UART_SetConfig+0x104>
 800681e:	4b9d      	ldr	r3, [pc, #628]	; (8006a94 <UART_SetConfig+0x30c>)
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	2203      	movs	r2, #3
 8006824:	4013      	ands	r3, r2
 8006826:	2b03      	cmp	r3, #3
 8006828:	d020      	beq.n	800686c <UART_SetConfig+0xe4>
 800682a:	d827      	bhi.n	800687c <UART_SetConfig+0xf4>
 800682c:	2b02      	cmp	r3, #2
 800682e:	d00d      	beq.n	800684c <UART_SetConfig+0xc4>
 8006830:	d824      	bhi.n	800687c <UART_SetConfig+0xf4>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <UART_SetConfig+0xb4>
 8006836:	2b01      	cmp	r3, #1
 8006838:	d010      	beq.n	800685c <UART_SetConfig+0xd4>
 800683a:	e01f      	b.n	800687c <UART_SetConfig+0xf4>
 800683c:	231b      	movs	r3, #27
 800683e:	2218      	movs	r2, #24
 8006840:	4694      	mov	ip, r2
 8006842:	44bc      	add	ip, r7
 8006844:	4463      	add	r3, ip
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e0c5      	b.n	80069d8 <UART_SetConfig+0x250>
 800684c:	231b      	movs	r3, #27
 800684e:	2218      	movs	r2, #24
 8006850:	4694      	mov	ip, r2
 8006852:	44bc      	add	ip, r7
 8006854:	4463      	add	r3, ip
 8006856:	2202      	movs	r2, #2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e0bd      	b.n	80069d8 <UART_SetConfig+0x250>
 800685c:	231b      	movs	r3, #27
 800685e:	2218      	movs	r2, #24
 8006860:	4694      	mov	ip, r2
 8006862:	44bc      	add	ip, r7
 8006864:	4463      	add	r3, ip
 8006866:	2204      	movs	r2, #4
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e0b5      	b.n	80069d8 <UART_SetConfig+0x250>
 800686c:	231b      	movs	r3, #27
 800686e:	2218      	movs	r2, #24
 8006870:	4694      	mov	ip, r2
 8006872:	44bc      	add	ip, r7
 8006874:	4463      	add	r3, ip
 8006876:	2208      	movs	r2, #8
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e0ad      	b.n	80069d8 <UART_SetConfig+0x250>
 800687c:	231b      	movs	r3, #27
 800687e:	2218      	movs	r2, #24
 8006880:	4694      	mov	ip, r2
 8006882:	44bc      	add	ip, r7
 8006884:	4463      	add	r3, ip
 8006886:	2210      	movs	r2, #16
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e0a5      	b.n	80069d8 <UART_SetConfig+0x250>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a81      	ldr	r2, [pc, #516]	; (8006a98 <UART_SetConfig+0x310>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d136      	bne.n	8006904 <UART_SetConfig+0x17c>
 8006896:	4b7f      	ldr	r3, [pc, #508]	; (8006a94 <UART_SetConfig+0x30c>)
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	220c      	movs	r2, #12
 800689c:	4013      	ands	r3, r2
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	d020      	beq.n	80068e4 <UART_SetConfig+0x15c>
 80068a2:	d827      	bhi.n	80068f4 <UART_SetConfig+0x16c>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d00d      	beq.n	80068c4 <UART_SetConfig+0x13c>
 80068a8:	d824      	bhi.n	80068f4 <UART_SetConfig+0x16c>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <UART_SetConfig+0x12c>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d010      	beq.n	80068d4 <UART_SetConfig+0x14c>
 80068b2:	e01f      	b.n	80068f4 <UART_SetConfig+0x16c>
 80068b4:	231b      	movs	r3, #27
 80068b6:	2218      	movs	r2, #24
 80068b8:	4694      	mov	ip, r2
 80068ba:	44bc      	add	ip, r7
 80068bc:	4463      	add	r3, ip
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e089      	b.n	80069d8 <UART_SetConfig+0x250>
 80068c4:	231b      	movs	r3, #27
 80068c6:	2218      	movs	r2, #24
 80068c8:	4694      	mov	ip, r2
 80068ca:	44bc      	add	ip, r7
 80068cc:	4463      	add	r3, ip
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e081      	b.n	80069d8 <UART_SetConfig+0x250>
 80068d4:	231b      	movs	r3, #27
 80068d6:	2218      	movs	r2, #24
 80068d8:	4694      	mov	ip, r2
 80068da:	44bc      	add	ip, r7
 80068dc:	4463      	add	r3, ip
 80068de:	2204      	movs	r2, #4
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e079      	b.n	80069d8 <UART_SetConfig+0x250>
 80068e4:	231b      	movs	r3, #27
 80068e6:	2218      	movs	r2, #24
 80068e8:	4694      	mov	ip, r2
 80068ea:	44bc      	add	ip, r7
 80068ec:	4463      	add	r3, ip
 80068ee:	2208      	movs	r2, #8
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	e071      	b.n	80069d8 <UART_SetConfig+0x250>
 80068f4:	231b      	movs	r3, #27
 80068f6:	2218      	movs	r2, #24
 80068f8:	4694      	mov	ip, r2
 80068fa:	44bc      	add	ip, r7
 80068fc:	4463      	add	r3, ip
 80068fe:	2210      	movs	r2, #16
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e069      	b.n	80069d8 <UART_SetConfig+0x250>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a64      	ldr	r2, [pc, #400]	; (8006a9c <UART_SetConfig+0x314>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d107      	bne.n	800691e <UART_SetConfig+0x196>
 800690e:	231b      	movs	r3, #27
 8006910:	2218      	movs	r2, #24
 8006912:	4694      	mov	ip, r2
 8006914:	44bc      	add	ip, r7
 8006916:	4463      	add	r3, ip
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e05c      	b.n	80069d8 <UART_SetConfig+0x250>
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a5f      	ldr	r2, [pc, #380]	; (8006aa0 <UART_SetConfig+0x318>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d107      	bne.n	8006938 <UART_SetConfig+0x1b0>
 8006928:	231b      	movs	r3, #27
 800692a:	2218      	movs	r2, #24
 800692c:	4694      	mov	ip, r2
 800692e:	44bc      	add	ip, r7
 8006930:	4463      	add	r3, ip
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e04f      	b.n	80069d8 <UART_SetConfig+0x250>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a52      	ldr	r2, [pc, #328]	; (8006a88 <UART_SetConfig+0x300>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d143      	bne.n	80069ca <UART_SetConfig+0x242>
 8006942:	4b54      	ldr	r3, [pc, #336]	; (8006a94 <UART_SetConfig+0x30c>)
 8006944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006946:	23c0      	movs	r3, #192	; 0xc0
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4013      	ands	r3, r2
 800694c:	22c0      	movs	r2, #192	; 0xc0
 800694e:	0112      	lsls	r2, r2, #4
 8006950:	4293      	cmp	r3, r2
 8006952:	d02a      	beq.n	80069aa <UART_SetConfig+0x222>
 8006954:	22c0      	movs	r2, #192	; 0xc0
 8006956:	0112      	lsls	r2, r2, #4
 8006958:	4293      	cmp	r3, r2
 800695a:	d82e      	bhi.n	80069ba <UART_SetConfig+0x232>
 800695c:	2280      	movs	r2, #128	; 0x80
 800695e:	0112      	lsls	r2, r2, #4
 8006960:	4293      	cmp	r3, r2
 8006962:	d012      	beq.n	800698a <UART_SetConfig+0x202>
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	0112      	lsls	r2, r2, #4
 8006968:	4293      	cmp	r3, r2
 800696a:	d826      	bhi.n	80069ba <UART_SetConfig+0x232>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <UART_SetConfig+0x1f2>
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	00d2      	lsls	r2, r2, #3
 8006974:	4293      	cmp	r3, r2
 8006976:	d010      	beq.n	800699a <UART_SetConfig+0x212>
 8006978:	e01f      	b.n	80069ba <UART_SetConfig+0x232>
 800697a:	231b      	movs	r3, #27
 800697c:	2218      	movs	r2, #24
 800697e:	4694      	mov	ip, r2
 8006980:	44bc      	add	ip, r7
 8006982:	4463      	add	r3, ip
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e026      	b.n	80069d8 <UART_SetConfig+0x250>
 800698a:	231b      	movs	r3, #27
 800698c:	2218      	movs	r2, #24
 800698e:	4694      	mov	ip, r2
 8006990:	44bc      	add	ip, r7
 8006992:	4463      	add	r3, ip
 8006994:	2202      	movs	r2, #2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	e01e      	b.n	80069d8 <UART_SetConfig+0x250>
 800699a:	231b      	movs	r3, #27
 800699c:	2218      	movs	r2, #24
 800699e:	4694      	mov	ip, r2
 80069a0:	44bc      	add	ip, r7
 80069a2:	4463      	add	r3, ip
 80069a4:	2204      	movs	r2, #4
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e016      	b.n	80069d8 <UART_SetConfig+0x250>
 80069aa:	231b      	movs	r3, #27
 80069ac:	2218      	movs	r2, #24
 80069ae:	4694      	mov	ip, r2
 80069b0:	44bc      	add	ip, r7
 80069b2:	4463      	add	r3, ip
 80069b4:	2208      	movs	r2, #8
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e00e      	b.n	80069d8 <UART_SetConfig+0x250>
 80069ba:	231b      	movs	r3, #27
 80069bc:	2218      	movs	r2, #24
 80069be:	4694      	mov	ip, r2
 80069c0:	44bc      	add	ip, r7
 80069c2:	4463      	add	r3, ip
 80069c4:	2210      	movs	r2, #16
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e006      	b.n	80069d8 <UART_SetConfig+0x250>
 80069ca:	231b      	movs	r3, #27
 80069cc:	2218      	movs	r2, #24
 80069ce:	4694      	mov	ip, r2
 80069d0:	44bc      	add	ip, r7
 80069d2:	4463      	add	r3, ip
 80069d4:	2210      	movs	r2, #16
 80069d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <UART_SetConfig+0x300>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d000      	beq.n	80069e4 <UART_SetConfig+0x25c>
 80069e2:	e09e      	b.n	8006b22 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069e4:	231b      	movs	r3, #27
 80069e6:	2218      	movs	r2, #24
 80069e8:	4694      	mov	ip, r2
 80069ea:	44bc      	add	ip, r7
 80069ec:	4463      	add	r3, ip
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d01d      	beq.n	8006a30 <UART_SetConfig+0x2a8>
 80069f4:	dc20      	bgt.n	8006a38 <UART_SetConfig+0x2b0>
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d015      	beq.n	8006a26 <UART_SetConfig+0x29e>
 80069fa:	dc1d      	bgt.n	8006a38 <UART_SetConfig+0x2b0>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <UART_SetConfig+0x27e>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d005      	beq.n	8006a10 <UART_SetConfig+0x288>
 8006a04:	e018      	b.n	8006a38 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a06:	f7fe fa7b 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a0e:	e01d      	b.n	8006a4c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a10:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <UART_SetConfig+0x30c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2210      	movs	r2, #16
 8006a16:	4013      	ands	r3, r2
 8006a18:	d002      	beq.n	8006a20 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <UART_SetConfig+0x31c>)
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a1e:	e015      	b.n	8006a4c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8006a20:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <UART_SetConfig+0x320>)
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a24:	e012      	b.n	8006a4c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a26:	f7fe f9bb 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a2e:	e00d      	b.n	8006a4c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a36:	e009      	b.n	8006a4c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a3c:	231a      	movs	r3, #26
 8006a3e:	2218      	movs	r2, #24
 8006a40:	4694      	mov	ip, r2
 8006a42:	44bc      	add	ip, r7
 8006a44:	4463      	add	r3, ip
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
        break;
 8006a4a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d100      	bne.n	8006a54 <UART_SetConfig+0x2cc>
 8006a52:	e13c      	b.n	8006cce <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	0013      	movs	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	189b      	adds	r3, r3, r2
 8006a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d305      	bcc.n	8006a70 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d91d      	bls.n	8006aac <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8006a70:	231a      	movs	r3, #26
 8006a72:	2218      	movs	r2, #24
 8006a74:	4694      	mov	ip, r2
 8006a76:	44bc      	add	ip, r7
 8006a78:	4463      	add	r3, ip
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e126      	b.n	8006cce <UART_SetConfig+0x546>
 8006a80:	efff69f3 	.word	0xefff69f3
 8006a84:	ffffcfff 	.word	0xffffcfff
 8006a88:	40004800 	.word	0x40004800
 8006a8c:	fffff4ff 	.word	0xfffff4ff
 8006a90:	40013800 	.word	0x40013800
 8006a94:	40021000 	.word	0x40021000
 8006a98:	40004400 	.word	0x40004400
 8006a9c:	40004c00 	.word	0x40004c00
 8006aa0:	40005000 	.word	0x40005000
 8006aa4:	003d0900 	.word	0x003d0900
 8006aa8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	6939      	ldr	r1, [r7, #16]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	000b      	movs	r3, r1
 8006aba:	0e1b      	lsrs	r3, r3, #24
 8006abc:	0010      	movs	r0, r2
 8006abe:	0205      	lsls	r5, r0, #8
 8006ac0:	431d      	orrs	r5, r3
 8006ac2:	000b      	movs	r3, r1
 8006ac4:	021c      	lsls	r4, r3, #8
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	68b8      	ldr	r0, [r7, #8]
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	1900      	adds	r0, r0, r4
 8006ad8:	4169      	adcs	r1, r5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f7f9 fc8e 	bl	8000408 <__aeabi_uldivmod>
 8006aec:	0002      	movs	r2, r0
 8006aee:	000b      	movs	r3, r1
 8006af0:	0013      	movs	r3, r2
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af6:	23c0      	movs	r3, #192	; 0xc0
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d309      	bcc.n	8006b12 <UART_SetConfig+0x38a>
 8006afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	035b      	lsls	r3, r3, #13
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d204      	bcs.n	8006b12 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	e0dd      	b.n	8006cce <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006b12:	231a      	movs	r3, #26
 8006b14:	2218      	movs	r2, #24
 8006b16:	4694      	mov	ip, r2
 8006b18:	44bc      	add	ip, r7
 8006b1a:	4463      	add	r3, ip
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e0d5      	b.n	8006cce <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	69da      	ldr	r2, [r3, #28]
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d000      	beq.n	8006b30 <UART_SetConfig+0x3a8>
 8006b2e:	e074      	b.n	8006c1a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8006b30:	231b      	movs	r3, #27
 8006b32:	2218      	movs	r2, #24
 8006b34:	4694      	mov	ip, r2
 8006b36:	44bc      	add	ip, r7
 8006b38:	4463      	add	r3, ip
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d822      	bhi.n	8006b86 <UART_SetConfig+0x3fe>
 8006b40:	009a      	lsls	r2, r3, #2
 8006b42:	4b6b      	ldr	r3, [pc, #428]	; (8006cf0 <UART_SetConfig+0x568>)
 8006b44:	18d3      	adds	r3, r2, r3
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4a:	f7fe f9d9 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b52:	e022      	b.n	8006b9a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fe f9ea 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b5c:	e01d      	b.n	8006b9a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b5e:	4b65      	ldr	r3, [pc, #404]	; (8006cf4 <UART_SetConfig+0x56c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2210      	movs	r2, #16
 8006b64:	4013      	ands	r3, r2
 8006b66:	d002      	beq.n	8006b6e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b68:	4b63      	ldr	r3, [pc, #396]	; (8006cf8 <UART_SetConfig+0x570>)
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b6c:	e015      	b.n	8006b9a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <UART_SetConfig+0x574>)
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b72:	e012      	b.n	8006b9a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b74:	f7fe f914 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b7c:	e00d      	b.n	8006b9a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b84:	e009      	b.n	8006b9a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b8a:	231a      	movs	r3, #26
 8006b8c:	2218      	movs	r2, #24
 8006b8e:	4694      	mov	ip, r2
 8006b90:	44bc      	add	ip, r7
 8006b92:	4463      	add	r3, ip
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
        break;
 8006b98:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d100      	bne.n	8006ba2 <UART_SetConfig+0x41a>
 8006ba0:	e095      	b.n	8006cce <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	005a      	lsls	r2, r3, #1
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	18d2      	adds	r2, r2, r3
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	0010      	movs	r0, r2
 8006bb6:	f7f9 fab1 	bl	800011c <__udivsi3>
 8006bba:	0003      	movs	r3, r0
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d921      	bls.n	8006c0a <UART_SetConfig+0x482>
 8006bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	025b      	lsls	r3, r3, #9
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d21c      	bcs.n	8006c0a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	200e      	movs	r0, #14
 8006bd6:	2418      	movs	r4, #24
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	181b      	adds	r3, r3, r0
 8006bdc:	210f      	movs	r1, #15
 8006bde:	438a      	bics	r2, r1
 8006be0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2207      	movs	r2, #7
 8006bea:	4013      	ands	r3, r2
 8006bec:	b299      	uxth	r1, r3
 8006bee:	193b      	adds	r3, r7, r4
 8006bf0:	181b      	adds	r3, r3, r0
 8006bf2:	193a      	adds	r2, r7, r4
 8006bf4:	1812      	adds	r2, r2, r0
 8006bf6:	8812      	ldrh	r2, [r2, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	193a      	adds	r2, r7, r4
 8006c02:	1812      	adds	r2, r2, r0
 8006c04:	8812      	ldrh	r2, [r2, #0]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e061      	b.n	8006cce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006c0a:	231a      	movs	r3, #26
 8006c0c:	2218      	movs	r2, #24
 8006c0e:	4694      	mov	ip, r2
 8006c10:	44bc      	add	ip, r7
 8006c12:	4463      	add	r3, ip
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e059      	b.n	8006cce <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1a:	231b      	movs	r3, #27
 8006c1c:	2218      	movs	r2, #24
 8006c1e:	4694      	mov	ip, r2
 8006c20:	44bc      	add	ip, r7
 8006c22:	4463      	add	r3, ip
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d822      	bhi.n	8006c70 <UART_SetConfig+0x4e8>
 8006c2a:	009a      	lsls	r2, r3, #2
 8006c2c:	4b34      	ldr	r3, [pc, #208]	; (8006d00 <UART_SetConfig+0x578>)
 8006c2e:	18d3      	adds	r3, r2, r3
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fe f964 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3c:	e022      	b.n	8006c84 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3e:	f7fe f975 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8006c42:	0003      	movs	r3, r0
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c46:	e01d      	b.n	8006c84 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c48:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <UART_SetConfig+0x56c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d002      	beq.n	8006c58 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <UART_SetConfig+0x570>)
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c56:	e015      	b.n	8006c84 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <UART_SetConfig+0x574>)
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c5c:	e012      	b.n	8006c84 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fe f89f 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8006c62:	0003      	movs	r3, r0
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c66:	e00d      	b.n	8006c84 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c6e:	e009      	b.n	8006c84 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c74:	231a      	movs	r3, #26
 8006c76:	2218      	movs	r2, #24
 8006c78:	4694      	mov	ip, r2
 8006c7a:	44bc      	add	ip, r7
 8006c7c:	4463      	add	r3, ip
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
        break;
 8006c82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d021      	beq.n	8006cce <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	085a      	lsrs	r2, r3, #1
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	18d2      	adds	r2, r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	0019      	movs	r1, r3
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	f7f9 fa3e 	bl	800011c <__udivsi3>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	2b0f      	cmp	r3, #15
 8006caa:	d909      	bls.n	8006cc0 <UART_SetConfig+0x538>
 8006cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cae:	2380      	movs	r3, #128	; 0x80
 8006cb0:	025b      	lsls	r3, r3, #9
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d204      	bcs.n	8006cc0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cbc:	60da      	str	r2, [r3, #12]
 8006cbe:	e006      	b.n	8006cce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc0:	231a      	movs	r3, #26
 8006cc2:	2218      	movs	r2, #24
 8006cc4:	4694      	mov	ip, r2
 8006cc6:	44bc      	add	ip, r7
 8006cc8:	4463      	add	r3, ip
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cda:	231a      	movs	r3, #26
 8006cdc:	2218      	movs	r2, #24
 8006cde:	4694      	mov	ip, r2
 8006ce0:	44bc      	add	ip, r7
 8006ce2:	4463      	add	r3, ip
 8006ce4:	781b      	ldrb	r3, [r3, #0]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b00e      	add	sp, #56	; 0x38
 8006cec:	bdb0      	pop	{r4, r5, r7, pc}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	08007a20 	.word	0x08007a20
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	003d0900 	.word	0x003d0900
 8006cfc:	00f42400 	.word	0x00f42400
 8006d00:	08007a44 	.word	0x08007a44

08006d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2201      	movs	r2, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a4a      	ldr	r2, [pc, #296]	; (8006e48 <UART_AdvFeatureConfig+0x144>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	0019      	movs	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	2202      	movs	r2, #2
 8006d34:	4013      	ands	r3, r2
 8006d36:	d00b      	beq.n	8006d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4a43      	ldr	r2, [pc, #268]	; (8006e4c <UART_AdvFeatureConfig+0x148>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	0019      	movs	r1, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2204      	movs	r2, #4
 8006d56:	4013      	ands	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4a3b      	ldr	r2, [pc, #236]	; (8006e50 <UART_AdvFeatureConfig+0x14c>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	0019      	movs	r1, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2208      	movs	r2, #8
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4a34      	ldr	r2, [pc, #208]	; (8006e54 <UART_AdvFeatureConfig+0x150>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	0019      	movs	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	2210      	movs	r2, #16
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <UART_AdvFeatureConfig+0x154>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2220      	movs	r2, #32
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	4a25      	ldr	r2, [pc, #148]	; (8006e5c <UART_AdvFeatureConfig+0x158>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2240      	movs	r2, #64	; 0x40
 8006dde:	4013      	ands	r3, r2
 8006de0:	d01d      	beq.n	8006e1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <UART_AdvFeatureConfig+0x15c>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	0019      	movs	r1, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dfe:	2380      	movs	r3, #128	; 0x80
 8006e00:	035b      	lsls	r3, r3, #13
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d10b      	bne.n	8006e1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <UART_AdvFeatureConfig+0x160>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	0019      	movs	r1, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	4013      	ands	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <UART_AdvFeatureConfig+0x164>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	0019      	movs	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b002      	add	sp, #8
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	fffdffff 	.word	0xfffdffff
 8006e4c:	fffeffff 	.word	0xfffeffff
 8006e50:	fffbffff 	.word	0xfffbffff
 8006e54:	ffff7fff 	.word	0xffff7fff
 8006e58:	ffffefff 	.word	0xffffefff
 8006e5c:	ffffdfff 	.word	0xffffdfff
 8006e60:	ffefffff 	.word	0xffefffff
 8006e64:	ff9fffff 	.word	0xff9fffff
 8006e68:	fff7ffff 	.word	0xfff7ffff

08006e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	2100      	movs	r1, #0
 8006e7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e7c:	f7fc f98c 	bl	8003198 <HAL_GetTick>
 8006e80:	0003      	movs	r3, r0
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d10c      	bne.n	8006eac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2280      	movs	r2, #128	; 0x80
 8006e96:	0391      	lsls	r1, r2, #14
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <UART_CheckIdleState+0x8c>)
 8006e9c:	9200      	str	r2, [sp, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f000 f82c 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8006ea4:	1e03      	subs	r3, r0, #0
 8006ea6:	d001      	beq.n	8006eac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e021      	b.n	8006ef0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d10c      	bne.n	8006ed4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2280      	movs	r2, #128	; 0x80
 8006ebe:	03d1      	lsls	r1, r2, #15
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4a0d      	ldr	r2, [pc, #52]	; (8006ef8 <UART_CheckIdleState+0x8c>)
 8006ec4:	9200      	str	r2, [sp, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f000 f818 	bl	8006efc <UART_WaitOnFlagUntilTimeout>
 8006ecc:	1e03      	subs	r3, r0, #0
 8006ece:	d001      	beq.n	8006ed4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e00d      	b.n	8006ef0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2274      	movs	r2, #116	; 0x74
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b004      	add	sp, #16
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	01ffffff 	.word	0x01ffffff

08006efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b094      	sub	sp, #80	; 0x50
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	1dfb      	adds	r3, r7, #7
 8006f0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0c:	e0a3      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f10:	3301      	adds	r3, #1
 8006f12:	d100      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006f14:	e09f      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fc f93f 	bl	8003198 <HAL_GetTick>
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d13d      	bne.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f34:	647b      	str	r3, [r7, #68]	; 0x44
 8006f36:	2301      	movs	r3, #1
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	f383 8810 	msr	PRIMASK, r3
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	494c      	ldr	r1, [pc, #304]	; (8007080 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006f4e:	400a      	ands	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	643b      	str	r3, [r7, #64]	; 0x40
 8006f68:	2301      	movs	r3, #1
 8006f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f383 8810 	msr	PRIMASK, r3
}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2101      	movs	r1, #1
 8006f80:	438a      	bics	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	f383 8810 	msr	PRIMASK, r3
}
 8006f8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2274      	movs	r2, #116	; 0x74
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e067      	b.n	8007078 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d050      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d146      	bne.n	8007056 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	0112      	lsls	r2, r2, #4
 8006fd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd6:	613b      	str	r3, [r7, #16]
  return(result);
 8006fd8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4923      	ldr	r1, [pc, #140]	; (8007080 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ff4:	400a      	ands	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007004:	f3ef 8310 	mrs	r3, PRIMASK
 8007008:	61fb      	str	r3, [r7, #28]
  return(result);
 800700a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	64bb      	str	r3, [r7, #72]	; 0x48
 800700e:	2301      	movs	r3, #1
 8007010:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f383 8810 	msr	PRIMASK, r3
}
 8007018:	46c0      	nop			; (mov r8, r8)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2101      	movs	r1, #1
 8007026:	438a      	bics	r2, r1
 8007028:	609a      	str	r2, [r3, #8]
 800702a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	f383 8810 	msr	PRIMASK, r3
}
 8007034:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2280      	movs	r2, #128	; 0x80
 8007046:	2120      	movs	r1, #32
 8007048:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2274      	movs	r2, #116	; 0x74
 800704e:	2100      	movs	r1, #0
 8007050:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e010      	b.n	8007078 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	4013      	ands	r3, r2
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	425a      	negs	r2, r3
 8007066:	4153      	adcs	r3, r2
 8007068:	b2db      	uxtb	r3, r3
 800706a:	001a      	movs	r2, r3
 800706c:	1dfb      	adds	r3, r7, #7
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d100      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007074:	e74b      	b.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b014      	add	sp, #80	; 0x50
 800707e:	bd80      	pop	{r7, pc}
 8007080:	fffffe5f 	.word	0xfffffe5f

08007084 <__errno>:
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <__errno+0x8>)
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	4770      	bx	lr
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	200000cc 	.word	0x200000cc

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	2600      	movs	r6, #0
 8007094:	4d0c      	ldr	r5, [pc, #48]	; (80070c8 <__libc_init_array+0x38>)
 8007096:	4c0d      	ldr	r4, [pc, #52]	; (80070cc <__libc_init_array+0x3c>)
 8007098:	1b64      	subs	r4, r4, r5
 800709a:	10a4      	asrs	r4, r4, #2
 800709c:	42a6      	cmp	r6, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	2600      	movs	r6, #0
 80070a2:	f000 fc47 	bl	8007934 <_init>
 80070a6:	4d0a      	ldr	r5, [pc, #40]	; (80070d0 <__libc_init_array+0x40>)
 80070a8:	4c0a      	ldr	r4, [pc, #40]	; (80070d4 <__libc_init_array+0x44>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	00b3      	lsls	r3, r6, #2
 80070b6:	58eb      	ldr	r3, [r5, r3]
 80070b8:	4798      	blx	r3
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	00b3      	lsls	r3, r6, #2
 80070c0:	58eb      	ldr	r3, [r5, r3]
 80070c2:	4798      	blx	r3
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	08007aa4 	.word	0x08007aa4
 80070cc:	08007aa4 	.word	0x08007aa4
 80070d0:	08007aa4 	.word	0x08007aa4
 80070d4:	08007aa8 	.word	0x08007aa8

080070d8 <memset>:
 80070d8:	0003      	movs	r3, r0
 80070da:	1882      	adds	r2, r0, r2
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	7019      	strb	r1, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <siprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b500      	push	{lr}
 80070ec:	490b      	ldr	r1, [pc, #44]	; (800711c <siprintf+0x34>)
 80070ee:	b09c      	sub	sp, #112	; 0x70
 80070f0:	ab1d      	add	r3, sp, #116	; 0x74
 80070f2:	9002      	str	r0, [sp, #8]
 80070f4:	9006      	str	r0, [sp, #24]
 80070f6:	9107      	str	r1, [sp, #28]
 80070f8:	9104      	str	r1, [sp, #16]
 80070fa:	4809      	ldr	r0, [pc, #36]	; (8007120 <siprintf+0x38>)
 80070fc:	4909      	ldr	r1, [pc, #36]	; (8007124 <siprintf+0x3c>)
 80070fe:	cb04      	ldmia	r3!, {r2}
 8007100:	9105      	str	r1, [sp, #20]
 8007102:	6800      	ldr	r0, [r0, #0]
 8007104:	a902      	add	r1, sp, #8
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	f000 f870 	bl	80071ec <_svfiprintf_r>
 800710c:	2300      	movs	r3, #0
 800710e:	9a02      	ldr	r2, [sp, #8]
 8007110:	7013      	strb	r3, [r2, #0]
 8007112:	b01c      	add	sp, #112	; 0x70
 8007114:	bc08      	pop	{r3}
 8007116:	b003      	add	sp, #12
 8007118:	4718      	bx	r3
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	7fffffff 	.word	0x7fffffff
 8007120:	200000cc 	.word	0x200000cc
 8007124:	ffff0208 	.word	0xffff0208

08007128 <__ssputs_r>:
 8007128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800712a:	688e      	ldr	r6, [r1, #8]
 800712c:	b085      	sub	sp, #20
 800712e:	0007      	movs	r7, r0
 8007130:	000c      	movs	r4, r1
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	429e      	cmp	r6, r3
 8007138:	d83c      	bhi.n	80071b4 <__ssputs_r+0x8c>
 800713a:	2390      	movs	r3, #144	; 0x90
 800713c:	898a      	ldrh	r2, [r1, #12]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	421a      	tst	r2, r3
 8007142:	d034      	beq.n	80071ae <__ssputs_r+0x86>
 8007144:	2503      	movs	r5, #3
 8007146:	6909      	ldr	r1, [r1, #16]
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	1a5b      	subs	r3, r3, r1
 800714c:	9302      	str	r3, [sp, #8]
 800714e:	6963      	ldr	r3, [r4, #20]
 8007150:	9802      	ldr	r0, [sp, #8]
 8007152:	435d      	muls	r5, r3
 8007154:	0feb      	lsrs	r3, r5, #31
 8007156:	195d      	adds	r5, r3, r5
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	106d      	asrs	r5, r5, #1
 800715c:	3301      	adds	r3, #1
 800715e:	181b      	adds	r3, r3, r0
 8007160:	42ab      	cmp	r3, r5
 8007162:	d900      	bls.n	8007166 <__ssputs_r+0x3e>
 8007164:	001d      	movs	r5, r3
 8007166:	0553      	lsls	r3, r2, #21
 8007168:	d532      	bpl.n	80071d0 <__ssputs_r+0xa8>
 800716a:	0029      	movs	r1, r5
 800716c:	0038      	movs	r0, r7
 800716e:	f000 fb31 	bl	80077d4 <_malloc_r>
 8007172:	1e06      	subs	r6, r0, #0
 8007174:	d109      	bne.n	800718a <__ssputs_r+0x62>
 8007176:	230c      	movs	r3, #12
 8007178:	603b      	str	r3, [r7, #0]
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2001      	movs	r0, #1
 800717e:	89a2      	ldrh	r2, [r4, #12]
 8007180:	4240      	negs	r0, r0
 8007182:	4313      	orrs	r3, r2
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	b005      	add	sp, #20
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718a:	9a02      	ldr	r2, [sp, #8]
 800718c:	6921      	ldr	r1, [r4, #16]
 800718e:	f000 faba 	bl	8007706 <memcpy>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <__ssputs_r+0xc0>)
 8007196:	401a      	ands	r2, r3
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	4313      	orrs	r3, r2
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	9b02      	ldr	r3, [sp, #8]
 80071a0:	6126      	str	r6, [r4, #16]
 80071a2:	18f6      	adds	r6, r6, r3
 80071a4:	6026      	str	r6, [r4, #0]
 80071a6:	6165      	str	r5, [r4, #20]
 80071a8:	9e01      	ldr	r6, [sp, #4]
 80071aa:	1aed      	subs	r5, r5, r3
 80071ac:	60a5      	str	r5, [r4, #8]
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	429e      	cmp	r6, r3
 80071b2:	d900      	bls.n	80071b6 <__ssputs_r+0x8e>
 80071b4:	9e01      	ldr	r6, [sp, #4]
 80071b6:	0032      	movs	r2, r6
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	f000 faac 	bl	8007718 <memmove>
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	2000      	movs	r0, #0
 80071c4:	1b9b      	subs	r3, r3, r6
 80071c6:	60a3      	str	r3, [r4, #8]
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	199e      	adds	r6, r3, r6
 80071cc:	6026      	str	r6, [r4, #0]
 80071ce:	e7da      	b.n	8007186 <__ssputs_r+0x5e>
 80071d0:	002a      	movs	r2, r5
 80071d2:	0038      	movs	r0, r7
 80071d4:	f000 fb5c 	bl	8007890 <_realloc_r>
 80071d8:	1e06      	subs	r6, r0, #0
 80071da:	d1e0      	bne.n	800719e <__ssputs_r+0x76>
 80071dc:	0038      	movs	r0, r7
 80071de:	6921      	ldr	r1, [r4, #16]
 80071e0:	f000 faae 	bl	8007740 <_free_r>
 80071e4:	e7c7      	b.n	8007176 <__ssputs_r+0x4e>
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	fffffb7f 	.word	0xfffffb7f

080071ec <_svfiprintf_r>:
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ee:	b0a1      	sub	sp, #132	; 0x84
 80071f0:	9003      	str	r0, [sp, #12]
 80071f2:	001d      	movs	r5, r3
 80071f4:	898b      	ldrh	r3, [r1, #12]
 80071f6:	000f      	movs	r7, r1
 80071f8:	0016      	movs	r6, r2
 80071fa:	061b      	lsls	r3, r3, #24
 80071fc:	d511      	bpl.n	8007222 <_svfiprintf_r+0x36>
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10e      	bne.n	8007222 <_svfiprintf_r+0x36>
 8007204:	2140      	movs	r1, #64	; 0x40
 8007206:	f000 fae5 	bl	80077d4 <_malloc_r>
 800720a:	6038      	str	r0, [r7, #0]
 800720c:	6138      	str	r0, [r7, #16]
 800720e:	2800      	cmp	r0, #0
 8007210:	d105      	bne.n	800721e <_svfiprintf_r+0x32>
 8007212:	230c      	movs	r3, #12
 8007214:	9a03      	ldr	r2, [sp, #12]
 8007216:	3801      	subs	r0, #1
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	b021      	add	sp, #132	; 0x84
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721e:	2340      	movs	r3, #64	; 0x40
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	2300      	movs	r3, #0
 8007224:	ac08      	add	r4, sp, #32
 8007226:	6163      	str	r3, [r4, #20]
 8007228:	3320      	adds	r3, #32
 800722a:	7663      	strb	r3, [r4, #25]
 800722c:	3310      	adds	r3, #16
 800722e:	76a3      	strb	r3, [r4, #26]
 8007230:	9507      	str	r5, [sp, #28]
 8007232:	0035      	movs	r5, r6
 8007234:	782b      	ldrb	r3, [r5, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <_svfiprintf_r+0x52>
 800723a:	2b25      	cmp	r3, #37	; 0x25
 800723c:	d147      	bne.n	80072ce <_svfiprintf_r+0xe2>
 800723e:	1bab      	subs	r3, r5, r6
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	42b5      	cmp	r5, r6
 8007244:	d00c      	beq.n	8007260 <_svfiprintf_r+0x74>
 8007246:	0032      	movs	r2, r6
 8007248:	0039      	movs	r1, r7
 800724a:	9803      	ldr	r0, [sp, #12]
 800724c:	f7ff ff6c 	bl	8007128 <__ssputs_r>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d100      	bne.n	8007256 <_svfiprintf_r+0x6a>
 8007254:	e0ae      	b.n	80073b4 <_svfiprintf_r+0x1c8>
 8007256:	6962      	ldr	r2, [r4, #20]
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	4694      	mov	ip, r2
 800725c:	4463      	add	r3, ip
 800725e:	6163      	str	r3, [r4, #20]
 8007260:	782b      	ldrb	r3, [r5, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d100      	bne.n	8007268 <_svfiprintf_r+0x7c>
 8007266:	e0a5      	b.n	80073b4 <_svfiprintf_r+0x1c8>
 8007268:	2201      	movs	r2, #1
 800726a:	2300      	movs	r3, #0
 800726c:	4252      	negs	r2, r2
 800726e:	6062      	str	r2, [r4, #4]
 8007270:	a904      	add	r1, sp, #16
 8007272:	3254      	adds	r2, #84	; 0x54
 8007274:	1852      	adds	r2, r2, r1
 8007276:	1c6e      	adds	r6, r5, #1
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	60e3      	str	r3, [r4, #12]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	7013      	strb	r3, [r2, #0]
 8007280:	65a3      	str	r3, [r4, #88]	; 0x58
 8007282:	2205      	movs	r2, #5
 8007284:	7831      	ldrb	r1, [r6, #0]
 8007286:	4854      	ldr	r0, [pc, #336]	; (80073d8 <_svfiprintf_r+0x1ec>)
 8007288:	f000 fa32 	bl	80076f0 <memchr>
 800728c:	1c75      	adds	r5, r6, #1
 800728e:	2800      	cmp	r0, #0
 8007290:	d11f      	bne.n	80072d2 <_svfiprintf_r+0xe6>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	06d3      	lsls	r3, r2, #27
 8007296:	d504      	bpl.n	80072a2 <_svfiprintf_r+0xb6>
 8007298:	2353      	movs	r3, #83	; 0x53
 800729a:	a904      	add	r1, sp, #16
 800729c:	185b      	adds	r3, r3, r1
 800729e:	2120      	movs	r1, #32
 80072a0:	7019      	strb	r1, [r3, #0]
 80072a2:	0713      	lsls	r3, r2, #28
 80072a4:	d504      	bpl.n	80072b0 <_svfiprintf_r+0xc4>
 80072a6:	2353      	movs	r3, #83	; 0x53
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	185b      	adds	r3, r3, r1
 80072ac:	212b      	movs	r1, #43	; 0x2b
 80072ae:	7019      	strb	r1, [r3, #0]
 80072b0:	7833      	ldrb	r3, [r6, #0]
 80072b2:	2b2a      	cmp	r3, #42	; 0x2a
 80072b4:	d016      	beq.n	80072e4 <_svfiprintf_r+0xf8>
 80072b6:	0035      	movs	r5, r6
 80072b8:	2100      	movs	r1, #0
 80072ba:	200a      	movs	r0, #10
 80072bc:	68e3      	ldr	r3, [r4, #12]
 80072be:	782a      	ldrb	r2, [r5, #0]
 80072c0:	1c6e      	adds	r6, r5, #1
 80072c2:	3a30      	subs	r2, #48	; 0x30
 80072c4:	2a09      	cmp	r2, #9
 80072c6:	d94e      	bls.n	8007366 <_svfiprintf_r+0x17a>
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d111      	bne.n	80072f0 <_svfiprintf_r+0x104>
 80072cc:	e017      	b.n	80072fe <_svfiprintf_r+0x112>
 80072ce:	3501      	adds	r5, #1
 80072d0:	e7b0      	b.n	8007234 <_svfiprintf_r+0x48>
 80072d2:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <_svfiprintf_r+0x1ec>)
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	1ac0      	subs	r0, r0, r3
 80072d8:	2301      	movs	r3, #1
 80072da:	4083      	lsls	r3, r0
 80072dc:	4313      	orrs	r3, r2
 80072de:	002e      	movs	r6, r5
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	e7ce      	b.n	8007282 <_svfiprintf_r+0x96>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	1d19      	adds	r1, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9107      	str	r1, [sp, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db01      	blt.n	80072f4 <_svfiprintf_r+0x108>
 80072f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f2:	e004      	b.n	80072fe <_svfiprintf_r+0x112>
 80072f4:	425b      	negs	r3, r3
 80072f6:	60e3      	str	r3, [r4, #12]
 80072f8:	2302      	movs	r3, #2
 80072fa:	4313      	orrs	r3, r2
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	782b      	ldrb	r3, [r5, #0]
 8007300:	2b2e      	cmp	r3, #46	; 0x2e
 8007302:	d10a      	bne.n	800731a <_svfiprintf_r+0x12e>
 8007304:	786b      	ldrb	r3, [r5, #1]
 8007306:	2b2a      	cmp	r3, #42	; 0x2a
 8007308:	d135      	bne.n	8007376 <_svfiprintf_r+0x18a>
 800730a:	9b07      	ldr	r3, [sp, #28]
 800730c:	3502      	adds	r5, #2
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	9207      	str	r2, [sp, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	db2b      	blt.n	8007370 <_svfiprintf_r+0x184>
 8007318:	9309      	str	r3, [sp, #36]	; 0x24
 800731a:	4e30      	ldr	r6, [pc, #192]	; (80073dc <_svfiprintf_r+0x1f0>)
 800731c:	2203      	movs	r2, #3
 800731e:	0030      	movs	r0, r6
 8007320:	7829      	ldrb	r1, [r5, #0]
 8007322:	f000 f9e5 	bl	80076f0 <memchr>
 8007326:	2800      	cmp	r0, #0
 8007328:	d006      	beq.n	8007338 <_svfiprintf_r+0x14c>
 800732a:	2340      	movs	r3, #64	; 0x40
 800732c:	1b80      	subs	r0, r0, r6
 800732e:	4083      	lsls	r3, r0
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	3501      	adds	r5, #1
 8007334:	4313      	orrs	r3, r2
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	7829      	ldrb	r1, [r5, #0]
 800733a:	2206      	movs	r2, #6
 800733c:	4828      	ldr	r0, [pc, #160]	; (80073e0 <_svfiprintf_r+0x1f4>)
 800733e:	1c6e      	adds	r6, r5, #1
 8007340:	7621      	strb	r1, [r4, #24]
 8007342:	f000 f9d5 	bl	80076f0 <memchr>
 8007346:	2800      	cmp	r0, #0
 8007348:	d03c      	beq.n	80073c4 <_svfiprintf_r+0x1d8>
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <_svfiprintf_r+0x1f8>)
 800734c:	2b00      	cmp	r3, #0
 800734e:	d125      	bne.n	800739c <_svfiprintf_r+0x1b0>
 8007350:	2207      	movs	r2, #7
 8007352:	9b07      	ldr	r3, [sp, #28]
 8007354:	3307      	adds	r3, #7
 8007356:	4393      	bics	r3, r2
 8007358:	3308      	adds	r3, #8
 800735a:	9307      	str	r3, [sp, #28]
 800735c:	6963      	ldr	r3, [r4, #20]
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	189b      	adds	r3, r3, r2
 8007362:	6163      	str	r3, [r4, #20]
 8007364:	e765      	b.n	8007232 <_svfiprintf_r+0x46>
 8007366:	4343      	muls	r3, r0
 8007368:	0035      	movs	r5, r6
 800736a:	2101      	movs	r1, #1
 800736c:	189b      	adds	r3, r3, r2
 800736e:	e7a6      	b.n	80072be <_svfiprintf_r+0xd2>
 8007370:	2301      	movs	r3, #1
 8007372:	425b      	negs	r3, r3
 8007374:	e7d0      	b.n	8007318 <_svfiprintf_r+0x12c>
 8007376:	2300      	movs	r3, #0
 8007378:	200a      	movs	r0, #10
 800737a:	001a      	movs	r2, r3
 800737c:	3501      	adds	r5, #1
 800737e:	6063      	str	r3, [r4, #4]
 8007380:	7829      	ldrb	r1, [r5, #0]
 8007382:	1c6e      	adds	r6, r5, #1
 8007384:	3930      	subs	r1, #48	; 0x30
 8007386:	2909      	cmp	r1, #9
 8007388:	d903      	bls.n	8007392 <_svfiprintf_r+0x1a6>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0c5      	beq.n	800731a <_svfiprintf_r+0x12e>
 800738e:	9209      	str	r2, [sp, #36]	; 0x24
 8007390:	e7c3      	b.n	800731a <_svfiprintf_r+0x12e>
 8007392:	4342      	muls	r2, r0
 8007394:	0035      	movs	r5, r6
 8007396:	2301      	movs	r3, #1
 8007398:	1852      	adds	r2, r2, r1
 800739a:	e7f1      	b.n	8007380 <_svfiprintf_r+0x194>
 800739c:	ab07      	add	r3, sp, #28
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	003a      	movs	r2, r7
 80073a2:	0021      	movs	r1, r4
 80073a4:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <_svfiprintf_r+0x1fc>)
 80073a6:	9803      	ldr	r0, [sp, #12]
 80073a8:	e000      	b.n	80073ac <_svfiprintf_r+0x1c0>
 80073aa:	bf00      	nop
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	d1d3      	bne.n	800735c <_svfiprintf_r+0x170>
 80073b4:	89bb      	ldrh	r3, [r7, #12]
 80073b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073b8:	065b      	lsls	r3, r3, #25
 80073ba:	d400      	bmi.n	80073be <_svfiprintf_r+0x1d2>
 80073bc:	e72d      	b.n	800721a <_svfiprintf_r+0x2e>
 80073be:	2001      	movs	r0, #1
 80073c0:	4240      	negs	r0, r0
 80073c2:	e72a      	b.n	800721a <_svfiprintf_r+0x2e>
 80073c4:	ab07      	add	r3, sp, #28
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	003a      	movs	r2, r7
 80073ca:	0021      	movs	r1, r4
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <_svfiprintf_r+0x1fc>)
 80073ce:	9803      	ldr	r0, [sp, #12]
 80073d0:	f000 f87c 	bl	80074cc <_printf_i>
 80073d4:	e7ea      	b.n	80073ac <_svfiprintf_r+0x1c0>
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	08007a68 	.word	0x08007a68
 80073dc:	08007a6e 	.word	0x08007a6e
 80073e0:	08007a72 	.word	0x08007a72
 80073e4:	00000000 	.word	0x00000000
 80073e8:	08007129 	.word	0x08007129

080073ec <_printf_common>:
 80073ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ee:	0015      	movs	r5, r2
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	688a      	ldr	r2, [r1, #8]
 80073f4:	690b      	ldr	r3, [r1, #16]
 80073f6:	000c      	movs	r4, r1
 80073f8:	9000      	str	r0, [sp, #0]
 80073fa:	4293      	cmp	r3, r2
 80073fc:	da00      	bge.n	8007400 <_printf_common+0x14>
 80073fe:	0013      	movs	r3, r2
 8007400:	0022      	movs	r2, r4
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	3243      	adds	r2, #67	; 0x43
 8007406:	7812      	ldrb	r2, [r2, #0]
 8007408:	2a00      	cmp	r2, #0
 800740a:	d001      	beq.n	8007410 <_printf_common+0x24>
 800740c:	3301      	adds	r3, #1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	069b      	lsls	r3, r3, #26
 8007414:	d502      	bpl.n	800741c <_printf_common+0x30>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	3302      	adds	r3, #2
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	2306      	movs	r3, #6
 8007420:	0017      	movs	r7, r2
 8007422:	401f      	ands	r7, r3
 8007424:	421a      	tst	r2, r3
 8007426:	d027      	beq.n	8007478 <_printf_common+0x8c>
 8007428:	0023      	movs	r3, r4
 800742a:	3343      	adds	r3, #67	; 0x43
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	1e5a      	subs	r2, r3, #1
 8007430:	4193      	sbcs	r3, r2
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	0692      	lsls	r2, r2, #26
 8007436:	d430      	bmi.n	800749a <_printf_common+0xae>
 8007438:	0022      	movs	r2, r4
 800743a:	9901      	ldr	r1, [sp, #4]
 800743c:	9800      	ldr	r0, [sp, #0]
 800743e:	9e08      	ldr	r6, [sp, #32]
 8007440:	3243      	adds	r2, #67	; 0x43
 8007442:	47b0      	blx	r6
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d025      	beq.n	8007494 <_printf_common+0xa8>
 8007448:	2306      	movs	r3, #6
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	682a      	ldr	r2, [r5, #0]
 800744e:	68e1      	ldr	r1, [r4, #12]
 8007450:	2500      	movs	r5, #0
 8007452:	4003      	ands	r3, r0
 8007454:	2b04      	cmp	r3, #4
 8007456:	d103      	bne.n	8007460 <_printf_common+0x74>
 8007458:	1a8d      	subs	r5, r1, r2
 800745a:	43eb      	mvns	r3, r5
 800745c:	17db      	asrs	r3, r3, #31
 800745e:	401d      	ands	r5, r3
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	4293      	cmp	r3, r2
 8007466:	dd01      	ble.n	800746c <_printf_common+0x80>
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	18ed      	adds	r5, r5, r3
 800746c:	2700      	movs	r7, #0
 800746e:	42bd      	cmp	r5, r7
 8007470:	d120      	bne.n	80074b4 <_printf_common+0xc8>
 8007472:	2000      	movs	r0, #0
 8007474:	e010      	b.n	8007498 <_printf_common+0xac>
 8007476:	3701      	adds	r7, #1
 8007478:	68e3      	ldr	r3, [r4, #12]
 800747a:	682a      	ldr	r2, [r5, #0]
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	42bb      	cmp	r3, r7
 8007480:	ddd2      	ble.n	8007428 <_printf_common+0x3c>
 8007482:	0022      	movs	r2, r4
 8007484:	2301      	movs	r3, #1
 8007486:	9901      	ldr	r1, [sp, #4]
 8007488:	9800      	ldr	r0, [sp, #0]
 800748a:	9e08      	ldr	r6, [sp, #32]
 800748c:	3219      	adds	r2, #25
 800748e:	47b0      	blx	r6
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d1f0      	bne.n	8007476 <_printf_common+0x8a>
 8007494:	2001      	movs	r0, #1
 8007496:	4240      	negs	r0, r0
 8007498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800749a:	2030      	movs	r0, #48	; 0x30
 800749c:	18e1      	adds	r1, r4, r3
 800749e:	3143      	adds	r1, #67	; 0x43
 80074a0:	7008      	strb	r0, [r1, #0]
 80074a2:	0021      	movs	r1, r4
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	3145      	adds	r1, #69	; 0x45
 80074a8:	7809      	ldrb	r1, [r1, #0]
 80074aa:	18a2      	adds	r2, r4, r2
 80074ac:	3243      	adds	r2, #67	; 0x43
 80074ae:	3302      	adds	r3, #2
 80074b0:	7011      	strb	r1, [r2, #0]
 80074b2:	e7c1      	b.n	8007438 <_printf_common+0x4c>
 80074b4:	0022      	movs	r2, r4
 80074b6:	2301      	movs	r3, #1
 80074b8:	9901      	ldr	r1, [sp, #4]
 80074ba:	9800      	ldr	r0, [sp, #0]
 80074bc:	9e08      	ldr	r6, [sp, #32]
 80074be:	321a      	adds	r2, #26
 80074c0:	47b0      	blx	r6
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	d0e6      	beq.n	8007494 <_printf_common+0xa8>
 80074c6:	3701      	adds	r7, #1
 80074c8:	e7d1      	b.n	800746e <_printf_common+0x82>
	...

080074cc <_printf_i>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	b08b      	sub	sp, #44	; 0x2c
 80074d0:	9206      	str	r2, [sp, #24]
 80074d2:	000a      	movs	r2, r1
 80074d4:	3243      	adds	r2, #67	; 0x43
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	9005      	str	r0, [sp, #20]
 80074da:	9204      	str	r2, [sp, #16]
 80074dc:	7e0a      	ldrb	r2, [r1, #24]
 80074de:	000c      	movs	r4, r1
 80074e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074e2:	2a78      	cmp	r2, #120	; 0x78
 80074e4:	d806      	bhi.n	80074f4 <_printf_i+0x28>
 80074e6:	2a62      	cmp	r2, #98	; 0x62
 80074e8:	d808      	bhi.n	80074fc <_printf_i+0x30>
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d100      	bne.n	80074f0 <_printf_i+0x24>
 80074ee:	e0c0      	b.n	8007672 <_printf_i+0x1a6>
 80074f0:	2a58      	cmp	r2, #88	; 0x58
 80074f2:	d052      	beq.n	800759a <_printf_i+0xce>
 80074f4:	0026      	movs	r6, r4
 80074f6:	3642      	adds	r6, #66	; 0x42
 80074f8:	7032      	strb	r2, [r6, #0]
 80074fa:	e022      	b.n	8007542 <_printf_i+0x76>
 80074fc:	0010      	movs	r0, r2
 80074fe:	3863      	subs	r0, #99	; 0x63
 8007500:	2815      	cmp	r0, #21
 8007502:	d8f7      	bhi.n	80074f4 <_printf_i+0x28>
 8007504:	f7f8 fe00 	bl	8000108 <__gnu_thumb1_case_shi>
 8007508:	001f0016 	.word	0x001f0016
 800750c:	fff6fff6 	.word	0xfff6fff6
 8007510:	fff6fff6 	.word	0xfff6fff6
 8007514:	fff6001f 	.word	0xfff6001f
 8007518:	fff6fff6 	.word	0xfff6fff6
 800751c:	00a8fff6 	.word	0x00a8fff6
 8007520:	009a0036 	.word	0x009a0036
 8007524:	fff6fff6 	.word	0xfff6fff6
 8007528:	fff600b9 	.word	0xfff600b9
 800752c:	fff60036 	.word	0xfff60036
 8007530:	009efff6 	.word	0x009efff6
 8007534:	0026      	movs	r6, r4
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	3642      	adds	r6, #66	; 0x42
 800753a:	1d11      	adds	r1, r2, #4
 800753c:	6019      	str	r1, [r3, #0]
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	7033      	strb	r3, [r6, #0]
 8007542:	2301      	movs	r3, #1
 8007544:	e0a7      	b.n	8007696 <_printf_i+0x1ca>
 8007546:	6808      	ldr	r0, [r1, #0]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	1d0a      	adds	r2, r1, #4
 800754c:	0605      	lsls	r5, r0, #24
 800754e:	d50b      	bpl.n	8007568 <_printf_i+0x9c>
 8007550:	680d      	ldr	r5, [r1, #0]
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2d00      	cmp	r5, #0
 8007556:	da03      	bge.n	8007560 <_printf_i+0x94>
 8007558:	232d      	movs	r3, #45	; 0x2d
 800755a:	9a04      	ldr	r2, [sp, #16]
 800755c:	426d      	negs	r5, r5
 800755e:	7013      	strb	r3, [r2, #0]
 8007560:	4b61      	ldr	r3, [pc, #388]	; (80076e8 <_printf_i+0x21c>)
 8007562:	270a      	movs	r7, #10
 8007564:	9303      	str	r3, [sp, #12]
 8007566:	e032      	b.n	80075ce <_printf_i+0x102>
 8007568:	680d      	ldr	r5, [r1, #0]
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	0641      	lsls	r1, r0, #25
 800756e:	d5f1      	bpl.n	8007554 <_printf_i+0x88>
 8007570:	b22d      	sxth	r5, r5
 8007572:	e7ef      	b.n	8007554 <_printf_i+0x88>
 8007574:	680d      	ldr	r5, [r1, #0]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	1d08      	adds	r0, r1, #4
 800757a:	6018      	str	r0, [r3, #0]
 800757c:	062e      	lsls	r6, r5, #24
 800757e:	d501      	bpl.n	8007584 <_printf_i+0xb8>
 8007580:	680d      	ldr	r5, [r1, #0]
 8007582:	e003      	b.n	800758c <_printf_i+0xc0>
 8007584:	066d      	lsls	r5, r5, #25
 8007586:	d5fb      	bpl.n	8007580 <_printf_i+0xb4>
 8007588:	680d      	ldr	r5, [r1, #0]
 800758a:	b2ad      	uxth	r5, r5
 800758c:	4b56      	ldr	r3, [pc, #344]	; (80076e8 <_printf_i+0x21c>)
 800758e:	270a      	movs	r7, #10
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	2a6f      	cmp	r2, #111	; 0x6f
 8007594:	d117      	bne.n	80075c6 <_printf_i+0xfa>
 8007596:	2708      	movs	r7, #8
 8007598:	e015      	b.n	80075c6 <_printf_i+0xfa>
 800759a:	3145      	adds	r1, #69	; 0x45
 800759c:	700a      	strb	r2, [r1, #0]
 800759e:	4a52      	ldr	r2, [pc, #328]	; (80076e8 <_printf_i+0x21c>)
 80075a0:	9203      	str	r2, [sp, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	6821      	ldr	r1, [r4, #0]
 80075a6:	ca20      	ldmia	r2!, {r5}
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	0608      	lsls	r0, r1, #24
 80075ac:	d550      	bpl.n	8007650 <_printf_i+0x184>
 80075ae:	07cb      	lsls	r3, r1, #31
 80075b0:	d502      	bpl.n	80075b8 <_printf_i+0xec>
 80075b2:	2320      	movs	r3, #32
 80075b4:	4319      	orrs	r1, r3
 80075b6:	6021      	str	r1, [r4, #0]
 80075b8:	2710      	movs	r7, #16
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	d103      	bne.n	80075c6 <_printf_i+0xfa>
 80075be:	2320      	movs	r3, #32
 80075c0:	6822      	ldr	r2, [r4, #0]
 80075c2:	439a      	bics	r2, r3
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	0023      	movs	r3, r4
 80075c8:	2200      	movs	r2, #0
 80075ca:	3343      	adds	r3, #67	; 0x43
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	6863      	ldr	r3, [r4, #4]
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	db03      	blt.n	80075de <_printf_i+0x112>
 80075d6:	2204      	movs	r2, #4
 80075d8:	6821      	ldr	r1, [r4, #0]
 80075da:	4391      	bics	r1, r2
 80075dc:	6021      	str	r1, [r4, #0]
 80075de:	2d00      	cmp	r5, #0
 80075e0:	d102      	bne.n	80075e8 <_printf_i+0x11c>
 80075e2:	9e04      	ldr	r6, [sp, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <_printf_i+0x136>
 80075e8:	9e04      	ldr	r6, [sp, #16]
 80075ea:	0028      	movs	r0, r5
 80075ec:	0039      	movs	r1, r7
 80075ee:	f7f8 fe1b 	bl	8000228 <__aeabi_uidivmod>
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	3e01      	subs	r6, #1
 80075f6:	5c5b      	ldrb	r3, [r3, r1]
 80075f8:	7033      	strb	r3, [r6, #0]
 80075fa:	002b      	movs	r3, r5
 80075fc:	0005      	movs	r5, r0
 80075fe:	429f      	cmp	r7, r3
 8007600:	d9f3      	bls.n	80075ea <_printf_i+0x11e>
 8007602:	2f08      	cmp	r7, #8
 8007604:	d109      	bne.n	800761a <_printf_i+0x14e>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	07db      	lsls	r3, r3, #31
 800760a:	d506      	bpl.n	800761a <_printf_i+0x14e>
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	4293      	cmp	r3, r2
 8007612:	dc02      	bgt.n	800761a <_printf_i+0x14e>
 8007614:	2330      	movs	r3, #48	; 0x30
 8007616:	3e01      	subs	r6, #1
 8007618:	7033      	strb	r3, [r6, #0]
 800761a:	9b04      	ldr	r3, [sp, #16]
 800761c:	1b9b      	subs	r3, r3, r6
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	9b07      	ldr	r3, [sp, #28]
 8007622:	0021      	movs	r1, r4
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	9805      	ldr	r0, [sp, #20]
 8007628:	9b06      	ldr	r3, [sp, #24]
 800762a:	aa09      	add	r2, sp, #36	; 0x24
 800762c:	f7ff fede 	bl	80073ec <_printf_common>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d135      	bne.n	80076a0 <_printf_i+0x1d4>
 8007634:	2001      	movs	r0, #1
 8007636:	4240      	negs	r0, r0
 8007638:	b00b      	add	sp, #44	; 0x2c
 800763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763c:	2220      	movs	r2, #32
 800763e:	6809      	ldr	r1, [r1, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	0022      	movs	r2, r4
 8007646:	2178      	movs	r1, #120	; 0x78
 8007648:	3245      	adds	r2, #69	; 0x45
 800764a:	7011      	strb	r1, [r2, #0]
 800764c:	4a27      	ldr	r2, [pc, #156]	; (80076ec <_printf_i+0x220>)
 800764e:	e7a7      	b.n	80075a0 <_printf_i+0xd4>
 8007650:	0648      	lsls	r0, r1, #25
 8007652:	d5ac      	bpl.n	80075ae <_printf_i+0xe2>
 8007654:	b2ad      	uxth	r5, r5
 8007656:	e7aa      	b.n	80075ae <_printf_i+0xe2>
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	680d      	ldr	r5, [r1, #0]
 800765c:	1d10      	adds	r0, r2, #4
 800765e:	6949      	ldr	r1, [r1, #20]
 8007660:	6018      	str	r0, [r3, #0]
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	062e      	lsls	r6, r5, #24
 8007666:	d501      	bpl.n	800766c <_printf_i+0x1a0>
 8007668:	6019      	str	r1, [r3, #0]
 800766a:	e002      	b.n	8007672 <_printf_i+0x1a6>
 800766c:	066d      	lsls	r5, r5, #25
 800766e:	d5fb      	bpl.n	8007668 <_printf_i+0x19c>
 8007670:	8019      	strh	r1, [r3, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	9e04      	ldr	r6, [sp, #16]
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	e7d2      	b.n	8007620 <_printf_i+0x154>
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	1d11      	adds	r1, r2, #4
 800767e:	6019      	str	r1, [r3, #0]
 8007680:	6816      	ldr	r6, [r2, #0]
 8007682:	2100      	movs	r1, #0
 8007684:	0030      	movs	r0, r6
 8007686:	6862      	ldr	r2, [r4, #4]
 8007688:	f000 f832 	bl	80076f0 <memchr>
 800768c:	2800      	cmp	r0, #0
 800768e:	d001      	beq.n	8007694 <_printf_i+0x1c8>
 8007690:	1b80      	subs	r0, r0, r6
 8007692:	6060      	str	r0, [r4, #4]
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	2300      	movs	r3, #0
 800769a:	9a04      	ldr	r2, [sp, #16]
 800769c:	7013      	strb	r3, [r2, #0]
 800769e:	e7bf      	b.n	8007620 <_printf_i+0x154>
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	0032      	movs	r2, r6
 80076a4:	9906      	ldr	r1, [sp, #24]
 80076a6:	9805      	ldr	r0, [sp, #20]
 80076a8:	9d07      	ldr	r5, [sp, #28]
 80076aa:	47a8      	blx	r5
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d0c1      	beq.n	8007634 <_printf_i+0x168>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	079b      	lsls	r3, r3, #30
 80076b4:	d415      	bmi.n	80076e2 <_printf_i+0x216>
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	68e0      	ldr	r0, [r4, #12]
 80076ba:	4298      	cmp	r0, r3
 80076bc:	dabc      	bge.n	8007638 <_printf_i+0x16c>
 80076be:	0018      	movs	r0, r3
 80076c0:	e7ba      	b.n	8007638 <_printf_i+0x16c>
 80076c2:	0022      	movs	r2, r4
 80076c4:	2301      	movs	r3, #1
 80076c6:	9906      	ldr	r1, [sp, #24]
 80076c8:	9805      	ldr	r0, [sp, #20]
 80076ca:	9e07      	ldr	r6, [sp, #28]
 80076cc:	3219      	adds	r2, #25
 80076ce:	47b0      	blx	r6
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d0af      	beq.n	8007634 <_printf_i+0x168>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcf0      	bgt.n	80076c2 <_printf_i+0x1f6>
 80076e0:	e7e9      	b.n	80076b6 <_printf_i+0x1ea>
 80076e2:	2500      	movs	r5, #0
 80076e4:	e7f7      	b.n	80076d6 <_printf_i+0x20a>
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	08007a79 	.word	0x08007a79
 80076ec:	08007a8a 	.word	0x08007a8a

080076f0 <memchr>:
 80076f0:	b2c9      	uxtb	r1, r1
 80076f2:	1882      	adds	r2, r0, r2
 80076f4:	4290      	cmp	r0, r2
 80076f6:	d101      	bne.n	80076fc <memchr+0xc>
 80076f8:	2000      	movs	r0, #0
 80076fa:	4770      	bx	lr
 80076fc:	7803      	ldrb	r3, [r0, #0]
 80076fe:	428b      	cmp	r3, r1
 8007700:	d0fb      	beq.n	80076fa <memchr+0xa>
 8007702:	3001      	adds	r0, #1
 8007704:	e7f6      	b.n	80076f4 <memchr+0x4>

08007706 <memcpy>:
 8007706:	2300      	movs	r3, #0
 8007708:	b510      	push	{r4, lr}
 800770a:	429a      	cmp	r2, r3
 800770c:	d100      	bne.n	8007710 <memcpy+0xa>
 800770e:	bd10      	pop	{r4, pc}
 8007710:	5ccc      	ldrb	r4, [r1, r3]
 8007712:	54c4      	strb	r4, [r0, r3]
 8007714:	3301      	adds	r3, #1
 8007716:	e7f8      	b.n	800770a <memcpy+0x4>

08007718 <memmove>:
 8007718:	b510      	push	{r4, lr}
 800771a:	4288      	cmp	r0, r1
 800771c:	d902      	bls.n	8007724 <memmove+0xc>
 800771e:	188b      	adds	r3, r1, r2
 8007720:	4298      	cmp	r0, r3
 8007722:	d303      	bcc.n	800772c <memmove+0x14>
 8007724:	2300      	movs	r3, #0
 8007726:	e007      	b.n	8007738 <memmove+0x20>
 8007728:	5c8b      	ldrb	r3, [r1, r2]
 800772a:	5483      	strb	r3, [r0, r2]
 800772c:	3a01      	subs	r2, #1
 800772e:	d2fb      	bcs.n	8007728 <memmove+0x10>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	5ccc      	ldrb	r4, [r1, r3]
 8007734:	54c4      	strb	r4, [r0, r3]
 8007736:	3301      	adds	r3, #1
 8007738:	429a      	cmp	r2, r3
 800773a:	d1fa      	bne.n	8007732 <memmove+0x1a>
 800773c:	e7f8      	b.n	8007730 <memmove+0x18>
	...

08007740 <_free_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	0005      	movs	r5, r0
 8007744:	2900      	cmp	r1, #0
 8007746:	d010      	beq.n	800776a <_free_r+0x2a>
 8007748:	1f0c      	subs	r4, r1, #4
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	da00      	bge.n	8007752 <_free_r+0x12>
 8007750:	18e4      	adds	r4, r4, r3
 8007752:	0028      	movs	r0, r5
 8007754:	f000 f8d4 	bl	8007900 <__malloc_lock>
 8007758:	4a1d      	ldr	r2, [pc, #116]	; (80077d0 <_free_r+0x90>)
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <_free_r+0x2c>
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	6014      	str	r4, [r2, #0]
 8007764:	0028      	movs	r0, r5
 8007766:	f000 f8d3 	bl	8007910 <__malloc_unlock>
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	42a3      	cmp	r3, r4
 800776e:	d908      	bls.n	8007782 <_free_r+0x42>
 8007770:	6821      	ldr	r1, [r4, #0]
 8007772:	1860      	adds	r0, r4, r1
 8007774:	4283      	cmp	r3, r0
 8007776:	d1f3      	bne.n	8007760 <_free_r+0x20>
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	1841      	adds	r1, r0, r1
 800777e:	6021      	str	r1, [r4, #0]
 8007780:	e7ee      	b.n	8007760 <_free_r+0x20>
 8007782:	001a      	movs	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <_free_r+0x4e>
 800778a:	42a3      	cmp	r3, r4
 800778c:	d9f9      	bls.n	8007782 <_free_r+0x42>
 800778e:	6811      	ldr	r1, [r2, #0]
 8007790:	1850      	adds	r0, r2, r1
 8007792:	42a0      	cmp	r0, r4
 8007794:	d10b      	bne.n	80077ae <_free_r+0x6e>
 8007796:	6820      	ldr	r0, [r4, #0]
 8007798:	1809      	adds	r1, r1, r0
 800779a:	1850      	adds	r0, r2, r1
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	4283      	cmp	r3, r0
 80077a0:	d1e0      	bne.n	8007764 <_free_r+0x24>
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	1841      	adds	r1, r0, r1
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	6053      	str	r3, [r2, #4]
 80077ac:	e7da      	b.n	8007764 <_free_r+0x24>
 80077ae:	42a0      	cmp	r0, r4
 80077b0:	d902      	bls.n	80077b8 <_free_r+0x78>
 80077b2:	230c      	movs	r3, #12
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	e7d5      	b.n	8007764 <_free_r+0x24>
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	1860      	adds	r0, r4, r1
 80077bc:	4283      	cmp	r3, r0
 80077be:	d103      	bne.n	80077c8 <_free_r+0x88>
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	1841      	adds	r1, r0, r1
 80077c6:	6021      	str	r1, [r4, #0]
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6054      	str	r4, [r2, #4]
 80077cc:	e7ca      	b.n	8007764 <_free_r+0x24>
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	20000168 	.word	0x20000168

080077d4 <_malloc_r>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	2303      	movs	r3, #3
 80077d8:	1ccd      	adds	r5, r1, #3
 80077da:	439d      	bics	r5, r3
 80077dc:	3508      	adds	r5, #8
 80077de:	0006      	movs	r6, r0
 80077e0:	2d0c      	cmp	r5, #12
 80077e2:	d21f      	bcs.n	8007824 <_malloc_r+0x50>
 80077e4:	250c      	movs	r5, #12
 80077e6:	42a9      	cmp	r1, r5
 80077e8:	d81e      	bhi.n	8007828 <_malloc_r+0x54>
 80077ea:	0030      	movs	r0, r6
 80077ec:	f000 f888 	bl	8007900 <__malloc_lock>
 80077f0:	4925      	ldr	r1, [pc, #148]	; (8007888 <_malloc_r+0xb4>)
 80077f2:	680a      	ldr	r2, [r1, #0]
 80077f4:	0014      	movs	r4, r2
 80077f6:	2c00      	cmp	r4, #0
 80077f8:	d11a      	bne.n	8007830 <_malloc_r+0x5c>
 80077fa:	4f24      	ldr	r7, [pc, #144]	; (800788c <_malloc_r+0xb8>)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <_malloc_r+0x38>
 8007802:	0021      	movs	r1, r4
 8007804:	0030      	movs	r0, r6
 8007806:	f000 f869 	bl	80078dc <_sbrk_r>
 800780a:	6038      	str	r0, [r7, #0]
 800780c:	0029      	movs	r1, r5
 800780e:	0030      	movs	r0, r6
 8007810:	f000 f864 	bl	80078dc <_sbrk_r>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d12b      	bne.n	8007870 <_malloc_r+0x9c>
 8007818:	230c      	movs	r3, #12
 800781a:	0030      	movs	r0, r6
 800781c:	6033      	str	r3, [r6, #0]
 800781e:	f000 f877 	bl	8007910 <__malloc_unlock>
 8007822:	e003      	b.n	800782c <_malloc_r+0x58>
 8007824:	2d00      	cmp	r5, #0
 8007826:	dade      	bge.n	80077e6 <_malloc_r+0x12>
 8007828:	230c      	movs	r3, #12
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	2000      	movs	r0, #0
 800782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	1b5b      	subs	r3, r3, r5
 8007834:	d419      	bmi.n	800786a <_malloc_r+0x96>
 8007836:	2b0b      	cmp	r3, #11
 8007838:	d903      	bls.n	8007842 <_malloc_r+0x6e>
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	18e4      	adds	r4, r4, r3
 800783e:	6025      	str	r5, [r4, #0]
 8007840:	e003      	b.n	800784a <_malloc_r+0x76>
 8007842:	6863      	ldr	r3, [r4, #4]
 8007844:	42a2      	cmp	r2, r4
 8007846:	d10e      	bne.n	8007866 <_malloc_r+0x92>
 8007848:	600b      	str	r3, [r1, #0]
 800784a:	0030      	movs	r0, r6
 800784c:	f000 f860 	bl	8007910 <__malloc_unlock>
 8007850:	0020      	movs	r0, r4
 8007852:	2207      	movs	r2, #7
 8007854:	300b      	adds	r0, #11
 8007856:	1d23      	adds	r3, r4, #4
 8007858:	4390      	bics	r0, r2
 800785a:	1ac2      	subs	r2, r0, r3
 800785c:	4298      	cmp	r0, r3
 800785e:	d0e6      	beq.n	800782e <_malloc_r+0x5a>
 8007860:	1a1b      	subs	r3, r3, r0
 8007862:	50a3      	str	r3, [r4, r2]
 8007864:	e7e3      	b.n	800782e <_malloc_r+0x5a>
 8007866:	6053      	str	r3, [r2, #4]
 8007868:	e7ef      	b.n	800784a <_malloc_r+0x76>
 800786a:	0022      	movs	r2, r4
 800786c:	6864      	ldr	r4, [r4, #4]
 800786e:	e7c2      	b.n	80077f6 <_malloc_r+0x22>
 8007870:	2303      	movs	r3, #3
 8007872:	1cc4      	adds	r4, r0, #3
 8007874:	439c      	bics	r4, r3
 8007876:	42a0      	cmp	r0, r4
 8007878:	d0e1      	beq.n	800783e <_malloc_r+0x6a>
 800787a:	1a21      	subs	r1, r4, r0
 800787c:	0030      	movs	r0, r6
 800787e:	f000 f82d 	bl	80078dc <_sbrk_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d1db      	bne.n	800783e <_malloc_r+0x6a>
 8007886:	e7c7      	b.n	8007818 <_malloc_r+0x44>
 8007888:	20000168 	.word	0x20000168
 800788c:	2000016c 	.word	0x2000016c

08007890 <_realloc_r>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	0007      	movs	r7, r0
 8007894:	000d      	movs	r5, r1
 8007896:	0016      	movs	r6, r2
 8007898:	2900      	cmp	r1, #0
 800789a:	d105      	bne.n	80078a8 <_realloc_r+0x18>
 800789c:	0011      	movs	r1, r2
 800789e:	f7ff ff99 	bl	80077d4 <_malloc_r>
 80078a2:	0004      	movs	r4, r0
 80078a4:	0020      	movs	r0, r4
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d103      	bne.n	80078b4 <_realloc_r+0x24>
 80078ac:	f7ff ff48 	bl	8007740 <_free_r>
 80078b0:	0034      	movs	r4, r6
 80078b2:	e7f7      	b.n	80078a4 <_realloc_r+0x14>
 80078b4:	f000 f834 	bl	8007920 <_malloc_usable_size_r>
 80078b8:	002c      	movs	r4, r5
 80078ba:	42b0      	cmp	r0, r6
 80078bc:	d2f2      	bcs.n	80078a4 <_realloc_r+0x14>
 80078be:	0031      	movs	r1, r6
 80078c0:	0038      	movs	r0, r7
 80078c2:	f7ff ff87 	bl	80077d4 <_malloc_r>
 80078c6:	1e04      	subs	r4, r0, #0
 80078c8:	d0ec      	beq.n	80078a4 <_realloc_r+0x14>
 80078ca:	0029      	movs	r1, r5
 80078cc:	0032      	movs	r2, r6
 80078ce:	f7ff ff1a 	bl	8007706 <memcpy>
 80078d2:	0029      	movs	r1, r5
 80078d4:	0038      	movs	r0, r7
 80078d6:	f7ff ff33 	bl	8007740 <_free_r>
 80078da:	e7e3      	b.n	80078a4 <_realloc_r+0x14>

080078dc <_sbrk_r>:
 80078dc:	2300      	movs	r3, #0
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_sbrk_r+0x20>)
 80078e2:	0004      	movs	r4, r0
 80078e4:	0008      	movs	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7fb fa20 	bl	8002d2c <_sbrk>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d103      	bne.n	80078f8 <_sbrk_r+0x1c>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d000      	beq.n	80078f8 <_sbrk_r+0x1c>
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	20000444 	.word	0x20000444

08007900 <__malloc_lock>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4802      	ldr	r0, [pc, #8]	; (800790c <__malloc_lock+0xc>)
 8007904:	f000 f814 	bl	8007930 <__retarget_lock_acquire_recursive>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	2000044c 	.word	0x2000044c

08007910 <__malloc_unlock>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4802      	ldr	r0, [pc, #8]	; (800791c <__malloc_unlock+0xc>)
 8007914:	f000 f80d 	bl	8007932 <__retarget_lock_release_recursive>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	2000044c 	.word	0x2000044c

08007920 <_malloc_usable_size_r>:
 8007920:	1f0b      	subs	r3, r1, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	1f18      	subs	r0, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	da01      	bge.n	800792e <_malloc_usable_size_r+0xe>
 800792a:	580b      	ldr	r3, [r1, r0]
 800792c:	18c0      	adds	r0, r0, r3
 800792e:	4770      	bx	lr

08007930 <__retarget_lock_acquire_recursive>:
 8007930:	4770      	bx	lr

08007932 <__retarget_lock_release_recursive>:
 8007932:	4770      	bx	lr

08007934 <_init>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr

08007940 <_fini>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr
