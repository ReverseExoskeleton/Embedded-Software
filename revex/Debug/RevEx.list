
RevEx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ac  080054ac  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b4  080054b4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080054bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200000d0  0800558c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  0800558c  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001782a  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdc  00000000  00000000  00037922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0003a900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001514b  00000000  00000000  0003cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001679f  00000000  00000000  00051d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ccd5  00000000  00000000  000684d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e51a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000e51fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005424 	.word	0x08005424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	08005424 	.word	0x08005424

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 fada 	bl	8000a5c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 fad5 	bl	8000a5c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fadd>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	4646      	mov	r6, r8
 8000620:	46d6      	mov	lr, sl
 8000622:	464f      	mov	r7, r9
 8000624:	024d      	lsls	r5, r1, #9
 8000626:	0242      	lsls	r2, r0, #9
 8000628:	b5c0      	push	{r6, r7, lr}
 800062a:	0a52      	lsrs	r2, r2, #9
 800062c:	0a6e      	lsrs	r6, r5, #9
 800062e:	0047      	lsls	r7, r0, #1
 8000630:	46b0      	mov	r8, r6
 8000632:	0e3f      	lsrs	r7, r7, #24
 8000634:	004e      	lsls	r6, r1, #1
 8000636:	0fc4      	lsrs	r4, r0, #31
 8000638:	00d0      	lsls	r0, r2, #3
 800063a:	4694      	mov	ip, r2
 800063c:	003b      	movs	r3, r7
 800063e:	4682      	mov	sl, r0
 8000640:	0e36      	lsrs	r6, r6, #24
 8000642:	0fc9      	lsrs	r1, r1, #31
 8000644:	09ad      	lsrs	r5, r5, #6
 8000646:	428c      	cmp	r4, r1
 8000648:	d06d      	beq.n	8000726 <__aeabi_fadd+0x10a>
 800064a:	1bb8      	subs	r0, r7, r6
 800064c:	4681      	mov	r9, r0
 800064e:	2800      	cmp	r0, #0
 8000650:	dd4d      	ble.n	80006ee <__aeabi_fadd+0xd2>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x3c>
 8000656:	e088      	b.n	800076a <__aeabi_fadd+0x14e>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d05a      	beq.n	8000712 <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	464b      	mov	r3, r9
 8000664:	2201      	movs	r2, #1
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dc0a      	bgt.n	8000680 <__aeabi_fadd+0x64>
 800066a:	002b      	movs	r3, r5
 800066c:	464a      	mov	r2, r9
 800066e:	4649      	mov	r1, r9
 8000670:	40d3      	lsrs	r3, r2
 8000672:	2220      	movs	r2, #32
 8000674:	1a52      	subs	r2, r2, r1
 8000676:	4095      	lsls	r5, r2
 8000678:	002a      	movs	r2, r5
 800067a:	1e55      	subs	r5, r2, #1
 800067c:	41aa      	sbcs	r2, r5
 800067e:	431a      	orrs	r2, r3
 8000680:	4653      	mov	r3, sl
 8000682:	1a9a      	subs	r2, r3, r2
 8000684:	0153      	lsls	r3, r2, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x6e>
 8000688:	e0b9      	b.n	80007fe <__aeabi_fadd+0x1e2>
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	0996      	lsrs	r6, r2, #6
 800068e:	0030      	movs	r0, r6
 8000690:	f000 f9c6 	bl	8000a20 <__clzsi2>
 8000694:	3805      	subs	r0, #5
 8000696:	4086      	lsls	r6, r0
 8000698:	4287      	cmp	r7, r0
 800069a:	dd00      	ble.n	800069e <__aeabi_fadd+0x82>
 800069c:	e0d4      	b.n	8000848 <__aeabi_fadd+0x22c>
 800069e:	0033      	movs	r3, r6
 80006a0:	1bc7      	subs	r7, r0, r7
 80006a2:	2020      	movs	r0, #32
 80006a4:	3701      	adds	r7, #1
 80006a6:	40fb      	lsrs	r3, r7
 80006a8:	1bc7      	subs	r7, r0, r7
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1e56      	subs	r6, r2, #1
 80006b0:	41b2      	sbcs	r2, r6
 80006b2:	2700      	movs	r7, #0
 80006b4:	431a      	orrs	r2, r3
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fadd+0xa8>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0xae>
 80006c8:	e09c      	b.n	8000804 <__aeabi_fadd+0x1e8>
 80006ca:	1c7b      	adds	r3, r7, #1
 80006cc:	2ffe      	cmp	r7, #254	; 0xfe
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0xb6>
 80006d0:	e09a      	b.n	8000808 <__aeabi_fadd+0x1ec>
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	0a52      	lsrs	r2, r2, #9
 80006d6:	4694      	mov	ip, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	05d8      	lsls	r0, r3, #23
 80006dc:	4663      	mov	r3, ip
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4320      	orrs	r0, r4
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d049      	beq.n	8000786 <__aeabi_fadd+0x16a>
 80006f2:	1bf3      	subs	r3, r6, r7
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xde>
 80006f8:	e0b6      	b.n	8000868 <__aeabi_fadd+0x24c>
 80006fa:	4652      	mov	r2, sl
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d060      	beq.n	80007c2 <__aeabi_fadd+0x1a6>
 8000700:	3b01      	subs	r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0xec>
 8000706:	e0fc      	b.n	8000902 <__aeabi_fadd+0x2e6>
 8000708:	2eff      	cmp	r6, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xf2>
 800070c:	e0b4      	b.n	8000878 <__aeabi_fadd+0x25c>
 800070e:	000c      	movs	r4, r1
 8000710:	4642      	mov	r2, r8
 8000712:	2a00      	cmp	r2, #0
 8000714:	d078      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 8000716:	2080      	movs	r0, #128	; 0x80
 8000718:	03c0      	lsls	r0, r0, #15
 800071a:	4310      	orrs	r0, r2
 800071c:	0242      	lsls	r2, r0, #9
 800071e:	0a53      	lsrs	r3, r2, #9
 8000720:	469c      	mov	ip, r3
 8000722:	23ff      	movs	r3, #255	; 0xff
 8000724:	e7d9      	b.n	80006da <__aeabi_fadd+0xbe>
 8000726:	1bb9      	subs	r1, r7, r6
 8000728:	2900      	cmp	r1, #0
 800072a:	dd71      	ble.n	8000810 <__aeabi_fadd+0x1f4>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d03f      	beq.n	80007b0 <__aeabi_fadd+0x194>
 8000730:	2fff      	cmp	r7, #255	; 0xff
 8000732:	d0ee      	beq.n	8000712 <__aeabi_fadd+0xf6>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431d      	orrs	r5, r3
 800073a:	2201      	movs	r2, #1
 800073c:	291b      	cmp	r1, #27
 800073e:	dc07      	bgt.n	8000750 <__aeabi_fadd+0x134>
 8000740:	002a      	movs	r2, r5
 8000742:	2320      	movs	r3, #32
 8000744:	40ca      	lsrs	r2, r1
 8000746:	1a59      	subs	r1, r3, r1
 8000748:	408d      	lsls	r5, r1
 800074a:	1e6b      	subs	r3, r5, #1
 800074c:	419d      	sbcs	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	4452      	add	r2, sl
 8000752:	0153      	lsls	r3, r2, #5
 8000754:	d553      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 8000756:	3701      	adds	r7, #1
 8000758:	2fff      	cmp	r7, #255	; 0xff
 800075a:	d055      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 800075c:	2301      	movs	r3, #1
 800075e:	497b      	ldr	r1, [pc, #492]	; (800094c <__aeabi_fadd+0x330>)
 8000760:	4013      	ands	r3, r2
 8000762:	0852      	lsrs	r2, r2, #1
 8000764:	400a      	ands	r2, r1
 8000766:	431a      	orrs	r2, r3
 8000768:	e7a5      	b.n	80006b6 <__aeabi_fadd+0x9a>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d02c      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	469c      	mov	ip, r3
 8000774:	44e1      	add	r9, ip
 8000776:	464b      	mov	r3, r9
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x162>
 800077c:	e0ad      	b.n	80008da <__aeabi_fadd+0x2be>
 800077e:	2fff      	cmp	r7, #255	; 0xff
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x168>
 8000782:	e76e      	b.n	8000662 <__aeabi_fadd+0x46>
 8000784:	e7c5      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000786:	20fe      	movs	r0, #254	; 0xfe
 8000788:	1c7e      	adds	r6, r7, #1
 800078a:	4230      	tst	r0, r6
 800078c:	d160      	bne.n	8000850 <__aeabi_fadd+0x234>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_fadd+0x178>
 8000792:	e093      	b.n	80008bc <__aeabi_fadd+0x2a0>
 8000794:	4652      	mov	r2, sl
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x180>
 800079a:	e0b6      	b.n	800090a <__aeabi_fadd+0x2ee>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d09c      	beq.n	80006da <__aeabi_fadd+0xbe>
 80007a0:	1b52      	subs	r2, r2, r5
 80007a2:	0150      	lsls	r0, r2, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x18c>
 80007a6:	e0c3      	b.n	8000930 <__aeabi_fadd+0x314>
 80007a8:	4653      	mov	r3, sl
 80007aa:	000c      	movs	r4, r1
 80007ac:	1aea      	subs	r2, r5, r3
 80007ae:	e782      	b.n	80006b6 <__aeabi_fadd+0x9a>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d009      	beq.n	80007c8 <__aeabi_fadd+0x1ac>
 80007b4:	3901      	subs	r1, #1
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x1a0>
 80007ba:	e08b      	b.n	80008d4 <__aeabi_fadd+0x2b8>
 80007bc:	2fff      	cmp	r7, #255	; 0xff
 80007be:	d1bc      	bne.n	800073a <__aeabi_fadd+0x11e>
 80007c0:	e7a7      	b.n	8000712 <__aeabi_fadd+0xf6>
 80007c2:	000c      	movs	r4, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	0037      	movs	r7, r6
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d0a2      	beq.n	8000712 <__aeabi_fadd+0xf6>
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	0a53      	lsrs	r3, r2, #9
 80007d0:	469c      	mov	ip, r3
 80007d2:	b2fb      	uxtb	r3, r7
 80007d4:	e781      	b.n	80006da <__aeabi_fadd+0xbe>
 80007d6:	21fe      	movs	r1, #254	; 0xfe
 80007d8:	3701      	adds	r7, #1
 80007da:	4239      	tst	r1, r7
 80007dc:	d165      	bne.n	80008aa <__aeabi_fadd+0x28e>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d17e      	bne.n	80008e0 <__aeabi_fadd+0x2c4>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x1cc>
 80007e6:	e0aa      	b.n	800093e <__aeabi_fadd+0x322>
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x1d2>
 80007ec:	e775      	b.n	80006da <__aeabi_fadd+0xbe>
 80007ee:	002a      	movs	r2, r5
 80007f0:	4452      	add	r2, sl
 80007f2:	2700      	movs	r7, #0
 80007f4:	0153      	lsls	r3, r2, #5
 80007f6:	d502      	bpl.n	80007fe <__aeabi_fadd+0x1e2>
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <__aeabi_fadd+0x334>)
 80007fa:	3701      	adds	r7, #1
 80007fc:	401a      	ands	r2, r3
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x1e8>
 8000802:	e75a      	b.n	80006ba <__aeabi_fadd+0x9e>
 8000804:	08d2      	lsrs	r2, r2, #3
 8000806:	e7df      	b.n	80007c8 <__aeabi_fadd+0x1ac>
 8000808:	2200      	movs	r2, #0
 800080a:	23ff      	movs	r3, #255	; 0xff
 800080c:	4694      	mov	ip, r2
 800080e:	e764      	b.n	80006da <__aeabi_fadd+0xbe>
 8000810:	2900      	cmp	r1, #0
 8000812:	d0e0      	beq.n	80007d6 <__aeabi_fadd+0x1ba>
 8000814:	1bf3      	subs	r3, r6, r7
 8000816:	2f00      	cmp	r7, #0
 8000818:	d03e      	beq.n	8000898 <__aeabi_fadd+0x27c>
 800081a:	2eff      	cmp	r6, #255	; 0xff
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x204>
 800081e:	e777      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0001      	movs	r1, r0
 8000824:	04d2      	lsls	r2, r2, #19
 8000826:	4311      	orrs	r1, r2
 8000828:	468a      	mov	sl, r1
 800082a:	2201      	movs	r2, #1
 800082c:	2b1b      	cmp	r3, #27
 800082e:	dc08      	bgt.n	8000842 <__aeabi_fadd+0x226>
 8000830:	4652      	mov	r2, sl
 8000832:	2120      	movs	r1, #32
 8000834:	4650      	mov	r0, sl
 8000836:	40da      	lsrs	r2, r3
 8000838:	1acb      	subs	r3, r1, r3
 800083a:	4098      	lsls	r0, r3
 800083c:	1e43      	subs	r3, r0, #1
 800083e:	4198      	sbcs	r0, r3
 8000840:	4302      	orrs	r2, r0
 8000842:	0037      	movs	r7, r6
 8000844:	1952      	adds	r2, r2, r5
 8000846:	e784      	b.n	8000752 <__aeabi_fadd+0x136>
 8000848:	4a41      	ldr	r2, [pc, #260]	; (8000950 <__aeabi_fadd+0x334>)
 800084a:	1a3f      	subs	r7, r7, r0
 800084c:	4032      	ands	r2, r6
 800084e:	e732      	b.n	80006b6 <__aeabi_fadd+0x9a>
 8000850:	4653      	mov	r3, sl
 8000852:	1b5e      	subs	r6, r3, r5
 8000854:	0173      	lsls	r3, r6, #5
 8000856:	d42d      	bmi.n	80008b4 <__aeabi_fadd+0x298>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x242>
 800085c:	e717      	b.n	800068e <__aeabi_fadd+0x72>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	2300      	movs	r3, #0
 8000864:	4694      	mov	ip, r2
 8000866:	e738      	b.n	80006da <__aeabi_fadd+0xbe>
 8000868:	2eff      	cmp	r6, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fadd+0x252>
 800086c:	e74f      	b.n	800070e <__aeabi_fadd+0xf2>
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	4650      	mov	r0, sl
 8000872:	04d2      	lsls	r2, r2, #19
 8000874:	4310      	orrs	r0, r2
 8000876:	4682      	mov	sl, r0
 8000878:	2201      	movs	r2, #1
 800087a:	2b1b      	cmp	r3, #27
 800087c:	dc08      	bgt.n	8000890 <__aeabi_fadd+0x274>
 800087e:	4652      	mov	r2, sl
 8000880:	2420      	movs	r4, #32
 8000882:	4650      	mov	r0, sl
 8000884:	40da      	lsrs	r2, r3
 8000886:	1ae3      	subs	r3, r4, r3
 8000888:	4098      	lsls	r0, r3
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4198      	sbcs	r0, r3
 800088e:	4302      	orrs	r2, r0
 8000890:	000c      	movs	r4, r1
 8000892:	0037      	movs	r7, r6
 8000894:	1aaa      	subs	r2, r5, r2
 8000896:	e6f5      	b.n	8000684 <__aeabi_fadd+0x68>
 8000898:	2800      	cmp	r0, #0
 800089a:	d093      	beq.n	80007c4 <__aeabi_fadd+0x1a8>
 800089c:	3b01      	subs	r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d04f      	beq.n	8000942 <__aeabi_fadd+0x326>
 80008a2:	2eff      	cmp	r6, #255	; 0xff
 80008a4:	d1c1      	bne.n	800082a <__aeabi_fadd+0x20e>
 80008a6:	4642      	mov	r2, r8
 80008a8:	e733      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d0ac      	beq.n	8000808 <__aeabi_fadd+0x1ec>
 80008ae:	4455      	add	r5, sl
 80008b0:	086a      	lsrs	r2, r5, #1
 80008b2:	e7a4      	b.n	80007fe <__aeabi_fadd+0x1e2>
 80008b4:	4653      	mov	r3, sl
 80008b6:	000c      	movs	r4, r1
 80008b8:	1aee      	subs	r6, r5, r3
 80008ba:	e6e8      	b.n	800068e <__aeabi_fadd+0x72>
 80008bc:	4653      	mov	r3, sl
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d128      	bne.n	8000914 <__aeabi_fadd+0x2f8>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x2ac>
 80008c6:	e722      	b.n	800070e <__aeabi_fadd+0xf2>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	469c      	mov	ip, r3
 80008ce:	2400      	movs	r4, #0
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	e702      	b.n	80006da <__aeabi_fadd+0xbe>
 80008d4:	002a      	movs	r2, r5
 80008d6:	4452      	add	r2, sl
 80008d8:	e73b      	b.n	8000752 <__aeabi_fadd+0x136>
 80008da:	4653      	mov	r3, sl
 80008dc:	1b5a      	subs	r2, r3, r5
 80008de:	e6d1      	b.n	8000684 <__aeabi_fadd+0x68>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x2ca>
 80008e4:	e714      	b.n	8000710 <__aeabi_fadd+0xf4>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2d0>
 80008ea:	e712      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	03db      	lsls	r3, r3, #15
 80008f0:	421a      	tst	r2, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2da>
 80008f4:	e70d      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008f6:	4641      	mov	r1, r8
 80008f8:	4219      	tst	r1, r3
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x2e2>
 80008fc:	e709      	b.n	8000712 <__aeabi_fadd+0xf6>
 80008fe:	4642      	mov	r2, r8
 8000900:	e707      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000902:	000c      	movs	r4, r1
 8000904:	0037      	movs	r7, r6
 8000906:	1aaa      	subs	r2, r5, r2
 8000908:	e6bc      	b.n	8000684 <__aeabi_fadd+0x68>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d013      	beq.n	8000936 <__aeabi_fadd+0x31a>
 800090e:	000c      	movs	r4, r1
 8000910:	46c4      	mov	ip, r8
 8000912:	e6e2      	b.n	80006da <__aeabi_fadd+0xbe>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x2fe>
 8000918:	e6fb      	b.n	8000712 <__aeabi_fadd+0xf6>
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	03db      	lsls	r3, r3, #15
 800091e:	421a      	tst	r2, r3
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x308>
 8000922:	e6f6      	b.n	8000712 <__aeabi_fadd+0xf6>
 8000924:	4640      	mov	r0, r8
 8000926:	4218      	tst	r0, r3
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x310>
 800092a:	e6f2      	b.n	8000712 <__aeabi_fadd+0xf6>
 800092c:	000c      	movs	r4, r1
 800092e:	e6ef      	b.n	8000710 <__aeabi_fadd+0xf4>
 8000930:	2a00      	cmp	r2, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x31a>
 8000934:	e763      	b.n	80007fe <__aeabi_fadd+0x1e2>
 8000936:	2200      	movs	r2, #0
 8000938:	2400      	movs	r4, #0
 800093a:	4694      	mov	ip, r2
 800093c:	e6cd      	b.n	80006da <__aeabi_fadd+0xbe>
 800093e:	46c4      	mov	ip, r8
 8000940:	e6cb      	b.n	80006da <__aeabi_fadd+0xbe>
 8000942:	002a      	movs	r2, r5
 8000944:	0037      	movs	r7, r6
 8000946:	4452      	add	r2, sl
 8000948:	e703      	b.n	8000752 <__aeabi_fadd+0x136>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	7dffffff 	.word	0x7dffffff
 8000950:	fbffffff 	.word	0xfbffffff

08000954 <__aeabi_f2iz>:
 8000954:	0241      	lsls	r1, r0, #9
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0fc3      	lsrs	r3, r0, #31
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	2000      	movs	r0, #0
 800095e:	0e12      	lsrs	r2, r2, #24
 8000960:	2a7e      	cmp	r2, #126	; 0x7e
 8000962:	d903      	bls.n	800096c <__aeabi_f2iz+0x18>
 8000964:	2a9d      	cmp	r2, #157	; 0x9d
 8000966:	d902      	bls.n	800096e <__aeabi_f2iz+0x1a>
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <__aeabi_f2iz+0x3c>)
 800096a:	1898      	adds	r0, r3, r2
 800096c:	4770      	bx	lr
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	0400      	lsls	r0, r0, #16
 8000972:	4301      	orrs	r1, r0
 8000974:	2a95      	cmp	r2, #149	; 0x95
 8000976:	dc07      	bgt.n	8000988 <__aeabi_f2iz+0x34>
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	40d1      	lsrs	r1, r2
 800097e:	4248      	negs	r0, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <__aeabi_f2iz+0x18>
 8000984:	0008      	movs	r0, r1
 8000986:	e7f1      	b.n	800096c <__aeabi_f2iz+0x18>
 8000988:	3a96      	subs	r2, #150	; 0x96
 800098a:	4091      	lsls	r1, r2
 800098c:	e7f7      	b.n	800097e <__aeabi_f2iz+0x2a>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	7fffffff 	.word	0x7fffffff

08000994 <__aeabi_i2f>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2800      	cmp	r0, #0
 8000998:	d013      	beq.n	80009c2 <__aeabi_i2f+0x2e>
 800099a:	17c3      	asrs	r3, r0, #31
 800099c:	18c5      	adds	r5, r0, r3
 800099e:	405d      	eors	r5, r3
 80009a0:	0fc4      	lsrs	r4, r0, #31
 80009a2:	0028      	movs	r0, r5
 80009a4:	f000 f83c 	bl	8000a20 <__clzsi2>
 80009a8:	239e      	movs	r3, #158	; 0x9e
 80009aa:	0001      	movs	r1, r0
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2b96      	cmp	r3, #150	; 0x96
 80009b0:	dc0f      	bgt.n	80009d2 <__aeabi_i2f+0x3e>
 80009b2:	2808      	cmp	r0, #8
 80009b4:	dd01      	ble.n	80009ba <__aeabi_i2f+0x26>
 80009b6:	3908      	subs	r1, #8
 80009b8:	408d      	lsls	r5, r1
 80009ba:	026d      	lsls	r5, r5, #9
 80009bc:	0a6d      	lsrs	r5, r5, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e002      	b.n	80009c8 <__aeabi_i2f+0x34>
 80009c2:	2400      	movs	r4, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	2500      	movs	r5, #0
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4328      	orrs	r0, r5
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
 80009d2:	2b99      	cmp	r3, #153	; 0x99
 80009d4:	dd0b      	ble.n	80009ee <__aeabi_i2f+0x5a>
 80009d6:	2205      	movs	r2, #5
 80009d8:	002e      	movs	r6, r5
 80009da:	1a12      	subs	r2, r2, r0
 80009dc:	40d6      	lsrs	r6, r2
 80009de:	0002      	movs	r2, r0
 80009e0:	321b      	adds	r2, #27
 80009e2:	4095      	lsls	r5, r2
 80009e4:	0028      	movs	r0, r5
 80009e6:	1e45      	subs	r5, r0, #1
 80009e8:	41a8      	sbcs	r0, r5
 80009ea:	0035      	movs	r5, r6
 80009ec:	4305      	orrs	r5, r0
 80009ee:	2905      	cmp	r1, #5
 80009f0:	dd01      	ble.n	80009f6 <__aeabi_i2f+0x62>
 80009f2:	1f4a      	subs	r2, r1, #5
 80009f4:	4095      	lsls	r5, r2
 80009f6:	002a      	movs	r2, r5
 80009f8:	4e08      	ldr	r6, [pc, #32]	; (8000a1c <__aeabi_i2f+0x88>)
 80009fa:	4032      	ands	r2, r6
 80009fc:	0768      	lsls	r0, r5, #29
 80009fe:	d009      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a00:	200f      	movs	r0, #15
 8000a02:	4028      	ands	r0, r5
 8000a04:	2804      	cmp	r0, #4
 8000a06:	d005      	beq.n	8000a14 <__aeabi_i2f+0x80>
 8000a08:	3204      	adds	r2, #4
 8000a0a:	0150      	lsls	r0, r2, #5
 8000a0c:	d502      	bpl.n	8000a14 <__aeabi_i2f+0x80>
 8000a0e:	239f      	movs	r3, #159	; 0x9f
 8000a10:	4032      	ands	r2, r6
 8000a12:	1a5b      	subs	r3, r3, r1
 8000a14:	0192      	lsls	r2, r2, #6
 8000a16:	0a55      	lsrs	r5, r2, #9
 8000a18:	b2d8      	uxtb	r0, r3
 8000a1a:	e7d5      	b.n	80009c8 <__aeabi_i2f+0x34>
 8000a1c:	fbffffff 	.word	0xfbffffff

08000a20 <__clzsi2>:
 8000a20:	211c      	movs	r1, #28
 8000a22:	2301      	movs	r3, #1
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d301      	bcc.n	8000a2e <__clzsi2+0xe>
 8000a2a:	0c00      	lsrs	r0, r0, #16
 8000a2c:	3910      	subs	r1, #16
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	4298      	cmp	r0, r3
 8000a32:	d301      	bcc.n	8000a38 <__clzsi2+0x18>
 8000a34:	0a00      	lsrs	r0, r0, #8
 8000a36:	3908      	subs	r1, #8
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d301      	bcc.n	8000a42 <__clzsi2+0x22>
 8000a3e:	0900      	lsrs	r0, r0, #4
 8000a40:	3904      	subs	r1, #4
 8000a42:	a202      	add	r2, pc, #8	; (adr r2, 8000a4c <__clzsi2+0x2c>)
 8000a44:	5c10      	ldrb	r0, [r2, r0]
 8000a46:	1840      	adds	r0, r0, r1
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	02020304 	.word	0x02020304
 8000a50:	01010101 	.word	0x01010101
	...

08000a5c <__clzdi2>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d103      	bne.n	8000a6a <__clzdi2+0xe>
 8000a62:	f7ff ffdd 	bl	8000a20 <__clzsi2>
 8000a66:	3020      	adds	r0, #32
 8000a68:	e002      	b.n	8000a70 <__clzdi2+0x14>
 8000a6a:	1c08      	adds	r0, r1, #0
 8000a6c:	f7ff ffd8 	bl	8000a20 <__clzsi2>
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <BLE_Init>:
char Characteristic[43] = "PC,12345678901234567890123456789011,12,12\r\n";
char cmd[9] = "SHW,0018,";
char ret[2] = "\n\r";

void BLE_Init()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <BLE_Init+0x104>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fbde 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000a80:	493e      	ldr	r1, [pc, #248]	; (8000b7c <BLE_Init+0x108>)
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <BLE_Init+0x10c>)
 8000a84:	230a      	movs	r3, #10
 8000a86:	2205      	movs	r2, #5
 8000a88:	f003 ff7a 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a8c:	23fa      	movs	r3, #250	; 0xfa
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fbd3 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset, 6, 10);
 8000a96:	493b      	ldr	r1, [pc, #236]	; (8000b84 <BLE_Init+0x110>)
 8000a98:	4839      	ldr	r0, [pc, #228]	; (8000b80 <BLE_Init+0x10c>)
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2206      	movs	r2, #6
 8000a9e:	f003 ff6f 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000aa2:	23fa      	movs	r3, #250	; 0xfa
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fbc8 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reset2, 4, 10);
 8000aac:	4936      	ldr	r1, [pc, #216]	; (8000b88 <BLE_Init+0x114>)
 8000aae:	4834      	ldr	r0, [pc, #208]	; (8000b80 <BLE_Init+0x10c>)
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	f003 ff64 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ab8:	23fa      	movs	r3, #250	; 0xfa
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 fbbd 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <BLE_Init+0x108>)
 8000ac4:	482e      	ldr	r0, [pc, #184]	; (8000b80 <BLE_Init+0x10c>)
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	2205      	movs	r2, #5
 8000aca:	f003 ff59 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000ace:	23fa      	movs	r3, #250	; 0xfa
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fbb2 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config2, 13, 10);
 8000ad8:	492c      	ldr	r1, [pc, #176]	; (8000b8c <BLE_Init+0x118>)
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <BLE_Init+0x10c>)
 8000adc:	230a      	movs	r3, #10
 8000ade:	220d      	movs	r2, #13
 8000ae0:	f003 ff4e 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ae4:	23fa      	movs	r3, #250	; 0xfa
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fba7 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)config1, 13, 10);
 8000aee:	4928      	ldr	r1, [pc, #160]	; (8000b90 <BLE_Init+0x11c>)
 8000af0:	4823      	ldr	r0, [pc, #140]	; (8000b80 <BLE_Init+0x10c>)
 8000af2:	230a      	movs	r3, #10
 8000af4:	220d      	movs	r2, #13
 8000af6:	f003 ff43 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fb9c 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)name, 8, 10);
 8000b04:	4923      	ldr	r1, [pc, #140]	; (8000b94 <BLE_Init+0x120>)
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <BLE_Init+0x10c>)
 8000b08:	230a      	movs	r3, #10
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	f003 ff38 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b10:	23fa      	movs	r3, #250	; 0xfa
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fb91 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000b1a:	4918      	ldr	r1, [pc, #96]	; (8000b7c <BLE_Init+0x108>)
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <BLE_Init+0x10c>)
 8000b1e:	230a      	movs	r3, #10
 8000b20:	2205      	movs	r2, #5
 8000b22:	f003 ff2d 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b26:	23fa      	movs	r3, #250	; 0xfa
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 fb86 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Service, 37, 10);
 8000b30:	4919      	ldr	r1, [pc, #100]	; (8000b98 <BLE_Init+0x124>)
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <BLE_Init+0x10c>)
 8000b34:	230a      	movs	r3, #10
 8000b36:	2225      	movs	r2, #37	; 0x25
 8000b38:	f003 ff22 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b3c:	23fa      	movs	r3, #250	; 0xfa
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 fb7b 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)Characteristic, 43, 10);
 8000b46:	4915      	ldr	r1, [pc, #84]	; (8000b9c <BLE_Init+0x128>)
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <BLE_Init+0x10c>)
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	222b      	movs	r2, #43	; 0x2b
 8000b4e:	f003 ff17 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000b52:	23fa      	movs	r3, #250	; 0xfa
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fb70 	bl	800223c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)reboot, 5, 10);
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <BLE_Init+0x108>)
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <BLE_Init+0x10c>)
 8000b60:	230a      	movs	r3, #10
 8000b62:	2205      	movs	r2, #5
 8000b64:	f003 ff0c 	bl	8004980 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b68:	23fa      	movs	r3, #250	; 0xfa
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fb65 	bl	800223c <HAL_Delay>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00001388 	.word	0x00001388
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000224 	.word	0x20000224
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000038 	.word	0x20000038
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000028 	.word	0x20000028
 8000b98:	2000003c 	.word	0x2000003c
 8000b9c:	20000064 	.word	0x20000064

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x40>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_I2C1_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <MX_I2C1_Init+0x7c>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fd7f 	bl	8002724 <HAL_I2C_Init>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2a:	f001 f88d 	bl	8001d48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fe0c 	bl	8002850 <HAL_I2CEx_ConfigAnalogFilter>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f001 f884 	bl	8001d48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_I2C1_Init+0x74>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fe4f 	bl	80028e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c4e:	f001 f87b 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000100 	.word	0x20000100
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	00303d5b 	.word	0x00303d5b

08000c64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	240c      	movs	r4, #12
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 fbcc 	bl	8005414 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_I2C_MspInit+0x7c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d128      	bne.n	8000cd8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2202      	movs	r2, #2
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	22c0      	movs	r2, #192	; 0xc0
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2212      	movs	r2, #18
 8000caa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	0010      	movs	r0, r2
 8000cc6:	f001 fb91 	bl	80023ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0x80>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	0389      	lsls	r1, r1, #14
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b009      	add	sp, #36	; 0x24
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	50000400 	.word	0x50000400

08000cec <icm20948_gyro_read>:

	return true;
}

void icm20948_gyro_read(axises* data)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000cf4:	2206      	movs	r2, #6
 8000cf6:	2133      	movs	r1, #51	; 0x33
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fd7d 	bl	80017f8 <read_multiple_icm20948_reg>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fe3c 	bl	8000994 <__aeabi_i2f>
 8000d1c:	1c02      	adds	r2, r0, #0
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3302      	adds	r3, #2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3303      	adds	r3, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fe2b 	bl	8000994 <__aeabi_i2f>
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3304      	adds	r3, #4
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3305      	adds	r3, #5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fe1a 	bl	8000994 <__aeabi_i2f>
 8000d60:	1c02      	adds	r2, r0, #0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000d78:	2206      	movs	r2, #6
 8000d7a:	212d      	movs	r1, #45	; 0x2d
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 fd3b 	bl	80017f8 <read_multiple_icm20948_reg>
 8000d82:	0003      	movs	r3, r0
 8000d84:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fdfa 	bl	8000994 <__aeabi_i2f>
 8000da0:	1c02      	adds	r2, r0, #0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3303      	adds	r3, #3
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fde9 	bl	8000994 <__aeabi_i2f>
 8000dc2:	1c02      	adds	r2, r0, #0
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3305      	adds	r3, #5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fdd8 	bl	8000994 <__aeabi_i2f>
 8000de4:	1c02      	adds	r2, r0, #0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <icm20948_accel_read+0x94>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1c19      	adds	r1, r3, #0
 8000dec:	1c10      	adds	r0, r2, #0
 8000dee:	f7ff fc15 	bl	800061c <__aeabi_fadd>
 8000df2:	1c03      	adds	r3, r0, #0
 8000df4:	1c1a      	adds	r2, r3, #0
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	609a      	str	r2, [r3, #8]
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200000f0 	.word	0x200000f0

08000e08 <icm20948_who_am_i>:
	return true;
}


bool icm20948_who_am_i()
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000e0e:	1dfc      	adds	r4, r7, #7
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fc90 	bl	8001738 <read_single_icm20948_reg>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2bea      	cmp	r3, #234	; 0xea
 8000e22:	d101      	bne.n	8000e28 <icm20948_who_am_i+0x20>
		return true;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <icm20948_who_am_i+0x22>
	else
		return false;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b003      	add	sp, #12
 8000e30:	bd90      	pop	{r4, r7, pc}

08000e32 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000e32:	b590      	push	{r4, r7, lr}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000e38:	1dfc      	adds	r4, r7, #7
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fd4a 	bl	80018d4 <read_single_ak09916_reg>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d101      	bne.n	8000e50 <ak09916_who_am_i+0x1e>
		return true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <ak09916_who_am_i+0x20>
	else
		return false;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b003      	add	sp, #12
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000e5e:	22c1      	movs	r2, #193	; 0xc1
 8000e60:	2106      	movs	r1, #6
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 fc9a 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000e68:	2064      	movs	r0, #100	; 0x64
 8000e6a:	f001 f9e7 	bl	800223c <HAL_Delay>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f000 fd4e 	bl	800191c <write_single_ak09916_reg>
	HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f001 f9db 	bl	800223c <HAL_Delay>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000e92:	1dfc      	adds	r4, r7, #7
 8000e94:	2106      	movs	r1, #6
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fc4e 	bl	8001738 <read_single_icm20948_reg>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2106      	movs	r1, #6
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fc71 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f001 f9be 	bl	800223c <HAL_Delay>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000ece:	1dfc      	adds	r4, r7, #7
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 fc30 	bl	8001738 <read_single_icm20948_reg>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	2103      	movs	r1, #3
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 fc53 	bl	800179c <write_single_icm20948_reg>
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b003      	add	sp, #12
 8000efc:	bd90      	pop	{r4, r7, pc}

08000efe <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000efe:	b590      	push	{r4, r7, lr}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f04:	1dfc      	adds	r4, r7, #7
 8000f06:	2103      	movs	r1, #3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 fc15 	bl	8001738 <read_single_icm20948_reg>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	1dfa      	adds	r2, r7, #7
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	2102      	movs	r1, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001a      	movs	r2, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 fc38 	bl	800179c <write_single_icm20948_reg>
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b003      	add	sp, #12
 8000f32:	bd90      	pop	{r4, r7, pc}

08000f34 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f3a:	1dfc      	adds	r4, r7, #7
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 fbfa 	bl	8001738 <read_single_icm20948_reg>
 8000f44:	0003      	movs	r3, r0
 8000f46:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	2120      	movs	r1, #32
 8000f50:	430a      	orrs	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fc1d 	bl	800179c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f001 f96a 	bl	800223c <HAL_Delay>
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000f7c:	250f      	movs	r5, #15
 8000f7e:	197c      	adds	r4, r7, r5
 8000f80:	2101      	movs	r1, #1
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	f000 fbd8 	bl	8001738 <read_single_icm20948_reg>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 8000f8c:	0028      	movs	r0, r5
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	1839      	adds	r1, r7, r0
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7809      	ldrb	r1, [r1, #0]
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8000f9c:	183b      	adds	r3, r7, r0
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2030      	movs	r0, #48	; 0x30
 8000fa6:	f000 fbf9 	bl	800179c <write_single_icm20948_reg>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}

08000fb2 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000fb2:	b5b0      	push	{r4, r5, r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	0002      	movs	r2, r0
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000fbe:	250f      	movs	r5, #15
 8000fc0:	197c      	adds	r4, r7, r5
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 fbb7 	bl	8001738 <read_single_icm20948_reg>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8000fce:	0028      	movs	r0, r5
 8000fd0:	183b      	adds	r3, r7, r0
 8000fd2:	1839      	adds	r1, r7, r0
 8000fd4:	1dfa      	adds	r2, r7, #7
 8000fd6:	7809      	ldrb	r1, [r1, #0]
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000fde:	183b      	adds	r3, r7, r0
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	2106      	movs	r1, #6
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fbd8 	bl	800179c <write_single_icm20948_reg>
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}

08000ff4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2109      	movs	r1, #9
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f000 fbcd 	bl	800179c <write_single_icm20948_reg>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001014:	250f      	movs	r5, #15
 8001016:	197c      	adds	r4, r7, r5
 8001018:	2101      	movs	r1, #1
 800101a:	2020      	movs	r0, #32
 800101c:	f000 fb8c 	bl	8001738 <read_single_icm20948_reg>
 8001020:	0003      	movs	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	b25a      	sxtb	r2, r3
 800102c:	197b      	adds	r3, r7, r5
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	197b      	adds	r3, r7, r5
 8001038:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800103a:	197b      	adds	r3, r7, r5
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	2101      	movs	r1, #1
 8001042:	2020      	movs	r0, #32
 8001044:	f000 fbaa 	bl	800179c <write_single_icm20948_reg>
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b004      	add	sp, #16
 800104e:	bdb0      	pop	{r4, r5, r7, pc}

08001050 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800105c:	250f      	movs	r5, #15
 800105e:	197c      	adds	r4, r7, r5
 8001060:	2114      	movs	r1, #20
 8001062:	2020      	movs	r0, #32
 8001064:	f000 fb68 	bl	8001738 <read_single_icm20948_reg>
 8001068:	0003      	movs	r3, r0
 800106a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	b25a      	sxtb	r2, r3
 8001074:	197b      	adds	r3, r7, r5
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b25a      	sxtb	r2, r3
 800107e:	197b      	adds	r3, r7, r5
 8001080:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001082:	197b      	adds	r3, r7, r5
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	2101      	movs	r1, #1
 800108a:	2020      	movs	r0, #32
 800108c:	f000 fb86 	bl	800179c <write_single_icm20948_reg>
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bdb0      	pop	{r4, r5, r7, pc}

08001098 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	2020      	movs	r0, #32
 80010ae:	f000 fb75 	bl	800179c <write_single_icm20948_reg>
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	0002      	movs	r2, r0
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	200f      	movs	r0, #15
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	240e      	movs	r4, #14
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	210f      	movs	r1, #15
 80010e0:	400a      	ands	r2, r1
 80010e2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	2110      	movs	r1, #16
 80010ec:	2020      	movs	r0, #32
 80010ee:	f000 fb55 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	001a      	movs	r2, r3
 80010f8:	2111      	movs	r1, #17
 80010fa:	2020      	movs	r0, #32
 80010fc:	f000 fb4e 	bl	800179c <write_single_icm20948_reg>
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b005      	add	sp, #20
 8001106:	bd90      	pop	{r4, r7, pc}

08001108 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	0019      	movs	r1, r3
 800111a:	2031      	movs	r0, #49	; 0x31
 800111c:	f000 fbfe 	bl	800191c <write_single_ak09916_reg>
	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f001 f88b 	bl	800223c <HAL_Delay>
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b08a      	sub	sp, #40	; 0x28
 8001132:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8001134:	230c      	movs	r3, #12
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	0018      	movs	r0, r3
 800113a:	230c      	movs	r3, #12
 800113c:	001a      	movs	r2, r3
 800113e:	2100      	movs	r1, #0
 8001140:	f004 f968 	bl	8005414 <memset>
	uint8_t gyro_offset[6] = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e041      	b.n	80011d8 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8001154:	2518      	movs	r5, #24
 8001156:	197b      	adds	r3, r7, r5
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fdc7 	bl	8000cec <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800115e:	240c      	movs	r4, #12
 8001160:	193b      	adds	r3, r7, r4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fc15 	bl	8000994 <__aeabi_i2f>
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	197b      	adds	r3, r7, r5
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1c19      	adds	r1, r3, #0
 8001172:	1c10      	adds	r0, r2, #0
 8001174:	f7ff fa52 	bl	800061c <__aeabi_fadd>
 8001178:	1c03      	adds	r3, r0, #0
 800117a:	1c18      	adds	r0, r3, #0
 800117c:	f7ff fbea 	bl	8000954 <__aeabi_f2iz>
 8001180:	0002      	movs	r2, r0
 8001182:	193b      	adds	r3, r7, r4
 8001184:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff fc02 	bl	8000994 <__aeabi_i2f>
 8001190:	1c02      	adds	r2, r0, #0
 8001192:	197b      	adds	r3, r7, r5
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	1c19      	adds	r1, r3, #0
 8001198:	1c10      	adds	r0, r2, #0
 800119a:	f7ff fa3f 	bl	800061c <__aeabi_fadd>
 800119e:	1c03      	adds	r3, r0, #0
 80011a0:	1c18      	adds	r0, r3, #0
 80011a2:	f7ff fbd7 	bl	8000954 <__aeabi_f2iz>
 80011a6:	0002      	movs	r2, r0
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fbef 	bl	8000994 <__aeabi_i2f>
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	197b      	adds	r3, r7, r5
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	1c19      	adds	r1, r3, #0
 80011be:	1c10      	adds	r0, r2, #0
 80011c0:	f7ff fa2c 	bl	800061c <__aeabi_fadd>
 80011c4:	1c03      	adds	r3, r0, #0
 80011c6:	1c18      	adds	r0, r3, #0
 80011c8:	f7ff fbc4 	bl	8000954 <__aeabi_f2iz>
 80011cc:	0002      	movs	r2, r0
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	2b63      	cmp	r3, #99	; 0x63
 80011dc:	ddba      	ble.n	8001154 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 80011de:	240c      	movs	r4, #12
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2164      	movs	r1, #100	; 0x64
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff f818 	bl	800021c <__divsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	001a      	movs	r2, r3
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2164      	movs	r1, #100	; 0x64
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff f80e 	bl	800021c <__divsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	001a      	movs	r2, r3
 8001204:	193b      	adds	r3, r7, r4
 8001206:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8001208:	193b      	adds	r3, r7, r4
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f804 	bl	800021c <__divsi3>
 8001214:	0003      	movs	r3, r0
 8001216:	001a      	movs	r2, r3
 8001218:	193b      	adds	r3, r7, r4
 800121a:	609a      	str	r2, [r3, #8]

	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	425b      	negs	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	da00      	bge.n	8001228 <icm20948_gyro_calibration+0xfa>
 8001226:	3303      	adds	r3, #3
 8001228:	109b      	asrs	r3, r3, #2
 800122a:	121b      	asrs	r3, r3, #8
 800122c:	b2da      	uxtb	r2, r3
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8001232:	230c      	movs	r3, #12
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	425b      	negs	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	da00      	bge.n	8001240 <icm20948_gyro_calibration+0x112>
 800123e:	3303      	adds	r3, #3
 8001240:	109b      	asrs	r3, r3, #2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001248:	230c      	movs	r3, #12
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	425b      	negs	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	da00      	bge.n	8001256 <icm20948_gyro_calibration+0x128>
 8001254:	3303      	adds	r3, #3
 8001256:	109b      	asrs	r3, r3, #2
 8001258:	121b      	asrs	r3, r3, #8
 800125a:	b2da      	uxtb	r2, r3
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001260:	230c      	movs	r3, #12
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	425b      	negs	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	da00      	bge.n	800126e <icm20948_gyro_calibration+0x140>
 800126c:	3303      	adds	r3, #3
 800126e:	109b      	asrs	r3, r3, #2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001276:	230c      	movs	r3, #12
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	425b      	negs	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	da00      	bge.n	8001284 <icm20948_gyro_calibration+0x156>
 8001282:	3303      	adds	r3, #3
 8001284:	109b      	asrs	r3, r3, #2
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	b2da      	uxtb	r2, r3
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800128e:	230c      	movs	r3, #12
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	425b      	negs	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	da00      	bge.n	800129c <icm20948_gyro_calibration+0x16e>
 800129a:	3303      	adds	r3, #3
 800129c:	109b      	asrs	r3, r3, #2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	2306      	movs	r3, #6
 80012a8:	2103      	movs	r1, #3
 80012aa:	2020      	movs	r0, #32
 80012ac:	f000 fade 	bl	800186c <write_multiple_icm20948_reg>
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b00a      	add	sp, #40	; 0x28
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}

080012b8 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80012be:	2318      	movs	r3, #24
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	0018      	movs	r0, r3
 80012c4:	230c      	movs	r3, #12
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f004 f8a3 	bl	8005414 <memset>
	int32_t accel_bias_reg[3] = {0};
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	230c      	movs	r3, #12
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f004 f89b 	bl	8005414 <memset>
	uint8_t accel_offset[6] = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ec:	e041      	b.n	8001372 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 80012ee:	2524      	movs	r5, #36	; 0x24
 80012f0:	197b      	adds	r3, r7, r5
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff fd3c 	bl	8000d70 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80012f8:	2418      	movs	r4, #24
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fb48 	bl	8000994 <__aeabi_i2f>
 8001304:	1c02      	adds	r2, r0, #0
 8001306:	197b      	adds	r3, r7, r5
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1c19      	adds	r1, r3, #0
 800130c:	1c10      	adds	r0, r2, #0
 800130e:	f7ff f985 	bl	800061c <__aeabi_fadd>
 8001312:	1c03      	adds	r3, r0, #0
 8001314:	1c18      	adds	r0, r3, #0
 8001316:	f7ff fb1d 	bl	8000954 <__aeabi_f2iz>
 800131a:	0002      	movs	r2, r0
 800131c:	193b      	adds	r3, r7, r4
 800131e:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fb35 	bl	8000994 <__aeabi_i2f>
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	197b      	adds	r3, r7, r5
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	1c19      	adds	r1, r3, #0
 8001332:	1c10      	adds	r0, r2, #0
 8001334:	f7ff f972 	bl	800061c <__aeabi_fadd>
 8001338:	1c03      	adds	r3, r0, #0
 800133a:	1c18      	adds	r0, r3, #0
 800133c:	f7ff fb0a 	bl	8000954 <__aeabi_f2iz>
 8001340:	0002      	movs	r2, r0
 8001342:	193b      	adds	r3, r7, r4
 8001344:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fb22 	bl	8000994 <__aeabi_i2f>
 8001350:	1c02      	adds	r2, r0, #0
 8001352:	197b      	adds	r3, r7, r5
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	1c19      	adds	r1, r3, #0
 8001358:	1c10      	adds	r0, r2, #0
 800135a:	f7ff f95f 	bl	800061c <__aeabi_fadd>
 800135e:	1c03      	adds	r3, r0, #0
 8001360:	1c18      	adds	r0, r3, #0
 8001362:	f7ff faf7 	bl	8000954 <__aeabi_f2iz>
 8001366:	0002      	movs	r2, r0
 8001368:	193b      	adds	r3, r7, r4
 800136a:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	3301      	adds	r3, #1
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	2b63      	cmp	r3, #99	; 0x63
 8001376:	ddba      	ble.n	80012ee <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8001378:	2418      	movs	r4, #24
 800137a:	193b      	adds	r3, r7, r4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2164      	movs	r1, #100	; 0x64
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe ff4b 	bl	800021c <__divsi3>
 8001386:	0003      	movs	r3, r0
 8001388:	001a      	movs	r2, r3
 800138a:	193b      	adds	r3, r7, r4
 800138c:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ff41 	bl	800021c <__divsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	001a      	movs	r2, r3
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2164      	movs	r1, #100	; 0x64
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7fe ff37 	bl	800021c <__divsi3>
 80013ae:	0003      	movs	r3, r0
 80013b0:	001a      	movs	r2, r3
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80013b6:	003b      	movs	r3, r7
 80013b8:	4a68      	ldr	r2, [pc, #416]	; (800155c <icm20948_accel_calibration+0x2a4>)
 80013ba:	8811      	ldrh	r1, [r2, #0]
 80013bc:	8019      	strh	r1, [r3, #0]
 80013be:	7892      	ldrb	r2, [r2, #2]
 80013c0:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80013c2:	2202      	movs	r2, #2
 80013c4:	2114      	movs	r1, #20
 80013c6:	2010      	movs	r0, #16
 80013c8:	f000 fa16 	bl	80017f8 <read_multiple_icm20948_reg>
 80013cc:	0003      	movs	r3, r0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80013d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013d8:	3201      	adds	r2, #1
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	250c      	movs	r5, #12
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	3301      	adds	r3, #1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	003b      	movs	r3, r7
 80013f2:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80013f4:	2202      	movs	r2, #2
 80013f6:	2117      	movs	r1, #23
 80013f8:	2010      	movs	r0, #16
 80013fa:	f000 f9fd 	bl	80017f8 <read_multiple_icm20948_reg>
 80013fe:	0003      	movs	r3, r0
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800140a:	3201      	adds	r2, #1
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	431a      	orrs	r2, r3
 8001410:	197b      	adds	r3, r7, r5
 8001412:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	3301      	adds	r3, #1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	003b      	movs	r3, r7
 8001422:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001424:	2202      	movs	r2, #2
 8001426:	211a      	movs	r1, #26
 8001428:	2010      	movs	r0, #16
 800142a:	f000 f9e5 	bl	80017f8 <read_multiple_icm20948_reg>
 800142e:	0003      	movs	r3, r0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143a:	3201      	adds	r2, #1
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	431a      	orrs	r2, r3
 8001440:	197b      	adds	r3, r7, r5
 8001442:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	3301      	adds	r3, #1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	003b      	movs	r3, r7
 8001452:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001454:	197b      	adds	r3, r7, r5
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	193b      	adds	r3, r7, r4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <icm20948_accel_calibration+0x1aa>
 8001460:	3307      	adds	r3, #7
 8001462:	10db      	asrs	r3, r3, #3
 8001464:	425b      	negs	r3, r3
 8001466:	18d2      	adds	r2, r2, r3
 8001468:	210c      	movs	r1, #12
 800146a:	187b      	adds	r3, r7, r1
 800146c:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800146e:	187b      	adds	r3, r7, r1
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2318      	movs	r3, #24
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da00      	bge.n	800147e <icm20948_accel_calibration+0x1c6>
 800147c:	3307      	adds	r3, #7
 800147e:	10db      	asrs	r3, r3, #3
 8001480:	425b      	negs	r3, r3
 8001482:	18d2      	adds	r2, r2, r3
 8001484:	210c      	movs	r1, #12
 8001486:	187b      	adds	r3, r7, r1
 8001488:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800148a:	187b      	adds	r3, r7, r1
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	2318      	movs	r3, #24
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <icm20948_accel_calibration+0x1e2>
 8001498:	3307      	adds	r3, #7
 800149a:	10db      	asrs	r3, r3, #3
 800149c:	425b      	negs	r3, r3
 800149e:	18d2      	adds	r2, r2, r3
 80014a0:	210c      	movs	r1, #12
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	121b      	asrs	r3, r3, #8
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	4393      	bics	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	785a      	ldrb	r2, [r3, #1]
 80014c6:	003b      	movs	r3, r7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	121b      	asrs	r3, r3, #8
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	4393      	bics	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	78da      	ldrb	r2, [r3, #3]
 80014f2:	003b      	movs	r3, r7
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	121b      	asrs	r3, r3, #8
 8001504:	b2da      	uxtb	r2, r3
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2201      	movs	r2, #1
 8001512:	4393      	bics	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	795a      	ldrb	r2, [r3, #5]
 800151e:	003b      	movs	r3, r7
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	4313      	orrs	r3, r2
 8001524:	b2da      	uxtb	r2, r3
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800152a:	1d3a      	adds	r2, r7, #4
 800152c:	2302      	movs	r3, #2
 800152e:	2114      	movs	r1, #20
 8001530:	2010      	movs	r0, #16
 8001532:	f000 f99b 	bl	800186c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	1c9a      	adds	r2, r3, #2
 800153a:	2302      	movs	r3, #2
 800153c:	2117      	movs	r1, #23
 800153e:	2010      	movs	r0, #16
 8001540:	f000 f994 	bl	800186c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	1d1a      	adds	r2, r3, #4
 8001548:	2302      	movs	r3, #2
 800154a:	211a      	movs	r1, #26
 800154c:	2010      	movs	r0, #16
 800154e:	f000 f98d 	bl	800186c <write_multiple_icm20948_reg>
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b010      	add	sp, #64	; 0x40
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	0800543c 	.word	0x0800543c

08001560 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800156c:	230f      	movs	r3, #15
 800156e:	18fc      	adds	r4, r7, r3
 8001570:	2101      	movs	r1, #1
 8001572:	2020      	movs	r0, #32
 8001574:	f000 f8e0 	bl	8001738 <read_single_icm20948_reg>
 8001578:	0003      	movs	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d027      	beq.n	80015d4 <icm20948_gyro_full_scale_select+0x74>
 8001584:	dc31      	bgt.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
 8001586:	2b02      	cmp	r3, #2
 8001588:	d019      	beq.n	80015be <icm20948_gyro_full_scale_select+0x5e>
 800158a:	dc2e      	bgt.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <icm20948_gyro_full_scale_select+0x36>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d009      	beq.n	80015a8 <icm20948_gyro_full_scale_select+0x48>
 8001594:	e029      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8001596:	220f      	movs	r2, #15
 8001598:	18bb      	adds	r3, r7, r2
 800159a:	18ba      	adds	r2, r7, r2
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <icm20948_gyro_full_scale_select+0xa8>)
 80015a4:	601a      	str	r2, [r3, #0]
			break;
 80015a6:	e020      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 80015a8:	220f      	movs	r2, #15
 80015aa:	18bb      	adds	r3, r7, r2
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	2102      	movs	r1, #2
 80015b2:	430a      	orrs	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <icm20948_gyro_full_scale_select+0xac>)
 80015ba:	601a      	str	r2, [r3, #0]
			break;
 80015bc:	e015      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 80015be:	220f      	movs	r2, #15
 80015c0:	18bb      	adds	r3, r7, r2
 80015c2:	18ba      	adds	r2, r7, r2
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <icm20948_gyro_full_scale_select+0xb0>)
 80015d0:	601a      	str	r2, [r3, #0]
			break;
 80015d2:	e00a      	b.n	80015ea <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 80015d4:	220f      	movs	r2, #15
 80015d6:	18bb      	adds	r3, r7, r2
 80015d8:	18ba      	adds	r2, r7, r2
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	2106      	movs	r1, #6
 80015de:	430a      	orrs	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <icm20948_gyro_full_scale_select+0xa4>)
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <icm20948_gyro_full_scale_select+0xb4>)
 80015e6:	601a      	str	r2, [r3, #0]
			break;
 80015e8:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	001a      	movs	r2, r3
 80015f2:	2101      	movs	r1, #1
 80015f4:	2020      	movs	r0, #32
 80015f6:	f000 f8d1 	bl	800179c <write_single_icm20948_reg>
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b005      	add	sp, #20
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	200000ec 	.word	0x200000ec
 8001608:	43030000 	.word	0x43030000
 800160c:	42830000 	.word	0x42830000
 8001610:	42033333 	.word	0x42033333
 8001614:	41833333 	.word	0x41833333

08001618 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001624:	230f      	movs	r3, #15
 8001626:	18fc      	adds	r4, r7, r3
 8001628:	2114      	movs	r1, #20
 800162a:	2020      	movs	r0, #32
 800162c:	f000 f884 	bl	8001738 <read_single_icm20948_reg>
 8001630:	0003      	movs	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d02a      	beq.n	8001692 <icm20948_accel_full_scale_select+0x7a>
 800163c:	dc35      	bgt.n	80016aa <icm20948_accel_full_scale_select+0x92>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d01b      	beq.n	800167a <icm20948_accel_full_scale_select+0x62>
 8001642:	dc32      	bgt.n	80016aa <icm20948_accel_full_scale_select+0x92>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <icm20948_accel_full_scale_select+0x36>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d00a      	beq.n	8001662 <icm20948_accel_full_scale_select+0x4a>
 800164c:	e02d      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 800164e:	220f      	movs	r2, #15
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	18ba      	adds	r2, r7, r2
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 800165a:	228d      	movs	r2, #141	; 0x8d
 800165c:	05d2      	lsls	r2, r2, #23
 800165e:	601a      	str	r2, [r3, #0]
			break;
 8001660:	e023      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8001662:	220f      	movs	r2, #15
 8001664:	18bb      	adds	r3, r7, r2
 8001666:	18ba      	adds	r2, r7, r2
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	2102      	movs	r1, #2
 800166c:	430a      	orrs	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 8001672:	228c      	movs	r2, #140	; 0x8c
 8001674:	05d2      	lsls	r2, r2, #23
 8001676:	601a      	str	r2, [r3, #0]
			break;
 8001678:	e017      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 800167a:	220f      	movs	r2, #15
 800167c:	18bb      	adds	r3, r7, r2
 800167e:	18ba      	adds	r2, r7, r2
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	2104      	movs	r1, #4
 8001684:	430a      	orrs	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 800168a:	228b      	movs	r2, #139	; 0x8b
 800168c:	05d2      	lsls	r2, r2, #23
 800168e:	601a      	str	r2, [r3, #0]
			break;
 8001690:	e00b      	b.n	80016aa <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8001692:	220f      	movs	r2, #15
 8001694:	18bb      	adds	r3, r7, r2
 8001696:	18ba      	adds	r2, r7, r2
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	2106      	movs	r1, #6
 800169c:	430a      	orrs	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <icm20948_accel_full_scale_select+0xac>)
 80016a2:	228a      	movs	r2, #138	; 0x8a
 80016a4:	05d2      	lsls	r2, r2, #23
 80016a6:	601a      	str	r2, [r3, #0]
			break;
 80016a8:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 80016aa:	230f      	movs	r3, #15
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	2114      	movs	r1, #20
 80016b4:	2020      	movs	r0, #32
 80016b6:	f000 f871 	bl	800179c <write_single_icm20948_reg>
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b005      	add	sp, #20
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	200000f0 	.word	0x200000f0

080016c8 <cs_high>:


static void cs_high()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	0219      	lsls	r1, r3, #8
 80016d0:	23a0      	movs	r3, #160	; 0xa0
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	2201      	movs	r2, #1
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 f806 	bl	80026e8 <HAL_GPIO_WritePin>
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <cs_low>:

static void cs_low()
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	0219      	lsls	r1, r3, #8
 80016ea:	23a0      	movs	r3, #160	; 0xa0
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	2200      	movs	r2, #0
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 fff9 	bl	80026e8 <HAL_GPIO_WritePin>
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001708:	240c      	movs	r4, #12
 800170a:	193b      	adds	r3, r7, r4
 800170c:	227f      	movs	r2, #127	; 0x7f
 800170e:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	705a      	strb	r2, [r3, #1]

	cs_low();
 8001718:	f7ff ffe3 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800171c:	1939      	adds	r1, r7, r4
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <select_user_bank+0x38>)
 8001720:	230a      	movs	r3, #10
 8001722:	2202      	movs	r2, #2
 8001724:	f002 f8a6 	bl	8003874 <HAL_SPI_Transmit>
	cs_high();
 8001728:	f7ff ffce 	bl	80016c8 <cs_high>
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b005      	add	sp, #20
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	2000014c 	.word	0x2000014c

08001738 <read_single_icm20948_reg>:

uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	0002      	movs	r2, r0
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	1c0a      	adds	r2, r1, #0
 8001748:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800174a:	1dbb      	adds	r3, r7, #6
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	4252      	negs	r2, r2
 8001752:	4313      	orrs	r3, r2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	240f      	movs	r4, #15
 8001758:	193b      	adds	r3, r7, r4
 800175a:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffcb 	bl	80016fc <select_user_bank>

	cs_low();
 8001766:	f7ff ffbc 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800176a:	23fa      	movs	r3, #250	; 0xfa
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	1939      	adds	r1, r7, r4
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <read_single_icm20948_reg+0x60>)
 8001772:	2201      	movs	r2, #1
 8001774:	f002 f87e 	bl	8003874 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001778:	23fa      	movs	r3, #250	; 0xfa
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	240e      	movs	r4, #14
 800177e:	1939      	adds	r1, r7, r4
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <read_single_icm20948_reg+0x60>)
 8001782:	2201      	movs	r2, #1
 8001784:	f002 f9cc 	bl	8003b20 <HAL_SPI_Receive>
	cs_high();
 8001788:	f7ff ff9e 	bl	80016c8 <cs_high>

	return reg_val;
 800178c:	193b      	adds	r3, r7, r4
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b005      	add	sp, #20
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	2000014c 	.word	0x2000014c

0800179c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0004      	movs	r4, r0
 80017a4:	0008      	movs	r0, r1
 80017a6:	0011      	movs	r1, r2
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	1c22      	adds	r2, r4, #0
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	1c02      	adds	r2, r0, #0
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	1d7b      	adds	r3, r7, #5
 80017b6:	1c0a      	adds	r2, r1, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80017ba:	240c      	movs	r4, #12
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	1dba      	adds	r2, r7, #6
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	1d7a      	adds	r2, r7, #5
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff93 	bl	80016fc <select_user_bank>

	cs_low();
 80017d6:	f7ff ff84 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80017da:	23fa      	movs	r3, #250	; 0xfa
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	1939      	adds	r1, r7, r4
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <write_single_icm20948_reg+0x58>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	f002 f846 	bl	8003874 <HAL_SPI_Transmit>
	cs_high();
 80017e8:	f7ff ff6e 	bl	80016c8 <cs_high>
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b005      	add	sp, #20
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	2000014c 	.word	0x2000014c

080017f8 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	0004      	movs	r4, r0
 8001800:	0008      	movs	r0, r1
 8001802:	0011      	movs	r1, r2
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	1c22      	adds	r2, r4, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	1c02      	adds	r2, r0, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	1d7b      	adds	r3, r7, #5
 8001812:	1c0a      	adds	r2, r1, #0
 8001814:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8001816:	1dbb      	adds	r3, r7, #6
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	4252      	negs	r2, r2
 800181e:	4313      	orrs	r3, r2
 8001820:	b2da      	uxtb	r2, r3
 8001822:	240f      	movs	r4, #15
 8001824:	193b      	adds	r3, r7, r4
 8001826:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff65 	bl	80016fc <select_user_bank>

	cs_low();
 8001832:	f7ff ff56 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001836:	23fa      	movs	r3, #250	; 0xfa
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	1939      	adds	r1, r7, r4
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <read_multiple_icm20948_reg+0x6c>)
 800183e:	2201      	movs	r2, #1
 8001840:	f002 f818 	bl	8003874 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001844:	1d7b      	adds	r3, r7, #5
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	23fa      	movs	r3, #250	; 0xfa
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4906      	ldr	r1, [pc, #24]	; (8001868 <read_multiple_icm20948_reg+0x70>)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <read_multiple_icm20948_reg+0x6c>)
 8001852:	f002 f965 	bl	8003b20 <HAL_SPI_Receive>
	cs_high();
 8001856:	f7ff ff37 	bl	80016c8 <cs_high>

	return reg_val;
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <read_multiple_icm20948_reg+0x70>)
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b005      	add	sp, #20
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	2000014c 	.word	0x2000014c
 8001868:	200000f4 	.word	0x200000f4

0800186c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	0004      	movs	r4, r0
 8001874:	0008      	movs	r0, r1
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	0019      	movs	r1, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	1c22      	adds	r2, r4, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	1c02      	adds	r2, r0, #0
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	1d7b      	adds	r3, r7, #5
 8001888:	1c0a      	adds	r2, r1, #0
 800188a:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 800188c:	240f      	movs	r4, #15
 800188e:	193b      	adds	r3, r7, r4
 8001890:	1dba      	adds	r2, r7, #6
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff2e 	bl	80016fc <select_user_bank>

	cs_low();
 80018a0:	f7ff ff1f 	bl	80016e2 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80018a4:	23fa      	movs	r3, #250	; 0xfa
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	1939      	adds	r1, r7, r4
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <write_multiple_icm20948_reg+0x64>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	f001 ffe1 	bl	8003874 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80018b2:	1d7b      	adds	r3, r7, #5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	23fa      	movs	r3, #250	; 0xfa
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <write_multiple_icm20948_reg+0x64>)
 80018c0:	f001 ffd8 	bl	8003874 <HAL_SPI_Transmit>
	cs_high();
 80018c4:	f7ff ff00 	bl	80016c8 <cs_high>
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b005      	add	sp, #20
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	2000014c 	.word	0x2000014c

080018d4 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80018e0:	228c      	movs	r2, #140	; 0x8c
 80018e2:	2103      	movs	r1, #3
 80018e4:	2030      	movs	r0, #48	; 0x30
 80018e6:	f7ff ff59 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	001a      	movs	r2, r3
 80018f0:	2104      	movs	r1, #4
 80018f2:	2030      	movs	r0, #48	; 0x30
 80018f4:	f7ff ff52 	bl	800179c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018f8:	2281      	movs	r2, #129	; 0x81
 80018fa:	2105      	movs	r1, #5
 80018fc:	2030      	movs	r0, #48	; 0x30
 80018fe:	f7ff ff4d 	bl	800179c <write_single_icm20948_reg>

	HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fc9a 	bl	800223c <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001908:	213b      	movs	r1, #59	; 0x3b
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff ff14 	bl	8001738 <read_single_icm20948_reg>
 8001910:	0003      	movs	r3, r0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	1dbb      	adds	r3, r7, #6
 800192a:	1c0a      	adds	r2, r1, #0
 800192c:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800192e:	220c      	movs	r2, #12
 8001930:	2103      	movs	r1, #3
 8001932:	2030      	movs	r0, #48	; 0x30
 8001934:	f7ff ff32 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001938:	4917      	ldr	r1, [pc, #92]	; (8001998 <write_single_ak09916_reg+0x7c>)
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <write_single_ak09916_reg+0x80>)
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	2208      	movs	r2, #8
 8001940:	f003 f81e 	bl	8004980 <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	001a      	movs	r2, r3
 800194a:	2104      	movs	r1, #4
 800194c:	2030      	movs	r0, #48	; 0x30
 800194e:	f7ff ff25 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001952:	4911      	ldr	r1, [pc, #68]	; (8001998 <write_single_ak09916_reg+0x7c>)
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <write_single_ak09916_reg+0x80>)
 8001956:	2364      	movs	r3, #100	; 0x64
 8001958:	2208      	movs	r2, #8
 800195a:	f003 f811 	bl	8004980 <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 800195e:	1dbb      	adds	r3, r7, #6
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	001a      	movs	r2, r3
 8001964:	2106      	movs	r1, #6
 8001966:	2030      	movs	r0, #48	; 0x30
 8001968:	f7ff ff18 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 800196c:	490a      	ldr	r1, [pc, #40]	; (8001998 <write_single_ak09916_reg+0x7c>)
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <write_single_ak09916_reg+0x80>)
 8001970:	2364      	movs	r3, #100	; 0x64
 8001972:	2208      	movs	r2, #8
 8001974:	f003 f804 	bl	8004980 <HAL_UART_Transmit>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001978:	2281      	movs	r2, #129	; 0x81
 800197a:	2105      	movs	r1, #5
 800197c:	2030      	movs	r0, #48	; 0x30
 800197e:	f7ff ff0d 	bl	800179c <write_single_icm20948_reg>
	HAL_UART_Transmit(&huart1, (uint8_t*)tp, 8, 100);
 8001982:	4905      	ldr	r1, [pc, #20]	; (8001998 <write_single_ak09916_reg+0x7c>)
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <write_single_ak09916_reg+0x80>)
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2208      	movs	r2, #8
 800198a:	f002 fff9 	bl	8004980 <HAL_UART_Transmit>
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000090 	.word	0x20000090
 800199c:	20000224 	.word	0x20000224

080019a0 <icm20948_init>:

static void ak09916_init();
static void icm20948_init();

void icm20948_init()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	f7ff fa2f 	bl	8000e08 <icm20948_who_am_i>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	4053      	eors	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f6      	bne.n	80019a6 <icm20948_init+0x6>

	icm20948_device_reset();
 80019b8:	f7ff fa4f 	bl	8000e5a <icm20948_device_reset>
	icm20948_wakeup();
 80019bc:	f7ff fa66 	bl	8000e8c <icm20948_wakeup>

	icm20948_clock_source(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff faf6 	bl	8000fb2 <icm20948_clock_source>
	icm20948_odr_align_enable();
 80019c6:	f7ff fb15 	bl	8000ff4 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 80019ca:	f7ff fa7d 	bl	8000ec8 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fb1a 	bl	8001008 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fb3b 	bl	8001050 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fb5c 	bl	8001098 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fb6a 	bl	80010ba <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 80019e6:	f7ff fba2 	bl	800112e <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 80019ea:	f7ff fc65 	bl	80012b8 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f7ff fdb6 	bl	8001560 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f7ff fe0f 	bl	8001618 <icm20948_accel_full_scale_select>
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ak09916_init>:

void ak09916_init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8001a04:	f7ff fa7b 	bl	8000efe <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8001a08:	f7ff fa94 	bl	8000f34 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8001a0c:	2007      	movs	r0, #7
 8001a0e:	f7ff faaf 	bl	8000f70 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	f7ff fa0d 	bl	8000e32 <ak09916_who_am_i>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4053      	eors	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f6      	bne.n	8001a14 <ak09916_init+0x14>

	ak09916_soft_reset();
 8001a26:	f7ff fa25 	bl	8000e74 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f7ff fb6c 	bl	8001108 <ak09916_operation_mode_setting>
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <IMU_Init>:

void IMU_Init()
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 8001a3a:	f000 f98b 	bl	8001d54 <MX_SPI1_Init>
	icm20948_init();
 8001a3e:	f7ff ffaf 	bl	80019a0 <icm20948_init>
	ak09916_init();
 8001a42:	f7ff ffdd 	bl	8001a00 <ak09916_init>
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <setup_gpio>:
    RCC->IOPRSTR &= ~RCC_IOPRSTR_GPIOBRST;
    RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
}

void setup_gpio(GPIO_TypeDef  *GPIOx, int num, enum mode m)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	701a      	strb	r2, [r3, #0]
    if(num > 15)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	dc3f      	bgt.n	8001ae0 <setup_gpio+0x94>
    {
        return;
    }
    //input mode
    GPIOx->MODER &= ~(3<<(2*num));
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	0052      	lsls	r2, r2, #1
 8001a68:	2103      	movs	r1, #3
 8001a6a:	4091      	lsls	r1, r2
 8001a6c:	000a      	movs	r2, r1
 8001a6e:	43d2      	mvns	r2, r2
 8001a70:	401a      	ands	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]
    //output mode
    GPIOx->MODER &= ~(3<<(2*num));
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	0052      	lsls	r2, r2, #1
 8001a7e:	2103      	movs	r1, #3
 8001a80:	4091      	lsls	r1, r2
 8001a82:	000a      	movs	r2, r1
 8001a84:	43d2      	mvns	r2, r2
 8001a86:	401a      	ands	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (1<<(2*num));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	0052      	lsls	r2, r2, #1
 8001a94:	2101      	movs	r1, #1
 8001a96:	4091      	lsls	r1, r2
 8001a98:	000a      	movs	r2, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]
    //alt mode
    GPIOx->MODER &= ~(3<<(2*num));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	4091      	lsls	r1, r2
 8001aac:	000a      	movs	r2, r1
 8001aae:	43d2      	mvns	r2, r2
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (2<<(2*num));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4091      	lsls	r1, r2
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
    //analog mode
    GPIOx->MODER |= (3<<(2*num));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	0052      	lsls	r2, r2, #1
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4091      	lsls	r1, r2
 8001ad6:	000a      	movs	r2, r1
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e000      	b.n	8001ae2 <setup_gpio+0x96>
        return;
 8001ae0:	46c0      	nop			; (mov r8, r8)
}
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <ADC_config>:
	NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn); /* (1) */
	NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn,3);
}

void ADC_config()
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	RCC->AHBRSTR |= RCC_AHBRSTR_DMA1RST;
 8001aec:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <ADC_config+0x118>)
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <ADC_config+0x118>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	621a      	str	r2, [r3, #32]
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <ADC_config+0x118>)
 8001afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <ADC_config+0x118>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0089      	lsls	r1, r1, #2
 8001b02:	430a      	orrs	r2, r1
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; /* (1) */
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <ADC_config+0x118>)
 8001b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <ADC_config+0x118>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <ADC_config+0x118>)
 8001b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <ADC_config+0x118>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0089      	lsls	r1, r1, #2
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
	setup_gpio(GPIOB, 0, analog);
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <ADC_config+0x11c>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	2100      	movs	r1, #0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff ff90 	bl	8001a4c <setup_gpio>
	DMA1_CSELR->CSELR &= (uint32_t)(~DMA_CSELR_C1S); /* (2) */
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <ADC_config+0x120>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <ADC_config+0x120>)
 8001b32:	210f      	movs	r1, #15
 8001b34:	438a      	bics	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR)); /* (4) */
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <ADC_config+0x124>)
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <ADC_config+0x128>)
 8001b3c:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t) (&AD_RES); /* (5) */
 8001b3e:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <ADC_config+0x124>)
 8001b40:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <ADC_config+0x12c>)
 8001b42:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 1; /* (6) */
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <ADC_config+0x124>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0 | DMA_CCR_TEIE | DMA_CCR_CIRC; /* (7) */
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <ADC_config+0x124>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <ADC_config+0x124>)
 8001b50:	21a5      	movs	r1, #165	; 0xa5
 8001b52:	00c9      	lsls	r1, r1, #3
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN; /* (8) */
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <ADC_config+0x124>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <ADC_config+0x124>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
	//NVIC_EnableIRQ(DMA1_Channel1_IRQn); /* (1) */
	//NVIC_SetPriority(DMA1_Channel1_IRQn,0);
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <ADC_config+0x130>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d005      	beq.n	8001b7a <ADC_config+0x92>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <ADC_config+0x130>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <ADC_config+0x130>)
 8001b74:	2102      	movs	r1, #2
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
	}
	ADC1->IER = ADC_IER_EOCALIE |ADC_IER_EOCIE | ADC_IER_EOSIE | ADC_IER_OVRIE | ADC_IER_ADRDYIE;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <ADC_config+0x130>)
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <ADC_config+0x134>)
 8001b7e:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADCAL; /* (3) */
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <ADC_config+0x130>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <ADC_config+0x130>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0609      	lsls	r1, r1, #24
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_EOCAL) == 0) /* (4) */
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <ADC_config+0x130>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f9      	beq.n	8001b90 <ADC_config+0xa8>
	{}
	ADC1->ISR |= ADC_ISR_EOCAL;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <ADC_config+0x130>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <ADC_config+0x130>)
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	0109      	lsls	r1, r1, #4
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

	ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG; /* (2) */
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <ADC_config+0x130>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <ADC_config+0x130>)
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
	ADC1->CHSELR = ADC_CHSELR_CHSEL8; /* (3) */
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <ADC_config+0x130>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2; /* (4) */
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <ADC_config+0x130>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <ADC_config+0x130>)
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	615a      	str	r2, [r3, #20]
	ADC1->ISR |= ADC_ISR_ADRDY; /* (1) */
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <ADC_config+0x130>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <ADC_config+0x130>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADEN; /* (2) */
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <ADC_config+0x130>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <ADC_config+0x130>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
	if ((ADC1->CFGR1 & ADC_CFGR1_AUTOFF) == 0)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <ADC_config+0x130>)
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	d105      	bne.n	8001bfa <ADC_config+0x112>
	{
		 while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (3) */
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <ADC_config+0x130>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0fa      	beq.n	8001bf0 <ADC_config+0x108>
		 {}
	}
	/* Performs the AD conversion */
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	50000400 	.word	0x50000400
 8001c08:	400200a8 	.word	0x400200a8
 8001c0c:	40020008 	.word	0x40020008
 8001c10:	40012440 	.word	0x40012440
 8001c14:	200000fc 	.word	0x200000fc
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	0000081d 	.word	0x0000081d

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f000 fa9a 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f824 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f7fe ffb8 	bl	8000ba0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001c30:	f000 f93c 	bl	8001eac <MX_TIM3_Init>
  MX_I2C1_Init();
 8001c34:	f7fe ffd6 	bl	8000be4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c38:	f000 f88c 	bl	8001d54 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c3c:	f000 f9ee 	bl	800201c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001c40:	f000 f98a 	bl	8001f58 <MX_TIM6_Init>

  /* USER CODE BEGIN 2 */
  ADC_config();
 8001c44:	f7ff ff50 	bl	8001ae8 <ADC_config>
  IMU_Init();
 8001c48:	f7ff fef5 	bl	8001a36 <IMU_Init>
  BLE_Init();
 8001c4c:	f7fe ff12 	bl	8000a74 <BLE_Init>
  HAL_Delay(1000);
 8001c50:	23fa      	movs	r3, #250	; 0xfa
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 faf1 	bl	800223c <HAL_Delay>
  MX_TIM6_Init();
 8001c5a:	f000 f97d 	bl	8001f58 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <main+0x50>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f002 fbbd 	bl	80043e0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_Base_Start_IT(&htim6);
 8001c66:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <main+0x50>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f002 fbb9 	bl	80043e0 <HAL_TIM_Base_Start_IT>
 8001c6e:	e7fa      	b.n	8001c66 <main+0x46>
 8001c70:	200001e4 	.word	0x200001e4

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b09b      	sub	sp, #108	; 0x6c
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	2434      	movs	r4, #52	; 0x34
 8001c7c:	193b      	adds	r3, r7, r4
 8001c7e:	0018      	movs	r0, r3
 8001c80:	2334      	movs	r3, #52	; 0x34
 8001c82:	001a      	movs	r2, r3
 8001c84:	2100      	movs	r1, #0
 8001c86:	f003 fbc5 	bl	8005414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2314      	movs	r3, #20
 8001c92:	001a      	movs	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f003 fbbd 	bl	8005414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9a:	003b      	movs	r3, r7
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f003 fbb6 	bl	8005414 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <SystemClock_Config+0xcc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cae:	401a      	ands	r2, r3
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <SystemClock_Config+0xcc>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0109      	lsls	r1, r1, #4
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cba:	0021      	movs	r1, r4
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2210      	movs	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fe52 	bl	8002980 <HAL_RCC_OscConfig>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001ce0:	f000 f832 	bl	8001d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	220f      	movs	r2, #15
 8001cea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2201      	movs	r2, #1
 8001cf0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2100      	movs	r1, #0
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f001 f9b5 	bl	8003078 <HAL_RCC_ClockConfig>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001d12:	f000 f819 	bl	8001d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001d16:	003b      	movs	r3, r7
 8001d18:	2209      	movs	r2, #9
 8001d1a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d1c:	003b      	movs	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d22:	003b      	movs	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d28:	003b      	movs	r3, r7
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f001 fbc8 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d001      	beq.n	8001d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d34:	f000 f808 	bl	8001d48 <Error_Handler>
  }
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b01b      	add	sp, #108	; 0x6c
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	40007000 	.word	0x40007000
 8001d44:	ffffe7ff 	.word	0xffffe7ff

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
	...

08001d54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d5a:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <MX_SPI1_Init+0x6c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d60:	2282      	movs	r2, #130	; 0x82
 8001d62:	0052      	lsls	r2, r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d88:	2218      	movs	r2, #24
 8001d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <MX_SPI1_Init+0x68>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f001 fcd0 	bl	800374c <HAL_SPI_Init>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001db0:	f7ff ffca 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	2000014c 	.word	0x2000014c
 8001dc0:	40013000 	.word	0x40013000

08001dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	240c      	movs	r4, #12
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	2314      	movs	r3, #20
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f003 fb1c 	bl	8005414 <memset>
  if(spiHandle->Instance==SPI1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_SPI_MspInit+0x7c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d128      	bne.n	8001e38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_SPI_MspInit+0x80>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_SPI_MspInit+0x80>)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	0149      	lsls	r1, r1, #5
 8001df0:	430a      	orrs	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_SPI_MspInit+0x80>)
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_SPI_MspInit+0x80>)
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_SPI_MspInit+0x80>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e0c:	0021      	movs	r1, r4
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2238      	movs	r2, #56	; 0x38
 8001e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2202      	movs	r2, #2
 8001e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2203      	movs	r2, #3
 8001e24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_SPI_MspInit+0x84>)
 8001e30:	0019      	movs	r1, r3
 8001e32:	0010      	movs	r0, r2
 8001e34:	f000 fada 	bl	80023ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b009      	add	sp, #36	; 0x24
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	40013000 	.word	0x40013000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	50000400 	.word	0x50000400

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_MspInit+0x24>)
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_MspInit+0x24>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_MspInit+0x24>)
 8001e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_MspInit+0x24>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0549      	lsls	r1, r1, #21
 8001e66:	430a      	orrs	r2, r1
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f9b4 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	2310      	movs	r3, #16
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f003 faa9 	bl	8005414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	003b      	movs	r3, r7
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	001a      	movs	r2, r3
 8001eca:	2100      	movs	r1, #0
 8001ecc:	f003 faa2 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <MX_TIM3_Init+0xa4>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <MX_TIM3_Init+0xa8>)
 8001ee6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f002 fa32 	bl	8004360 <HAL_TIM_Base_Init>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff ff22 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f04:	2108      	movs	r1, #8
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0152      	lsls	r2, r2, #5
 8001f0c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f0e:	187a      	adds	r2, r7, r1
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f002 fab5 	bl	8004484 <HAL_TIM_ConfigClockSource>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f1e:	f7ff ff13 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	003b      	movs	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	003b      	movs	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f2e:	003a      	movs	r2, r7
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f32:	0011      	movs	r1, r2
 8001f34:	0018      	movs	r0, r3
 8001f36:	f002 fc71 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001f3e:	f7ff ff03 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b006      	add	sp, #24
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	200001a4 	.word	0x200001a4
 8001f50:	40000400 	.word	0x40000400
 8001f54:	0000ffff 	.word	0x0000ffff

08001f58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5e:	003b      	movs	r3, r7
 8001f60:	0018      	movs	r0, r3
 8001f62:	2308      	movs	r3, #8
 8001f64:	001a      	movs	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f003 fa54 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <MX_TIM6_Init+0x70>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f74:	22fa      	movs	r2, #250	; 0xfa
 8001f76:	0192      	lsls	r2, r2, #6
 8001f78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <MX_TIM6_Init+0x74>)
 8001f84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f002 f9e6 	bl	8004360 <HAL_TIM_Base_Init>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001f98:	f7ff fed6 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	003b      	movs	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa2:	003b      	movs	r3, r7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fa8:	003a      	movs	r2, r7
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_TIM6_Init+0x6c>)
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f002 fc34 	bl	800481c <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001fb8:	f7ff fec6 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200001e4 	.word	0x200001e4
 8001fc8:	40001000 	.word	0x40001000
 8001fcc:	0000ffff 	.word	0x0000ffff

08001fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0x40>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8001fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8001fe8:	2102      	movs	r1, #2
 8001fea:	430a      	orrs	r2, r1
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001fee:	e00a      	b.n	8002006 <HAL_TIM_Base_MspInit+0x36>
  else if(tim_baseHandle->Instance==TIM6)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d105      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8001ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8002000:	2110      	movs	r1, #16
 8002002:	430a      	orrs	r2, r1
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40000400 	.word	0x40000400
 8002014:	40021000 	.word	0x40021000
 8002018:	40001000 	.word	0x40001000

0800201c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <MX_USART1_UART_Init+0x60>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002028:	22e1      	movs	r2, #225	; 0xe1
 800202a:	0252      	lsls	r2, r2, #9
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002048:	22c0      	movs	r2, #192	; 0xc0
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002062:	0018      	movs	r0, r3
 8002064:	f002 fc38 	bl	80048d8 <HAL_UART_Init>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800206c:	f7ff fe6c 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	20000224 	.word	0x20000224
 800207c:	40013800 	.word	0x40013800

08002080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	240c      	movs	r4, #12
 800208a:	193b      	adds	r3, r7, r4
 800208c:	0018      	movs	r0, r3
 800208e:	2314      	movs	r3, #20
 8002090:	001a      	movs	r2, r3
 8002092:	2100      	movs	r1, #0
 8002094:	f003 f9be 	bl	8005414 <memset>
  if(uartHandle->Instance==USART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_UART_MspInit+0x80>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12a      	bne.n	80020f8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_UART_MspInit+0x84>)
 80020a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_UART_MspInit+0x84>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	01c9      	lsls	r1, r1, #7
 80020ac:	430a      	orrs	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_UART_MspInit+0x84>)
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_UART_MspInit+0x84>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_UART_MspInit+0x84>)
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	22f0      	movs	r2, #240	; 0xf0
 80020cc:	0152      	lsls	r2, r2, #5
 80020ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	0021      	movs	r1, r4
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2202      	movs	r2, #2
 80020d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2203      	movs	r2, #3
 80020e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2204      	movs	r2, #4
 80020e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	187a      	adds	r2, r7, r1
 80020ec:	23a0      	movs	r3, #160	; 0xa0
 80020ee:	05db      	lsls	r3, r3, #23
 80020f0:	0011      	movs	r1, r2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 f97a 	bl	80023ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b009      	add	sp, #36	; 0x24
 80020fe:	bd90      	pop	{r4, r7, pc}
 8002100:	40013800 	.word	0x40013800
 8002104:	40021000 	.word	0x40021000

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800210a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 800210e:	490e      	ldr	r1, [pc, #56]	; (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <LoopForever+0xe>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002124:	4c0b      	ldr	r4, [pc, #44]	; (8002154 <LoopForever+0x16>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002132:	f7ff feb6 	bl	8001ea2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f003 f949 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7ff fd71 	bl	8001c20 <main>

0800213e <LoopForever>:

LoopForever:
    b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
   ldr   r0, =_estack
 8002140:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800214c:	080054bc 	.word	0x080054bc
  ldr r2, =_sbss
 8002150:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002154:	200002ac 	.word	0x200002ac

08002158 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_COMP_IRQHandler>
	...

0800215c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x3c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Init+0x3c>)
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f811 	bl	800219c <HAL_InitTick>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d003      	beq.n	8002186 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e001      	b.n	800218a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002186:	f7ff fe61 	bl	8001e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_InitTick+0x5c>)
 80021a6:	681c      	ldr	r4, [r3, #0]
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_InitTick+0x60>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	0019      	movs	r1, r3
 80021ae:	23fa      	movs	r3, #250	; 0xfa
 80021b0:	0098      	lsls	r0, r3, #2
 80021b2:	f7fd ffa9 	bl	8000108 <__udivsi3>
 80021b6:	0003      	movs	r3, r0
 80021b8:	0019      	movs	r1, r3
 80021ba:	0020      	movs	r0, r4
 80021bc:	f7fd ffa4 	bl	8000108 <__udivsi3>
 80021c0:	0003      	movs	r3, r0
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f905 	bl	80023d2 <HAL_SYSTICK_Config>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00f      	b.n	80021f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d80b      	bhi.n	80021ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	2301      	movs	r3, #1
 80021da:	425b      	negs	r3, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f8e2 	bl	80023a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_InitTick+0x64>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b003      	add	sp, #12
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	200000c4 	.word	0x200000c4
 80021fc:	200000cc 	.word	0x200000cc
 8002200:	200000c8 	.word	0x200000c8

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_IncTick+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_IncTick+0x20>)
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	200000cc 	.word	0x200000cc
 8002224:	200002a8 	.word	0x200002a8

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <HAL_GetTick+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	200002a8 	.word	0x200002a8

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fff0 	bl	8002228 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	189b      	adds	r3, r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	f7ff ffe0 	bl	8002228 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	200000cc 	.word	0x200000cc

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	0002      	movs	r2, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b7f      	cmp	r3, #127	; 0x7f
 8002298:	d828      	bhi.n	80022ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <__NVIC_SetPriority+0xd4>)
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	33c0      	adds	r3, #192	; 0xc0
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	589b      	ldr	r3, [r3, r2]
 80022aa:	1dfa      	adds	r2, r7, #7
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	0011      	movs	r1, r2
 80022b0:	2203      	movs	r2, #3
 80022b2:	400a      	ands	r2, r1
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	21ff      	movs	r1, #255	; 0xff
 80022b8:	4091      	lsls	r1, r2
 80022ba:	000a      	movs	r2, r1
 80022bc:	43d2      	mvns	r2, r2
 80022be:	401a      	ands	r2, r3
 80022c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	401a      	ands	r2, r3
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	0018      	movs	r0, r3
 80022d0:	2303      	movs	r3, #3
 80022d2:	4003      	ands	r3, r0
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d8:	481f      	ldr	r0, [pc, #124]	; (8002358 <__NVIC_SetPriority+0xd4>)
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	430a      	orrs	r2, r1
 80022e4:	33c0      	adds	r3, #192	; 0xc0
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022ea:	e031      	b.n	8002350 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <__NVIC_SetPriority+0xd8>)
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	0019      	movs	r1, r3
 80022f4:	230f      	movs	r3, #15
 80022f6:	400b      	ands	r3, r1
 80022f8:	3b08      	subs	r3, #8
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3306      	adds	r3, #6
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	18d3      	adds	r3, r2, r3
 8002302:	3304      	adds	r3, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1dfa      	adds	r2, r7, #7
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	0011      	movs	r1, r2
 800230c:	2203      	movs	r2, #3
 800230e:	400a      	ands	r2, r1
 8002310:	00d2      	lsls	r2, r2, #3
 8002312:	21ff      	movs	r1, #255	; 0xff
 8002314:	4091      	lsls	r1, r2
 8002316:	000a      	movs	r2, r1
 8002318:	43d2      	mvns	r2, r2
 800231a:	401a      	ands	r2, r3
 800231c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	401a      	ands	r2, r3
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	0018      	movs	r0, r3
 800232c:	2303      	movs	r3, #3
 800232e:	4003      	ands	r3, r0
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002334:	4809      	ldr	r0, [pc, #36]	; (800235c <__NVIC_SetPriority+0xd8>)
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	001c      	movs	r4, r3
 800233c:	230f      	movs	r3, #15
 800233e:	4023      	ands	r3, r4
 8002340:	3b08      	subs	r3, #8
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	430a      	orrs	r2, r1
 8002346:	3306      	adds	r3, #6
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	18c3      	adds	r3, r0, r3
 800234c:	3304      	adds	r3, #4
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b003      	add	sp, #12
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	045b      	lsls	r3, r3, #17
 8002370:	429a      	cmp	r2, r3
 8002372:	d301      	bcc.n	8002378 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002374:	2301      	movs	r3, #1
 8002376:	e010      	b.n	800239a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <SysTick_Config+0x44>)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	3a01      	subs	r2, #1
 800237e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002380:	2301      	movs	r3, #1
 8002382:	425b      	negs	r3, r3
 8002384:	2103      	movs	r1, #3
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ff7c 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x44>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x44>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	210f      	movs	r1, #15
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	1c02      	adds	r2, r0, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	0011      	movs	r1, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff ffbf 	bl	8002360 <SysTick_Config>
 80023e2:	0003      	movs	r3, r0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002402:	e155      	b.n	80026b0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4091      	lsls	r1, r2
 800240e:	000a      	movs	r2, r1
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d100      	bne.n	800241c <HAL_GPIO_Init+0x30>
 800241a:	e146      	b.n	80026aa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	4013      	ands	r3, r2
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	409a      	lsls	r2, r3
 8002442:	0013      	movs	r3, r2
 8002444:	43da      	mvns	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	409a      	lsls	r2, r3
 8002456:	0013      	movs	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	43da      	mvns	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	2201      	movs	r2, #1
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2203      	movs	r2, #3
 800249c:	4013      	ands	r3, r2
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d017      	beq.n	80024d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	43da      	mvns	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2203      	movs	r2, #3
 80024d8:	4013      	ands	r3, r2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	58d3      	ldr	r3, [r2, r3]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2207      	movs	r2, #7
 80024f0:	4013      	ands	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	43da      	mvns	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2107      	movs	r1, #7
 800250a:	400b      	ands	r3, r1
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	6939      	ldr	r1, [r7, #16]
 8002524:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	43da      	mvns	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	401a      	ands	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	23c0      	movs	r3, #192	; 0xc0
 8002560:	029b      	lsls	r3, r3, #10
 8002562:	4013      	ands	r3, r2
 8002564:	d100      	bne.n	8002568 <HAL_GPIO_Init+0x17c>
 8002566:	e0a0      	b.n	80026aa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 800256a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002574:	4a55      	ldr	r2, [pc, #340]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2203      	movs	r2, #3
 8002586:	4013      	ands	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	409a      	lsls	r2, r3
 800258e:	0013      	movs	r3, r2
 8002590:	43da      	mvns	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	23a0      	movs	r3, #160	; 0xa0
 800259c:	05db      	lsls	r3, r3, #23
 800259e:	429a      	cmp	r2, r3
 80025a0:	d01f      	beq.n	80025e2 <HAL_GPIO_Init+0x1f6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_GPIO_Init+0x2e4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x1f2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_GPIO_Init+0x2e8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x1ee>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x1ea>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x1e6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_GPIO_Init+0x2f4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e00a      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e008      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025d6:	2303      	movs	r3, #3
 80025d8:	e004      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025da:	2302      	movs	r3, #2
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025e2:	2300      	movs	r3, #0
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	2103      	movs	r1, #3
 80025e8:	400a      	ands	r2, r1
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	4093      	lsls	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f4:	4935      	ldr	r1, [pc, #212]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43da      	mvns	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	4013      	ands	r3, r2
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43da      	mvns	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43da      	mvns	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	035b      	lsls	r3, r3, #13
 800266e:	4013      	ands	r3, r2
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43da      	mvns	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	039b      	lsls	r3, r3, #14
 8002698:	4013      	ands	r3, r2
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_GPIO_Init+0x2f8>)
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	1e13      	subs	r3, r2, #0
 80026ba:	d000      	beq.n	80026be <HAL_GPIO_Init+0x2d2>
 80026bc:	e6a2      	b.n	8002404 <HAL_GPIO_Init+0x18>
  }
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b006      	add	sp, #24
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	50000400 	.word	0x50000400
 80026d4:	50000800 	.word	0x50000800
 80026d8:	50000c00 	.word	0x50000c00
 80026dc:	50001000 	.word	0x50001000
 80026e0:	50001c00 	.word	0x50001c00
 80026e4:	40010400 	.word	0x40010400

080026e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	0008      	movs	r0, r1
 80026f2:	0011      	movs	r1, r2
 80026f4:	1cbb      	adds	r3, r7, #2
 80026f6:	1c02      	adds	r2, r0, #0
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	1c7b      	adds	r3, r7, #1
 80026fc:	1c0a      	adds	r2, r1, #0
 80026fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002700:	1c7b      	adds	r3, r7, #1
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002708:	1cbb      	adds	r3, r7, #2
 800270a:	881a      	ldrh	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002710:	e003      	b.n	800271a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002712:	1cbb      	adds	r3, r7, #2
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e082      	b.n	800283c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2241      	movs	r2, #65	; 0x41
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f7fe fa89 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2241      	movs	r2, #65	; 0x41
 8002756:	2124      	movs	r1, #36	; 0x24
 8002758:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4934      	ldr	r1, [pc, #208]	; (8002844 <HAL_I2C_Init+0x120>)
 8002774:	400a      	ands	r2, r1
 8002776:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4931      	ldr	r1, [pc, #196]	; (8002848 <HAL_I2C_Init+0x124>)
 8002784:	400a      	ands	r2, r1
 8002786:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0209      	lsls	r1, r1, #8
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e007      	b.n	80027b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2184      	movs	r1, #132	; 0x84
 80027ac:	0209      	lsls	r1, r1, #8
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d104      	bne.n	80027c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <HAL_I2C_Init+0x128>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	491a      	ldr	r1, [pc, #104]	; (8002848 <HAL_I2C_Init+0x124>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69d9      	ldr	r1, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2241      	movs	r2, #65	; 0x41
 8002828:	2120      	movs	r1, #32
 800282a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2242      	movs	r2, #66	; 0x42
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f0ffffff 	.word	0xf0ffffff
 8002848:	ffff7fff 	.word	0xffff7fff
 800284c:	02008000 	.word	0x02008000

08002850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2241      	movs	r2, #65	; 0x41
 800285e:	5c9b      	ldrb	r3, [r3, r2]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b20      	cmp	r3, #32
 8002864:	d138      	bne.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002870:	2302      	movs	r3, #2
 8002872:	e032      	b.n	80028da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	2101      	movs	r1, #1
 800287a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2241      	movs	r2, #65	; 0x41
 8002880:	2124      	movs	r1, #36	; 0x24
 8002882:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	438a      	bics	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4911      	ldr	r1, [pc, #68]	; (80028e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2241      	movs	r2, #65	; 0x41
 80028c8:	2120      	movs	r1, #32
 80028ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b002      	add	sp, #8
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	ffffefff 	.word	0xffffefff

080028e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2241      	movs	r2, #65	; 0x41
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d139      	bne.n	8002972 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002908:	2302      	movs	r3, #2
 800290a:	e033      	b.n	8002974 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	2101      	movs	r1, #1
 8002912:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	2124      	movs	r1, #36	; 0x24
 800291a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	2120      	movs	r1, #32
 8002964:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}
 800297c:	fffff0ff 	.word	0xfffff0ff

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 fb6c 	bl	800306c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	4bc8      	ldr	r3, [pc, #800]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
 800299c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299e:	4bc6      	ldr	r3, [pc, #792]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	d100      	bne.n	80029b6 <HAL_RCC_OscConfig+0x36>
 80029b4:	e07d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x68>
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10d      	bne.n	80029e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4bba      	ldr	r3, [pc, #744]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x5a>
 80029d8:	e06a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x130>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d166      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f000 fb42 	bl	800306c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x84>
 80029f4:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4baf      	ldr	r3, [pc, #700]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0249      	lsls	r1, r1, #9
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e027      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	23a0      	movs	r3, #160	; 0xa0
 8002a0a:	02db      	lsls	r3, r3, #11
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10e      	bne.n	8002a2e <HAL_RCC_OscConfig+0xae>
 8002a10:	4ba9      	ldr	r3, [pc, #676]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4ba8      	ldr	r3, [pc, #672]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	02c9      	lsls	r1, r1, #11
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	4ba6      	ldr	r3, [pc, #664]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4ba5      	ldr	r3, [pc, #660]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	0249      	lsls	r1, r1, #9
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e012      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a2e:	4ba2      	ldr	r3, [pc, #648]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4ba1      	ldr	r3, [pc, #644]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a34:	49a1      	ldr	r1, [pc, #644]	; (8002cbc <HAL_RCC_OscConfig+0x33c>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	4b9f      	ldr	r3, [pc, #636]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	025b      	lsls	r3, r3, #9
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b9a      	ldr	r3, [pc, #616]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	499c      	ldr	r1, [pc, #624]	; (8002cc0 <HAL_RCC_OscConfig+0x340>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d014      	beq.n	8002a86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fbe4 	bl	8002228 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a66:	f7ff fbdf 	bl	8002228 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e2f9      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a78:	4b8f      	ldr	r3, [pc, #572]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0xe6>
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fbcf 	bl	8002228 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff fbca 	bl	8002228 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e2e4      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa2:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	029b      	lsls	r3, r3, #10
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x110>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x13e>
 8002abc:	e099      	b.n	8002bf2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002acc:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b79      	ldr	r3, [pc, #484]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	2220      	movs	r2, #32
 8002adc:	4393      	bics	r3, r2
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d13e      	bne.n	8002b6a <HAL_RCC_OscConfig+0x1ea>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d13b      	bne.n	8002b6a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002af2:	4b71      	ldr	r3, [pc, #452]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4013      	ands	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_RCC_OscConfig+0x186>
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e2b2      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x344>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	021a      	lsls	r2, r3, #8
 8002b16:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2209      	movs	r2, #9
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 fbeb 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8002b32:	0001      	movs	r1, r0
 8002b34:	4b60      	ldr	r3, [pc, #384]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4a62      	ldr	r2, [pc, #392]	; (8002cc8 <HAL_RCC_OscConfig+0x348>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	000a      	movs	r2, r1
 8002b44:	40da      	lsrs	r2, r3
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x34c>)
 8002b48:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b4a:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_OscConfig+0x350>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2513      	movs	r5, #19
 8002b50:	197c      	adds	r4, r7, r5
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff fb22 	bl	800219c <HAL_InitTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b5c:	197b      	adds	r3, r7, r5
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d046      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002b64:	197b      	adds	r3, r7, r5
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	e280      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d027      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b70:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2209      	movs	r2, #9
 8002b76:	4393      	bics	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7ff fb51 	bl	8002228 <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fb4c 	bl	8002228 <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e266      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d0f1      	beq.n	8002b8c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_RCC_OscConfig+0x344>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fb2c 	bl	8002228 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fb27 	bl	8002228 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e241      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d1f1      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <HAL_RCC_OscConfig+0x27e>
 8002bfc:	e0a1      	b.n	8002d42 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d140      	bne.n	8002c86 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x29c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e227      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_RCC_OscConfig+0x354>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	0a19      	lsrs	r1, r3, #8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	061a      	lsls	r2, r3, #24
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	0b5b      	lsrs	r3, r3, #13
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	0212      	lsls	r2, r2, #8
 8002c50:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	210f      	movs	r1, #15
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	491a      	ldr	r1, [pc, #104]	; (8002cc8 <HAL_RCC_OscConfig+0x348>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_OscConfig+0x34c>)
 8002c64:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x350>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2513      	movs	r5, #19
 8002c6c:	197c      	adds	r4, r7, r5
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fa94 	bl	800219c <HAL_InitTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c78:	197b      	adds	r3, r7, r5
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d060      	beq.n	8002d42 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	e1f2      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d03f      	beq.n	8002d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x338>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0049      	lsls	r1, r1, #1
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fac4 	bl	8002228 <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ca4:	e018      	b.n	8002cd8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca6:	f7ff fabf 	bl	8002228 <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d911      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1d9      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	fffeffff 	.word	0xfffeffff
 8002cc0:	fffbffff 	.word	0xfffbffff
 8002cc4:	ffffe0ff 	.word	0xffffe0ff
 8002cc8:	08005440 	.word	0x08005440
 8002ccc:	200000c4 	.word	0x200000c4
 8002cd0:	200000c8 	.word	0x200000c8
 8002cd4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cd8:	4bc9      	ldr	r3, [pc, #804]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0e0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce4:	4bc6      	ldr	r3, [pc, #792]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4ac6      	ldr	r2, [pc, #792]	; (8003004 <HAL_RCC_OscConfig+0x684>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	4bc3      	ldr	r3, [pc, #780]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf8:	4bc1      	ldr	r3, [pc, #772]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	0a19      	lsrs	r1, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	061a      	lsls	r2, r3, #24
 8002d06:	4bbe      	ldr	r3, [pc, #760]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	e019      	b.n	8002d42 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d0e:	4bbc      	ldr	r3, [pc, #752]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4bbb      	ldr	r3, [pc, #748]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d14:	49bc      	ldr	r1, [pc, #752]	; (8003008 <HAL_RCC_OscConfig+0x688>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7ff fa85 	bl	8002228 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d24:	f7ff fa80 	bl	8002228 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e19a      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d36:	4bb2      	ldr	r3, [pc, #712]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2208      	movs	r2, #8
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d036      	beq.n	8002dba <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d019      	beq.n	8002d88 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d54:	4baa      	ldr	r3, [pc, #680]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d58:	4ba9      	ldr	r3, [pc, #676]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7ff fa62 	bl	8002228 <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fa5d 	bl	8002228 <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e177      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d7c:	4ba0      	ldr	r3, [pc, #640]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d0f1      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3ea>
 8002d86:	e018      	b.n	8002dba <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b9d      	ldr	r3, [pc, #628]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d8c:	4b9c      	ldr	r3, [pc, #624]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002d8e:	2101      	movs	r1, #1
 8002d90:	438a      	bics	r2, r1
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7ff fa48 	bl	8002228 <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fa43 	bl	8002228 <HAL_GetTick>
 8002da2:	0002      	movs	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e15d      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002db0:	4b93      	ldr	r3, [pc, #588]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1f1      	bne.n	8002d9e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x446>
 8002dc4:	e0ae      	b.n	8002f24 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2023      	movs	r0, #35	; 0x23
 8002dc8:	183b      	adds	r3, r7, r0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	055b      	lsls	r3, r3, #21
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	4b88      	ldr	r3, [pc, #544]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0549      	lsls	r1, r1, #21
 8002de4:	430a      	orrs	r2, r1
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_RCC_OscConfig+0x68c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d11a      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b84      	ldr	r3, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0x68c>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b83      	ldr	r3, [pc, #524]	; (800300c <HAL_RCC_OscConfig+0x68c>)
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0049      	lsls	r1, r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e08:	f7ff fa0e 	bl	8002228 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7ff fa09 	bl	8002228 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e123      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_OscConfig+0x68c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4cc>
 8002e3c:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	4b6f      	ldr	r3, [pc, #444]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0049      	lsls	r1, r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	651a      	str	r2, [r3, #80]	; 0x50
 8002e4a:	e031      	b.n	8002eb0 <HAL_RCC_OscConfig+0x530>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4ee>
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e58:	4b69      	ldr	r3, [pc, #420]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e5a:	496b      	ldr	r1, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x688>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e66:	496a      	ldr	r1, [pc, #424]	; (8003010 <HAL_RCC_OscConfig+0x690>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e6c:	e020      	b.n	8002eb0 <HAL_RCC_OscConfig+0x530>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	23a0      	movs	r3, #160	; 0xa0
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d10e      	bne.n	8002e98 <HAL_RCC_OscConfig+0x518>
 8002e7a:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e7e:	4b60      	ldr	r3, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	00c9      	lsls	r1, r1, #3
 8002e84:	430a      	orrs	r2, r1
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50
 8002e88:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	0049      	lsls	r1, r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x530>
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9c:	4b58      	ldr	r3, [pc, #352]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002e9e:	495a      	ldr	r1, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x688>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea8:	4b55      	ldr	r3, [pc, #340]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002eaa:	4959      	ldr	r1, [pc, #356]	; (8003010 <HAL_RCC_OscConfig+0x690>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7ff f9b6 	bl	8002228 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7ff f9b1 	bl	8002228 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_RCC_OscConfig+0x694>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0ca      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d0ef      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x542>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f9a0 	bl	8002228 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eec:	e009      	b.n	8002f02 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f99b 	bl	8002228 <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_RCC_OscConfig+0x694>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0b4      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1ef      	bne.n	8002eee <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f0e:	2323      	movs	r3, #35	; 0x23
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1c:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f1e:	493e      	ldr	r1, [pc, #248]	; (8003018 <HAL_RCC_OscConfig+0x698>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d100      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5ae>
 8002f2c:	e09d      	b.n	800306a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d100      	bne.n	8002f36 <HAL_RCC_OscConfig+0x5b6>
 8002f34:	e076      	b.n	8003024 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d145      	bne.n	8002fca <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b30      	ldr	r3, [pc, #192]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_RCC_OscConfig+0x69c>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7ff f96d 	bl	8002228 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff f968 	bl	8002228 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e082      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	049b      	lsls	r3, r3, #18
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_RCC_OscConfig+0x6a0>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0449      	lsls	r1, r1, #17
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f942 	bl	8002228 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7ff f93d 	bl	8002228 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e057      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	049b      	lsls	r3, r3, #18
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x62a>
 8002fc8:	e04f      	b.n	800306a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002fd0:	4912      	ldr	r1, [pc, #72]	; (800301c <HAL_RCC_OscConfig+0x69c>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f927 	bl	8002228 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff f922 	bl	8002228 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e03c      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_OscConfig+0x680>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	049b      	lsls	r3, r3, #18
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x660>
 8002ffe:	e034      	b.n	800306a <HAL_RCC_OscConfig+0x6ea>
 8003000:	40021000 	.word	0x40021000
 8003004:	ffff1fff 	.word	0xffff1fff
 8003008:	fffffeff 	.word	0xfffffeff
 800300c:	40007000 	.word	0x40007000
 8003010:	fffffbff 	.word	0xfffffbff
 8003014:	00001388 	.word	0x00001388
 8003018:	efffffff 	.word	0xefffffff
 800301c:	feffffff 	.word	0xfeffffff
 8003020:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x6f4>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	025b      	lsls	r3, r3, #9
 800303c:	401a      	ands	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	429a      	cmp	r2, r3
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	23f0      	movs	r3, #240	; 0xf0
 800304a:	039b      	lsls	r3, r3, #14
 800304c:	401a      	ands	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d107      	bne.n	8003066 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	401a      	ands	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b00a      	add	sp, #40	; 0x28
 8003072:	bdb0      	pop	{r4, r5, r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e128      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b96      	ldr	r3, [pc, #600]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d91e      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b93      	ldr	r3, [pc, #588]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	4393      	bics	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030ac:	f7ff f8bc 	bl	8002228 <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b4:	e009      	b.n	80030ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b6:	f7ff f8b7 	bl	8002228 <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	4a8a      	ldr	r2, [pc, #552]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e109      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b87      	ldr	r3, [pc, #540]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1ee      	bne.n	80030b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e2:	4b83      	ldr	r3, [pc, #524]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	22f0      	movs	r2, #240	; 0xf0
 80030e8:	4393      	bics	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b7f      	ldr	r3, [pc, #508]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 80030f2:	430a      	orrs	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	d100      	bne.n	8003102 <HAL_RCC_ClockConfig+0x8a>
 8003100:	e089      	b.n	8003216 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310a:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4013      	ands	r3, r2
 8003114:	d120      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0e1      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	049b      	lsls	r3, r3, #18
 800312a:	4013      	ands	r3, r2
 800312c:	d114      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0d5      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d106      	bne.n	8003148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2204      	movs	r2, #4
 8003140:	4013      	ands	r3, r2
 8003142:	d109      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0ca      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003148:	4b69      	ldr	r3, [pc, #420]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4013      	ands	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0c2      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2203      	movs	r2, #3
 800315e:	4393      	bics	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7ff f85c 	bl	8002228 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800317c:	e009      	b.n	8003192 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317e:	f7ff f853 	bl	8002228 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0a5      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	220c      	movs	r2, #12
 8003198:	4013      	ands	r3, r2
 800319a:	2b08      	cmp	r3, #8
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_ClockConfig+0x106>
 800319e:	e03a      	b.n	8003216 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	e009      	b.n	80031be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7ff f83d 	bl	8002228 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a4d      	ldr	r2, [pc, #308]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e08f      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	220c      	movs	r2, #12
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d1ef      	bne.n	80031aa <HAL_RCC_ClockConfig+0x132>
 80031ca:	e024      	b.n	8003216 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11b      	bne.n	800320c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7ff f827 	bl	8002228 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a42      	ldr	r2, [pc, #264]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e079      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	220c      	movs	r2, #12
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d1ef      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x15e>
 80031f6:	e00e      	b.n	8003216 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7ff f816 	bl	8002228 <HAL_GetTick>
 80031fc:	0002      	movs	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e068      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800320c:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	220c      	movs	r2, #12
 8003212:	4013      	ands	r3, r2
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d21e      	bcs.n	8003262 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003224:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2201      	movs	r2, #1
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003236:	f7fe fff7 	bl	8002228 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	e009      	b.n	8003254 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fe fff2 	bl	8002228 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_RCC_ClockConfig+0x274>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e044      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_ClockConfig+0x270>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2204      	movs	r2, #4
 8003268:	4013      	ands	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_RCC_ClockConfig+0x27c>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	4013      	ands	r3, r2
 8003288:	d00a      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_RCC_ClockConfig+0x280>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00da      	lsls	r2, r3, #3
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a0:	f000 f832 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032a4:	0001      	movs	r1, r0
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_RCC_ClockConfig+0x278>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	220f      	movs	r2, #15
 80032ae:	4013      	ands	r3, r2
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x284>)
 80032b2:	5cd3      	ldrb	r3, [r2, r3]
 80032b4:	000a      	movs	r2, r1
 80032b6:	40da      	lsrs	r2, r3
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_RCC_ClockConfig+0x288>)
 80032ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_ClockConfig+0x28c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	250b      	movs	r5, #11
 80032c2:	197c      	adds	r4, r7, r5
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fe ff69 	bl	800219c <HAL_InitTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	e000      	b.n	80032de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40022000 	.word	0x40022000
 80032ec:	00001388 	.word	0x00001388
 80032f0:	40021000 	.word	0x40021000
 80032f4:	fffff8ff 	.word	0xfffff8ff
 80032f8:	ffffc7ff 	.word	0xffffc7ff
 80032fc:	08005440 	.word	0x08005440
 8003300:	200000c4 	.word	0x200000c4
 8003304:	200000c8 	.word	0x200000c8

08003308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_RCC_GetSysClockFreq+0x138>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	230c      	movs	r3, #12
 8003318:	4013      	ands	r3, r2
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d014      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x40>
 800331e:	d900      	bls.n	8003322 <HAL_RCC_GetSysClockFreq+0x1a>
 8003320:	e07b      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x112>
 8003322:	2b04      	cmp	r3, #4
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x24>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d00b      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x3a>
 800332a:	e076      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_RCC_GetSysClockFreq+0x138>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2210      	movs	r2, #16
 8003332:	4013      	ands	r3, r2
 8003334:	d002      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800333a:	e07c      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_GetSysClockFreq+0x140>)
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003340:	e079      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <HAL_RCC_GetSysClockFreq+0x144>)
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003346:	e076      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	0c9a      	lsrs	r2, r3, #18
 800334c:	230f      	movs	r3, #15
 800334e:	401a      	ands	r2, r3
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_GetSysClockFreq+0x148>)
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	0d9a      	lsrs	r2, r3, #22
 800335a:	2303      	movs	r3, #3
 800335c:	4013      	ands	r3, r2
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_GetSysClockFreq+0x138>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	4013      	ands	r3, r2
 800336c:	d01a      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	4a35      	ldr	r2, [pc, #212]	; (800344c <HAL_RCC_GetSysClockFreq+0x144>)
 8003378:	2300      	movs	r3, #0
 800337a:	69b8      	ldr	r0, [r7, #24]
 800337c:	69f9      	ldr	r1, [r7, #28]
 800337e:	f7fd f859 	bl	8000434 <__aeabi_lmul>
 8003382:	0002      	movs	r2, r0
 8003384:	000b      	movs	r3, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f7fd f82d 	bl	80003f4 <__aeabi_uldivmod>
 800339a:	0002      	movs	r2, r0
 800339c:	000b      	movs	r3, r1
 800339e:	0013      	movs	r3, r2
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
 80033a2:	e037      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_GetSysClockFreq+0x138>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2210      	movs	r2, #16
 80033aa:	4013      	ands	r3, r2
 80033ac:	d01a      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	f7fd f839 	bl	8000434 <__aeabi_lmul>
 80033c2:	0002      	movs	r2, r0
 80033c4:	000b      	movs	r3, r1
 80033c6:	0010      	movs	r0, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f7fd f80d 	bl	80003f4 <__aeabi_uldivmod>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0013      	movs	r3, r2
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	e017      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	0018      	movs	r0, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	0019      	movs	r1, r3
 80033ec:	4a16      	ldr	r2, [pc, #88]	; (8003448 <HAL_RCC_GetSysClockFreq+0x140>)
 80033ee:	2300      	movs	r3, #0
 80033f0:	f7fd f820 	bl	8000434 <__aeabi_lmul>
 80033f4:	0002      	movs	r2, r0
 80033f6:	000b      	movs	r3, r1
 80033f8:	0010      	movs	r0, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	001c      	movs	r4, r3
 8003400:	2300      	movs	r3, #0
 8003402:	001d      	movs	r5, r3
 8003404:	0022      	movs	r2, r4
 8003406:	002b      	movs	r3, r5
 8003408:	f7fc fff4 	bl	80003f4 <__aeabi_uldivmod>
 800340c:	0002      	movs	r2, r0
 800340e:	000b      	movs	r3, r1
 8003410:	0013      	movs	r3, r2
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003418:	e00d      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_GetSysClockFreq+0x138>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	0b5b      	lsrs	r3, r3, #13
 8003420:	2207      	movs	r2, #7
 8003422:	4013      	ands	r3, r2
 8003424:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	3301      	adds	r3, #1
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	0212      	lsls	r2, r2, #8
 800342e:	409a      	lsls	r2, r3
 8003430:	0013      	movs	r3, r2
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003434:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b00e      	add	sp, #56	; 0x38
 800343e:	bdb0      	pop	{r4, r5, r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	003d0900 	.word	0x003d0900
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200
 8003450:	08005458 	.word	0x08005458

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	200000c4 	.word	0x200000c4

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	0001      	movs	r1, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	2207      	movs	r2, #7
 800347a:	4013      	ands	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	40d9      	lsrs	r1, r3
 8003482:	000b      	movs	r3, r1
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	40021000 	.word	0x40021000
 8003490:	08005450 	.word	0x08005450

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003498:	f7ff ffdc 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 800349c:	0001      	movs	r1, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	0adb      	lsrs	r3, r3, #11
 80034a4:	2207      	movs	r2, #7
 80034a6:	4013      	ands	r3, r2
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	40d9      	lsrs	r1, r3
 80034ae:	000b      	movs	r3, r1
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08005450 	.word	0x08005450

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80034c8:	2017      	movs	r0, #23
 80034ca:	183b      	adds	r3, r7, r0
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2220      	movs	r2, #32
 80034d6:	4013      	ands	r3, r2
 80034d8:	d100      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80034da:	e0c2      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034dc:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	055b      	lsls	r3, r3, #21
 80034e4:	4013      	ands	r3, r2
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ec:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	0549      	lsls	r1, r1, #21
 80034f2:	430a      	orrs	r2, r1
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80034f6:	183b      	adds	r3, r7, r0
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b8a      	ldr	r3, [pc, #552]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4013      	ands	r3, r2
 8003506:	d11a      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003508:	4b87      	ldr	r3, [pc, #540]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b86      	ldr	r3, [pc, #536]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	0049      	lsls	r1, r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fe fe87 	bl	8002228 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe fe82 	bl	8002228 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0f3      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b7d      	ldr	r3, [pc, #500]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4013      	ands	r3, r2
 800353c:	d0f0      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800353e:	4b79      	ldr	r3, [pc, #484]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	23c0      	movs	r3, #192	; 0xc0
 8003544:	039b      	lsls	r3, r3, #14
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	039b      	lsls	r3, r3, #14
 8003552:	4013      	ands	r3, r2
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	429a      	cmp	r2, r3
 8003558:	d013      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	23c0      	movs	r3, #192	; 0xc0
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	401a      	ands	r2, r3
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	429a      	cmp	r2, r3
 800356a:	d10a      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800356c:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	029b      	lsls	r3, r3, #10
 8003574:	401a      	ands	r2, r3
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	429a      	cmp	r2, r3
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0cb      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003582:	4b68      	ldr	r3, [pc, #416]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003586:	23c0      	movs	r3, #192	; 0xc0
 8003588:	029b      	lsls	r3, r3, #10
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	4013      	ands	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d033      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2220      	movs	r2, #32
 80035aa:	4013      	ands	r3, r2
 80035ac:	d02e      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b8:	4b5a      	ldr	r3, [pc, #360]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035bc:	4b59      	ldr	r3, [pc, #356]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0309      	lsls	r1, r1, #12
 80035c2:	430a      	orrs	r2, r1
 80035c4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035cc:	4958      	ldr	r1, [pc, #352]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035d2:	4b54      	ldr	r3, [pc, #336]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d014      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fe21 	bl	8002228 <HAL_GetTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fe1c 	bl	8002228 <HAL_GetTick>
 80035f0:	0002      	movs	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e08c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d0ef      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	23c0      	movs	r3, #192	; 0xc0
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	401a      	ands	r2, r3
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	429a      	cmp	r2, r3
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a45      	ldr	r2, [pc, #276]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003624:	4013      	ands	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	23c0      	movs	r3, #192	; 0xc0
 800362e:	039b      	lsls	r3, r3, #14
 8003630:	401a      	ands	r2, r3
 8003632:	4b3c      	ldr	r3, [pc, #240]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800363a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	23c0      	movs	r3, #192	; 0xc0
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	401a      	ands	r2, r3
 8003646:	4b37      	ldr	r3, [pc, #220]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003648:	430a      	orrs	r2, r1
 800364a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800364c:	2317      	movs	r3, #23
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365c:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800365e:	400a      	ands	r2, r1
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	2203      	movs	r2, #3
 8003672:	4393      	bics	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800367c:	430a      	orrs	r2, r1
 800367e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2202      	movs	r2, #2
 8003686:	4013      	ands	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	220c      	movs	r2, #12
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800369a:	430a      	orrs	r2, r1
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2204      	movs	r2, #4
 80036a4:	4013      	ands	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036b8:	430a      	orrs	r2, r1
 80036ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2208      	movs	r2, #8
 80036c2:	4013      	ands	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d6:	430a      	orrs	r2, r1
 80036d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f6:	430a      	orrs	r2, r1
 80036f8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	4013      	ands	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003708:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003714:	430a      	orrs	r2, r1
 8003716:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b006      	add	sp, #24
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
 800372c:	fffcffff 	.word	0xfffcffff
 8003730:	fff7ffff 	.word	0xfff7ffff
 8003734:	00001388 	.word	0x00001388
 8003738:	ffcfffff 	.word	0xffcfffff
 800373c:	efffffff 	.word	0xefffffff
 8003740:	fffff3ff 	.word	0xfffff3ff
 8003744:	ffffcfff 	.word	0xffffcfff
 8003748:	fff3ffff 	.word	0xfff3ffff

0800374c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e083      	b.n	8003866 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	2382      	movs	r3, #130	; 0x82
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	429a      	cmp	r2, r3
 8003770:	d009      	beq.n	8003786 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	61da      	str	r2, [r3, #28]
 8003778:	e005      	b.n	8003786 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2251      	movs	r2, #81	; 0x51
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2250      	movs	r2, #80	; 0x50
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fe fb0e 	bl	8001dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2251      	movs	r2, #81	; 0x51
 80037ac:	2102      	movs	r1, #2
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	438a      	bics	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	2382      	movs	r3, #130	; 0x82
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	401a      	ands	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	2384      	movs	r3, #132	; 0x84
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	400b      	ands	r3, r1
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	400b      	ands	r3, r1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2102      	movs	r1, #2
 80037e8:	400b      	ands	r3, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2101      	movs	r1, #1
 80037f2:	400b      	ands	r3, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	2138      	movs	r1, #56	; 0x38
 8003808:	400b      	ands	r3, r1
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	400b      	ands	r3, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	0011      	movs	r1, r2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	019b      	lsls	r3, r3, #6
 8003820:	401a      	ands	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	0c1b      	lsrs	r3, r3, #16
 8003830:	2204      	movs	r2, #4
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2210      	movs	r2, #16
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4907      	ldr	r1, [pc, #28]	; (8003870 <HAL_SPI_Init+0x124>)
 8003852:	400a      	ands	r2, r1
 8003854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2251      	movs	r2, #81	; 0x51
 8003860:	2101      	movs	r1, #1
 8003862:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	fffff7ff 	.word	0xfffff7ff

08003874 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003884:	231f      	movs	r3, #31
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2250      	movs	r2, #80	; 0x50
 8003890:	5c9b      	ldrb	r3, [r3, r2]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_SPI_Transmit+0x26>
 8003896:	2302      	movs	r3, #2
 8003898:	e13e      	b.n	8003b18 <HAL_SPI_Transmit+0x2a4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2250      	movs	r2, #80	; 0x50
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a2:	f7fe fcc1 	bl	8002228 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038aa:	2316      	movs	r3, #22
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	1dba      	adds	r2, r7, #6
 80038b0:	8812      	ldrh	r2, [r2, #0]
 80038b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2251      	movs	r2, #81	; 0x51
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d004      	beq.n	80038ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2202      	movs	r2, #2
 80038c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80038c8:	e11b      	b.n	8003b02 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_SPI_Transmit+0x64>
 80038d0:	1dbb      	adds	r3, r7, #6
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80038d8:	231f      	movs	r3, #31
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
    goto error;
 80038e0:	e10f      	b.n	8003b02 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2251      	movs	r2, #81	; 0x51
 80038e6:	2103      	movs	r1, #3
 80038e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1dba      	adds	r2, r7, #6
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1dba      	adds	r2, r7, #6
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	429a      	cmp	r2, r3
 800392e:	d110      	bne.n	8003952 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2140      	movs	r1, #64	; 0x40
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	01c9      	lsls	r1, r1, #7
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	4013      	ands	r3, r2
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d007      	beq.n	8003970 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2140      	movs	r1, #64	; 0x40
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	429a      	cmp	r2, r3
 800397a:	d14e      	bne.n	8003a1a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_SPI_Transmit+0x11a>
 8003984:	2316      	movs	r3, #22
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d13f      	bne.n	8003a0e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039b2:	e02c      	b.n	8003a0e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d112      	bne.n	80039e8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	881a      	ldrh	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	1c9a      	adds	r2, r3, #2
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039e6:	e012      	b.n	8003a0e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e8:	f7fe fc1e 	bl	8002228 <HAL_GetTick>
 80039ec:	0002      	movs	r2, r0
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d802      	bhi.n	80039fe <HAL_SPI_Transmit+0x18a>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d102      	bne.n	8003a04 <HAL_SPI_Transmit+0x190>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003a04:	231f      	movs	r3, #31
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	2203      	movs	r2, #3
 8003a0a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a0c:	e079      	b.n	8003b02 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1cd      	bne.n	80039b4 <HAL_SPI_Transmit+0x140>
 8003a18:	e04f      	b.n	8003aba <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_SPI_Transmit+0x1b8>
 8003a22:	2316      	movs	r3, #22
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d141      	bne.n	8003ab0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a52:	e02d      	b.n	8003ab0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d113      	bne.n	8003a8a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a88:	e012      	b.n	8003ab0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8a:	f7fe fbcd 	bl	8002228 <HAL_GetTick>
 8003a8e:	0002      	movs	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d802      	bhi.n	8003aa0 <HAL_SPI_Transmit+0x22c>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <HAL_SPI_Transmit+0x232>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003aa6:	231f      	movs	r3, #31
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2203      	movs	r2, #3
 8003aac:	701a      	strb	r2, [r3, #0]
          goto error;
 8003aae:	e028      	b.n	8003b02 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cc      	bne.n	8003a54 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 fc07 	bl	80042d4 <SPI_EndRxTxTransaction>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003af6:	231f      	movs	r3, #31
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e000      	b.n	8003b02 <HAL_SPI_Transmit+0x28e>
  }

error:
 8003b00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2251      	movs	r2, #81	; 0x51
 8003b06:	2101      	movs	r1, #1
 8003b08:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2250      	movs	r2, #80	; 0x50
 8003b0e:	2100      	movs	r1, #0
 8003b10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b12:	231f      	movs	r3, #31
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b008      	add	sp, #32
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dbb      	adds	r3, r7, #6
 8003b2e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b30:	2317      	movs	r3, #23
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	2382      	movs	r3, #130	; 0x82
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d113      	bne.n	8003b6c <HAL_SPI_Receive+0x4c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2251      	movs	r2, #81	; 0x51
 8003b50:	2104      	movs	r1, #4
 8003b52:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b54:	1dbb      	adds	r3, r7, #6
 8003b56:	881c      	ldrh	r4, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0023      	movs	r3, r4
 8003b64:	f000 f902 	bl	8003d6c <HAL_SPI_TransmitReceive>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	e0f9      	b.n	8003d60 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2250      	movs	r2, #80	; 0x50
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_SPI_Receive+0x5a>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0f2      	b.n	8003d60 <HAL_SPI_Receive+0x240>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2250      	movs	r2, #80	; 0x50
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b82:	f7fe fb51 	bl	8002228 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2251      	movs	r2, #81	; 0x51
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d004      	beq.n	8003ba0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003b96:	2317      	movs	r3, #23
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b9e:	e0d4      	b.n	8003d4a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_SPI_Receive+0x8e>
 8003ba6:	1dbb      	adds	r3, r7, #6
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bb6:	e0c8      	b.n	8003d4a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2251      	movs	r2, #81	; 0x51
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1dba      	adds	r2, r7, #6
 8003bd0:	8812      	ldrh	r2, [r2, #0]
 8003bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1dba      	adds	r2, r7, #6
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10f      	bne.n	8003c26 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	438a      	bics	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4951      	ldr	r1, [pc, #324]	; (8003d68 <HAL_SPI_Receive+0x248>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d007      	beq.n	8003c44 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d164      	bne.n	8003d16 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c4c:	e02f      	b.n	8003cae <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2201      	movs	r2, #1
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d115      	bne.n	8003c88 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	001a      	movs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c86:	e012      	b.n	8003cae <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c88:	f7fe face 	bl	8002228 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d802      	bhi.n	8003c9e <HAL_SPI_Receive+0x17e>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	d102      	bne.n	8003ca4 <HAL_SPI_Receive+0x184>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003ca4:	2317      	movs	r3, #23
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2203      	movs	r2, #3
 8003caa:	701a      	strb	r2, [r3, #0]
          goto error;
 8003cac:	e04d      	b.n	8003d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ca      	bne.n	8003c4e <HAL_SPI_Receive+0x12e>
 8003cb8:	e032      	b.n	8003d20 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d113      	bne.n	8003cf0 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cee:	e012      	b.n	8003d16 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf0:	f7fe fa9a 	bl	8002228 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d802      	bhi.n	8003d06 <HAL_SPI_Receive+0x1e6>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_SPI_Receive+0x1ec>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003d0c:	2317      	movs	r3, #23
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2203      	movs	r2, #3
 8003d12:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d14:	e019      	b.n	8003d4a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cc      	bne.n	8003cba <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fa6a 	bl	8004200 <SPI_EndRxTransaction>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003d3e:	2317      	movs	r3, #23
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e000      	b.n	8003d4a <HAL_SPI_Receive+0x22a>
  }

error :
 8003d48:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2251      	movs	r2, #81	; 0x51
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2250      	movs	r2, #80	; 0x50
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d5a:	2317      	movs	r3, #23
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b007      	add	sp, #28
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	ffffbfff 	.word	0xffffbfff

08003d6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	001a      	movs	r2, r3
 8003d7a:	1cbb      	adds	r3, r7, #2
 8003d7c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d82:	232b      	movs	r3, #43	; 0x2b
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2250      	movs	r2, #80	; 0x50
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x2c>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e1a0      	b.n	80040da <HAL_SPI_TransmitReceive+0x36e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2250      	movs	r2, #80	; 0x50
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da0:	f7fe fa42 	bl	8002228 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003da8:	2023      	movs	r0, #35	; 0x23
 8003daa:	183b      	adds	r3, r7, r0
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	2151      	movs	r1, #81	; 0x51
 8003db0:	5c52      	ldrb	r2, [r2, r1]
 8003db2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dba:	231a      	movs	r3, #26
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	1cba      	adds	r2, r7, #2
 8003dc0:	8812      	ldrh	r2, [r2, #0]
 8003dc2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dc4:	183b      	adds	r3, r7, r0
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d011      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x84>
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	2382      	movs	r3, #130	; 0x82
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d107      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x7a>
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d004      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003de6:	232b      	movs	r3, #43	; 0x2b
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dee:	e169      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x98>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x98>
 8003dfc:	1cbb      	adds	r3, r7, #2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003e04:	232b      	movs	r3, #43	; 0x2b
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e0c:	e15a      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2251      	movs	r2, #81	; 0x51
 8003e12:	5c9b      	ldrb	r3, [r3, r2]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2251      	movs	r2, #81	; 0x51
 8003e1e:	2105      	movs	r1, #5
 8003e20:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1cba      	adds	r2, r7, #2
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1cba      	adds	r2, r7, #2
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1cba      	adds	r2, r7, #2
 8003e48:	8812      	ldrh	r2, [r2, #0]
 8003e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1cba      	adds	r2, r7, #2
 8003e50:	8812      	ldrh	r2, [r2, #0]
 8003e52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d007      	beq.n	8003e7e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d000      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x120>
 8003e8a:	e07a      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x132>
 8003e94:	231a      	movs	r3, #26
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d166      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec2:	e053      	b.n	8003f6c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d11b      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x19e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d016      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x19e>
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d113      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	1c9a      	adds	r2, r3, #2
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d119      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x1e0>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d014      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	1c9a      	adds	r2, r3, #2
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f4c:	f7fe f96c 	bl	8002228 <HAL_GetTick>
 8003f50:	0002      	movs	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d807      	bhi.n	8003f6c <HAL_SPI_TransmitReceive+0x200>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	3301      	adds	r3, #1
 8003f60:	d004      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003f62:	232b      	movs	r3, #43	; 0x2b
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	2203      	movs	r2, #3
 8003f68:	701a      	strb	r2, [r3, #0]
        goto error;
 8003f6a:	e0ab      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1a6      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x158>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1a1      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x158>
 8003f80:	e07f      	b.n	8004082 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x22a>
 8003f8a:	231a      	movs	r3, #26
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d000      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x22a>
 8003f94:	e06b      	b.n	800406e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fbc:	e057      	b.n	800406e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11c      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x29a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d017      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x29a>
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d114      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	7812      	ldrb	r2, [r2, #0]
 8003fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2201      	movs	r2, #1
 800400e:	4013      	ands	r3, r2
 8004010:	2b01      	cmp	r3, #1
 8004012:	d119      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x2dc>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004044:	2301      	movs	r3, #1
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004048:	f7fe f8ee 	bl	8002228 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004054:	429a      	cmp	r2, r3
 8004056:	d802      	bhi.n	800405e <HAL_SPI_TransmitReceive+0x2f2>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	3301      	adds	r3, #1
 800405c:	d102      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x2f8>
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8004064:	232b      	movs	r3, #43	; 0x2b
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2203      	movs	r2, #3
 800406a:	701a      	strb	r2, [r3, #0]
        goto error;
 800406c:	e02a      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1a2      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x252>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d19d      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 f923 	bl	80042d4 <SPI_EndRxTxTransaction>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d007      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8004092:	232b      	movs	r3, #43	; 0x2b
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040a0:	e010      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	e000      	b.n	80040c4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80040c2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2251      	movs	r2, #81	; 0x51
 80040c8:	2101      	movs	r1, #1
 80040ca:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2250      	movs	r2, #80	; 0x50
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040d4:	232b      	movs	r3, #43	; 0x2b
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	781b      	ldrb	r3, [r3, #0]
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b00c      	add	sp, #48	; 0x30
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040f4:	f7fe f898 	bl	8002228 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004104:	f7fe f890 	bl	8002228 <HAL_GetTick>
 8004108:	0003      	movs	r3, r0
 800410a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800410c:	4b3a      	ldr	r3, [pc, #232]	; (80041f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	015b      	lsls	r3, r3, #5
 8004112:	0d1b      	lsrs	r3, r3, #20
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	4353      	muls	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800411a:	e058      	b.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	d055      	beq.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004122:	f7fe f881 	bl	8002228 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d902      	bls.n	8004138 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d142      	bne.n	80041be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	21e0      	movs	r1, #224	; 0xe0
 8004144:	438a      	bics	r2, r1
 8004146:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	2382      	movs	r3, #130	; 0x82
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	429a      	cmp	r2, r3
 8004152:	d113      	bne.n	800417c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	429a      	cmp	r2, r3
 800415e:	d005      	beq.n	800416c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	429a      	cmp	r2, r3
 800416a:	d107      	bne.n	800417c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2140      	movs	r1, #64	; 0x40
 8004178:	438a      	bics	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	019b      	lsls	r3, r3, #6
 8004184:	429a      	cmp	r2, r3
 8004186:	d110      	bne.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	491a      	ldr	r1, [pc, #104]	; (80041fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004194:	400a      	ands	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	0189      	lsls	r1, r1, #6
 80041a6:	430a      	orrs	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2251      	movs	r2, #81	; 0x51
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2250      	movs	r2, #80	; 0x50
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e017      	b.n	80041ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	425a      	negs	r2, r3
 80041de:	4153      	adcs	r3, r2
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	001a      	movs	r2, r3
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d197      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b008      	add	sp, #32
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	200000c4 	.word	0x200000c4
 80041fc:	ffffdfff 	.word	0xffffdfff

08004200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	2382      	movs	r3, #130	; 0x82
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	429a      	cmp	r2, r3
 8004216:	d113      	bne.n	8004240 <SPI_EndRxTransaction+0x40>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	429a      	cmp	r2, r3
 8004222:	d005      	beq.n	8004230 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	429a      	cmp	r2, r3
 800422e:	d107      	bne.n	8004240 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	2382      	movs	r3, #130	; 0x82
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	429a      	cmp	r2, r3
 800424a:	d12b      	bne.n	80042a4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	429a      	cmp	r2, r3
 8004256:	d012      	beq.n	800427e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	0013      	movs	r3, r2
 8004262:	2200      	movs	r2, #0
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	f7ff ff3d 	bl	80040e4 <SPI_WaitFlagStateUntilTimeout>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d02d      	beq.n	80042ca <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	2220      	movs	r2, #32
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e026      	b.n	80042cc <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	0013      	movs	r3, r2
 8004288:	2200      	movs	r2, #0
 800428a:	2101      	movs	r1, #1
 800428c:	f7ff ff2a 	bl	80040e4 <SPI_WaitFlagStateUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d01a      	beq.n	80042ca <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	2220      	movs	r2, #32
 800429a:	431a      	orrs	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e013      	b.n	80042cc <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	0013      	movs	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	2101      	movs	r1, #1
 80042b2:	f7ff ff17 	bl	80040e4 <SPI_WaitFlagStateUntilTimeout>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d007      	beq.n	80042ca <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2220      	movs	r2, #32
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e000      	b.n	80042cc <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042e0:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <SPI_EndRxTxTransaction+0x84>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	491d      	ldr	r1, [pc, #116]	; (800435c <SPI_EndRxTxTransaction+0x88>)
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7fb ff0e 	bl	8000108 <__udivsi3>
 80042ec:	0003      	movs	r3, r0
 80042ee:	001a      	movs	r2, r3
 80042f0:	0013      	movs	r3, r2
 80042f2:	015b      	lsls	r3, r3, #5
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	189b      	adds	r3, r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	2382      	movs	r3, #130	; 0x82
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	429a      	cmp	r2, r3
 8004308:	d112      	bne.n	8004330 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	0013      	movs	r3, r2
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	f7ff fee4 	bl	80040e4 <SPI_WaitFlagStateUntilTimeout>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d016      	beq.n	800434e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	2220      	movs	r2, #32
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e00f      	b.n	8004350 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3b01      	subs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	4013      	ands	r3, r2
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d0f2      	beq.n	8004330 <SPI_EndRxTxTransaction+0x5c>
 800434a:	e000      	b.n	800434e <SPI_EndRxTxTransaction+0x7a>
        break;
 800434c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b006      	add	sp, #24
 8004356:	bd80      	pop	{r7, pc}
 8004358:	200000c4 	.word	0x200000c4
 800435c:	016e3600 	.word	0x016e3600

08004360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e032      	b.n	80043d8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2239      	movs	r2, #57	; 0x39
 8004376:	5c9b      	ldrb	r3, [r3, r2]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d107      	bne.n	800438e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2238      	movs	r2, #56	; 0x38
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0018      	movs	r0, r3
 800438a:	f7fd fe21 	bl	8001fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2239      	movs	r2, #57	; 0x39
 8004392:	2102      	movs	r1, #2
 8004394:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	0019      	movs	r1, r3
 80043a0:	0010      	movs	r0, r2
 80043a2:	f000 f943 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223e      	movs	r2, #62	; 0x3e
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223a      	movs	r2, #58	; 0x3a
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	223b      	movs	r2, #59	; 0x3b
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	223c      	movs	r2, #60	; 0x3c
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223d      	movs	r2, #61	; 0x3d
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2239      	movs	r2, #57	; 0x39
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2239      	movs	r2, #57	; 0x39
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e03b      	b.n	8004470 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2239      	movs	r2, #57	; 0x39
 80043fc:	2102      	movs	r1, #2
 80043fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2101      	movs	r1, #1
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	05db      	lsls	r3, r3, #23
 8004418:	429a      	cmp	r2, r3
 800441a:	d00e      	beq.n	800443a <HAL_TIM_Base_Start_IT+0x5a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <HAL_TIM_Base_Start_IT+0x98>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <HAL_TIM_Base_Start_IT+0x5a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a14      	ldr	r2, [pc, #80]	; (800447c <HAL_TIM_Base_Start_IT+0x9c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIM_Base_Start_IT+0x5a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a12      	ldr	r2, [pc, #72]	; (8004480 <HAL_TIM_Base_Start_IT+0xa0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2207      	movs	r2, #7
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d010      	beq.n	800446e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e007      	b.n	800446e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2101      	movs	r1, #1
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40000400 	.word	0x40000400
 800447c:	40010800 	.word	0x40010800
 8004480:	40011400 	.word	0x40011400

08004484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2238      	movs	r2, #56	; 0x38
 800449a:	5c9b      	ldrb	r3, [r3, r2]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x20>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0bc      	b.n	800461e <HAL_TIM_ConfigClockSource+0x19a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2238      	movs	r2, #56	; 0x38
 80044a8:	2101      	movs	r1, #1
 80044aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2239      	movs	r2, #57	; 0x39
 80044b0:	2102      	movs	r1, #2
 80044b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2277      	movs	r2, #119	; 0x77
 80044c0:	4393      	bics	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a58      	ldr	r2, [pc, #352]	; (8004628 <HAL_TIM_ConfigClockSource+0x1a4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	0192      	lsls	r2, r2, #6
 80044dc:	4293      	cmp	r3, r2
 80044de:	d040      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xde>
 80044e0:	2280      	movs	r2, #128	; 0x80
 80044e2:	0192      	lsls	r2, r2, #6
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d900      	bls.n	80044ea <HAL_TIM_ConfigClockSource+0x66>
 80044e8:	e088      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0152      	lsls	r2, r2, #5
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d100      	bne.n	80044f4 <HAL_TIM_ConfigClockSource+0x70>
 80044f2:	e088      	b.n	8004606 <HAL_TIM_ConfigClockSource+0x182>
 80044f4:	2280      	movs	r2, #128	; 0x80
 80044f6:	0152      	lsls	r2, r2, #5
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d900      	bls.n	80044fe <HAL_TIM_ConfigClockSource+0x7a>
 80044fc:	e07e      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 80044fe:	2b70      	cmp	r3, #112	; 0x70
 8004500:	d018      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xb0>
 8004502:	d900      	bls.n	8004506 <HAL_TIM_ConfigClockSource+0x82>
 8004504:	e07a      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004506:	2b60      	cmp	r3, #96	; 0x60
 8004508:	d04f      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x126>
 800450a:	d900      	bls.n	800450e <HAL_TIM_ConfigClockSource+0x8a>
 800450c:	e076      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800450e:	2b50      	cmp	r3, #80	; 0x50
 8004510:	d03b      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x106>
 8004512:	d900      	bls.n	8004516 <HAL_TIM_ConfigClockSource+0x92>
 8004514:	e072      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d057      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x146>
 800451a:	d900      	bls.n	800451e <HAL_TIM_ConfigClockSource+0x9a>
 800451c:	e06e      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800451e:	2b30      	cmp	r3, #48	; 0x30
 8004520:	d063      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004522:	d86b      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 8004524:	2b20      	cmp	r3, #32
 8004526:	d060      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004528:	d868      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d05d      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 800452e:	2b10      	cmp	r3, #16
 8004530:	d05b      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x166>
 8004532:	e063      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f000 f94a 	bl	80047dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2277      	movs	r2, #119	; 0x77
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
      break;
 8004560:	e052      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f000 f933 	bl	80047dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	01c9      	lsls	r1, r1, #7
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
      break;
 8004588:	e03e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	001a      	movs	r2, r3
 8004598:	f000 f8a6 	bl	80046e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2150      	movs	r1, #80	; 0x50
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f900 	bl	80047a8 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e02e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	001a      	movs	r2, r3
 80045b8:	f000 f8c4 	bl	8004744 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2160      	movs	r1, #96	; 0x60
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f8f0 	bl	80047a8 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e01e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	001a      	movs	r2, r3
 80045d8:	f000 f886 	bl	80046e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 f8e0 	bl	80047a8 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e00e      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f000 f8d7 	bl	80047a8 <TIM_ITRx_SetConfig>
      break;
 80045fa:	e005      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80045fc:	230f      	movs	r3, #15
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
      break;
 8004604:	e000      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004606:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2239      	movs	r2, #57	; 0x39
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2238      	movs	r2, #56	; 0x38
 8004614:	2100      	movs	r1, #0
 8004616:	5499      	strb	r1, [r3, r2]

  return status;
 8004618:	230f      	movs	r3, #15
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	ffff00ff 	.word	0xffff00ff

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	429a      	cmp	r2, r3
 8004644:	d00b      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <TIM_Base_SetConfig+0xac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <TIM_Base_SetConfig+0xb0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0x32>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <TIM_Base_SetConfig+0xb4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2270      	movs	r2, #112	; 0x70
 8004662:	4393      	bics	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	05db      	lsls	r3, r3, #23
 8004676:	429a      	cmp	r2, r3
 8004678:	d00b      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <TIM_Base_SetConfig+0xac>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <TIM_Base_SetConfig+0xb0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_Base_SetConfig+0x66>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <TIM_Base_SetConfig+0xb4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <TIM_Base_SetConfig+0xb8>)
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	4393      	bics	r3, r2
 80046aa:	001a      	movs	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	615a      	str	r2, [r3, #20]
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b004      	add	sp, #16
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40010800 	.word	0x40010800
 80046e0:	40011400 	.word	0x40011400
 80046e4:	fffffcff 	.word	0xfffffcff

080046e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	2201      	movs	r2, #1
 8004700:	4393      	bics	r3, r2
 8004702:	001a      	movs	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	22f0      	movs	r2, #240	; 0xf0
 8004712:	4393      	bics	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	220a      	movs	r2, #10
 8004724:	4393      	bics	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b006      	add	sp, #24
 8004742:	bd80      	pop	{r7, pc}

08004744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	2210      	movs	r2, #16
 8004756:	4393      	bics	r3, r2
 8004758:	001a      	movs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <TIM_TI2_ConfigInputStage+0x60>)
 800476e:	4013      	ands	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	22a0      	movs	r2, #160	; 0xa0
 8004780:	4393      	bics	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	ffff0fff 	.word	0xffff0fff

080047a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2270      	movs	r2, #112	; 0x70
 80047bc:	4393      	bics	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	2207      	movs	r2, #7
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	609a      	str	r2, [r3, #8]
}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b004      	add	sp, #16
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <TIM_ETR_SetConfig+0x3c>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	431a      	orrs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}
 8004818:	ffff00ff 	.word	0xffff00ff

0800481c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2238      	movs	r2, #56	; 0x38
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e047      	b.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2238      	movs	r2, #56	; 0x38
 8004838:	2101      	movs	r1, #1
 800483a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2239      	movs	r2, #57	; 0x39
 8004840:	2102      	movs	r1, #2
 8004842:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2270      	movs	r2, #112	; 0x70
 8004858:	4393      	bics	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	05db      	lsls	r3, r3, #23
 8004876:	429a      	cmp	r2, r3
 8004878:	d00e      	beq.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10c      	bne.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	4393      	bics	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2239      	movs	r2, #57	; 0x39
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2238      	movs	r2, #56	; 0x38
 80048be:	2100      	movs	r1, #0
 80048c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40010800 	.word	0x40010800
 80048d4:	40011400 	.word	0x40011400

080048d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e044      	b.n	8004974 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2274      	movs	r2, #116	; 0x74
 80048f6:	2100      	movs	r1, #0
 80048f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7fd fbbf 	bl	8002080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2101      	movs	r1, #1
 8004914:	438a      	bics	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f8d8 	bl	8004ad0 <UART_SetConfig>
 8004920:	0003      	movs	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e024      	b.n	8004974 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fb89 	bl	800504c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	490d      	ldr	r1, [pc, #52]	; (800497c <HAL_UART_Init+0xa4>)
 8004946:	400a      	ands	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	212a      	movs	r1, #42	; 0x2a
 8004956:	438a      	bics	r2, r1
 8004958:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fc21 	bl	80051b4 <UART_CheckIdleState>
 8004972:	0003      	movs	r3, r0
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}
 800497c:	ffffb7ff 	.word	0xffffb7ff

08004980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004994:	2b20      	cmp	r3, #32
 8004996:	d000      	beq.n	800499a <HAL_UART_Transmit+0x1a>
 8004998:	e095      	b.n	8004ac6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_UART_Transmit+0x28>
 80049a0:	1dbb      	adds	r3, r7, #6
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e08d      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	015b      	lsls	r3, r3, #5
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d109      	bne.n	80049cc <HAL_UART_Transmit+0x4c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2201      	movs	r2, #1
 80049c4:	4013      	ands	r3, r2
 80049c6:	d001      	beq.n	80049cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e07d      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2274      	movs	r2, #116	; 0x74
 80049d0:	5c9b      	ldrb	r3, [r3, r2]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_UART_Transmit+0x5a>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e076      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2274      	movs	r2, #116	; 0x74
 80049de:	2101      	movs	r1, #1
 80049e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	2100      	movs	r1, #0
 80049e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	; 0x21
 80049ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f0:	f7fd fc1a 	bl	8002228 <HAL_GetTick>
 80049f4:	0003      	movs	r3, r0
 80049f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1dba      	adds	r2, r7, #6
 80049fc:	2150      	movs	r1, #80	; 0x50
 80049fe:	8812      	ldrh	r2, [r2, #0]
 8004a00:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1dba      	adds	r2, r7, #6
 8004a06:	2152      	movs	r1, #82	; 0x52
 8004a08:	8812      	ldrh	r2, [r2, #0]
 8004a0a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	015b      	lsls	r3, r3, #5
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d108      	bne.n	8004a2a <HAL_UART_Transmit+0xaa>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e003      	b.n	8004a32 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2274      	movs	r2, #116	; 0x74
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a3a:	e02c      	b.n	8004a96 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	0013      	movs	r3, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	f000 fbfb 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004a4e:	1e03      	subs	r3, r0, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e038      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	001a      	movs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	05d2      	lsls	r2, r2, #23
 8004a68:	0dd2      	lsrs	r2, r2, #23
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	3302      	adds	r3, #2
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e007      	b.n	8004a84 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2252      	movs	r2, #82	; 0x52
 8004a88:	5a9b      	ldrh	r3, [r3, r2]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b299      	uxth	r1, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2252      	movs	r2, #82	; 0x52
 8004a94:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2252      	movs	r2, #82	; 0x52
 8004a9a:	5a9b      	ldrh	r3, [r3, r2]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1cc      	bne.n	8004a3c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	0013      	movs	r3, r2
 8004aac:	2200      	movs	r2, #0
 8004aae:	2140      	movs	r1, #64	; 0x40
 8004ab0:	f000 fbc8 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e005      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b008      	add	sp, #32
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	b5b0      	push	{r4, r5, r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad8:	231a      	movs	r3, #26
 8004ada:	2218      	movs	r2, #24
 8004adc:	4694      	mov	ip, r2
 8004ade:	44bc      	add	ip, r7
 8004ae0:	4463      	add	r3, ip
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4ab0      	ldr	r2, [pc, #704]	; (8004dc8 <UART_SetConfig+0x2f8>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4aac      	ldr	r2, [pc, #688]	; (8004dcc <UART_SetConfig+0x2fc>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4aa6      	ldr	r2, [pc, #664]	; (8004dd0 <UART_SetConfig+0x300>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b42:	4313      	orrs	r3, r2
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4aa1      	ldr	r2, [pc, #644]	; (8004dd4 <UART_SetConfig+0x304>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a9d      	ldr	r2, [pc, #628]	; (8004dd8 <UART_SetConfig+0x308>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d136      	bne.n	8004bd4 <UART_SetConfig+0x104>
 8004b66:	4b9d      	ldr	r3, [pc, #628]	; (8004ddc <UART_SetConfig+0x30c>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d020      	beq.n	8004bb4 <UART_SetConfig+0xe4>
 8004b72:	d827      	bhi.n	8004bc4 <UART_SetConfig+0xf4>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d00d      	beq.n	8004b94 <UART_SetConfig+0xc4>
 8004b78:	d824      	bhi.n	8004bc4 <UART_SetConfig+0xf4>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <UART_SetConfig+0xb4>
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d010      	beq.n	8004ba4 <UART_SetConfig+0xd4>
 8004b82:	e01f      	b.n	8004bc4 <UART_SetConfig+0xf4>
 8004b84:	231b      	movs	r3, #27
 8004b86:	2218      	movs	r2, #24
 8004b88:	4694      	mov	ip, r2
 8004b8a:	44bc      	add	ip, r7
 8004b8c:	4463      	add	r3, ip
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e0c5      	b.n	8004d20 <UART_SetConfig+0x250>
 8004b94:	231b      	movs	r3, #27
 8004b96:	2218      	movs	r2, #24
 8004b98:	4694      	mov	ip, r2
 8004b9a:	44bc      	add	ip, r7
 8004b9c:	4463      	add	r3, ip
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e0bd      	b.n	8004d20 <UART_SetConfig+0x250>
 8004ba4:	231b      	movs	r3, #27
 8004ba6:	2218      	movs	r2, #24
 8004ba8:	4694      	mov	ip, r2
 8004baa:	44bc      	add	ip, r7
 8004bac:	4463      	add	r3, ip
 8004bae:	2204      	movs	r2, #4
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e0b5      	b.n	8004d20 <UART_SetConfig+0x250>
 8004bb4:	231b      	movs	r3, #27
 8004bb6:	2218      	movs	r2, #24
 8004bb8:	4694      	mov	ip, r2
 8004bba:	44bc      	add	ip, r7
 8004bbc:	4463      	add	r3, ip
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e0ad      	b.n	8004d20 <UART_SetConfig+0x250>
 8004bc4:	231b      	movs	r3, #27
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	4694      	mov	ip, r2
 8004bca:	44bc      	add	ip, r7
 8004bcc:	4463      	add	r3, ip
 8004bce:	2210      	movs	r2, #16
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e0a5      	b.n	8004d20 <UART_SetConfig+0x250>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a81      	ldr	r2, [pc, #516]	; (8004de0 <UART_SetConfig+0x310>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d136      	bne.n	8004c4c <UART_SetConfig+0x17c>
 8004bde:	4b7f      	ldr	r3, [pc, #508]	; (8004ddc <UART_SetConfig+0x30c>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	220c      	movs	r2, #12
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d020      	beq.n	8004c2c <UART_SetConfig+0x15c>
 8004bea:	d827      	bhi.n	8004c3c <UART_SetConfig+0x16c>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d00d      	beq.n	8004c0c <UART_SetConfig+0x13c>
 8004bf0:	d824      	bhi.n	8004c3c <UART_SetConfig+0x16c>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <UART_SetConfig+0x12c>
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d010      	beq.n	8004c1c <UART_SetConfig+0x14c>
 8004bfa:	e01f      	b.n	8004c3c <UART_SetConfig+0x16c>
 8004bfc:	231b      	movs	r3, #27
 8004bfe:	2218      	movs	r2, #24
 8004c00:	4694      	mov	ip, r2
 8004c02:	44bc      	add	ip, r7
 8004c04:	4463      	add	r3, ip
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e089      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c0c:	231b      	movs	r3, #27
 8004c0e:	2218      	movs	r2, #24
 8004c10:	4694      	mov	ip, r2
 8004c12:	44bc      	add	ip, r7
 8004c14:	4463      	add	r3, ip
 8004c16:	2202      	movs	r2, #2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e081      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c1c:	231b      	movs	r3, #27
 8004c1e:	2218      	movs	r2, #24
 8004c20:	4694      	mov	ip, r2
 8004c22:	44bc      	add	ip, r7
 8004c24:	4463      	add	r3, ip
 8004c26:	2204      	movs	r2, #4
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e079      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c2c:	231b      	movs	r3, #27
 8004c2e:	2218      	movs	r2, #24
 8004c30:	4694      	mov	ip, r2
 8004c32:	44bc      	add	ip, r7
 8004c34:	4463      	add	r3, ip
 8004c36:	2208      	movs	r2, #8
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	e071      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c3c:	231b      	movs	r3, #27
 8004c3e:	2218      	movs	r2, #24
 8004c40:	4694      	mov	ip, r2
 8004c42:	44bc      	add	ip, r7
 8004c44:	4463      	add	r3, ip
 8004c46:	2210      	movs	r2, #16
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e069      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a64      	ldr	r2, [pc, #400]	; (8004de4 <UART_SetConfig+0x314>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d107      	bne.n	8004c66 <UART_SetConfig+0x196>
 8004c56:	231b      	movs	r3, #27
 8004c58:	2218      	movs	r2, #24
 8004c5a:	4694      	mov	ip, r2
 8004c5c:	44bc      	add	ip, r7
 8004c5e:	4463      	add	r3, ip
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e05c      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5f      	ldr	r2, [pc, #380]	; (8004de8 <UART_SetConfig+0x318>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d107      	bne.n	8004c80 <UART_SetConfig+0x1b0>
 8004c70:	231b      	movs	r3, #27
 8004c72:	2218      	movs	r2, #24
 8004c74:	4694      	mov	ip, r2
 8004c76:	44bc      	add	ip, r7
 8004c78:	4463      	add	r3, ip
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e04f      	b.n	8004d20 <UART_SetConfig+0x250>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a52      	ldr	r2, [pc, #328]	; (8004dd0 <UART_SetConfig+0x300>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d143      	bne.n	8004d12 <UART_SetConfig+0x242>
 8004c8a:	4b54      	ldr	r3, [pc, #336]	; (8004ddc <UART_SetConfig+0x30c>)
 8004c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c8e:	23c0      	movs	r3, #192	; 0xc0
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	4013      	ands	r3, r2
 8004c94:	22c0      	movs	r2, #192	; 0xc0
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d02a      	beq.n	8004cf2 <UART_SetConfig+0x222>
 8004c9c:	22c0      	movs	r2, #192	; 0xc0
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d82e      	bhi.n	8004d02 <UART_SetConfig+0x232>
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d012      	beq.n	8004cd2 <UART_SetConfig+0x202>
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	0112      	lsls	r2, r2, #4
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d826      	bhi.n	8004d02 <UART_SetConfig+0x232>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <UART_SetConfig+0x1f2>
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	00d2      	lsls	r2, r2, #3
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d010      	beq.n	8004ce2 <UART_SetConfig+0x212>
 8004cc0:	e01f      	b.n	8004d02 <UART_SetConfig+0x232>
 8004cc2:	231b      	movs	r3, #27
 8004cc4:	2218      	movs	r2, #24
 8004cc6:	4694      	mov	ip, r2
 8004cc8:	44bc      	add	ip, r7
 8004cca:	4463      	add	r3, ip
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e026      	b.n	8004d20 <UART_SetConfig+0x250>
 8004cd2:	231b      	movs	r3, #27
 8004cd4:	2218      	movs	r2, #24
 8004cd6:	4694      	mov	ip, r2
 8004cd8:	44bc      	add	ip, r7
 8004cda:	4463      	add	r3, ip
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e01e      	b.n	8004d20 <UART_SetConfig+0x250>
 8004ce2:	231b      	movs	r3, #27
 8004ce4:	2218      	movs	r2, #24
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	44bc      	add	ip, r7
 8004cea:	4463      	add	r3, ip
 8004cec:	2204      	movs	r2, #4
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e016      	b.n	8004d20 <UART_SetConfig+0x250>
 8004cf2:	231b      	movs	r3, #27
 8004cf4:	2218      	movs	r2, #24
 8004cf6:	4694      	mov	ip, r2
 8004cf8:	44bc      	add	ip, r7
 8004cfa:	4463      	add	r3, ip
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e00e      	b.n	8004d20 <UART_SetConfig+0x250>
 8004d02:	231b      	movs	r3, #27
 8004d04:	2218      	movs	r2, #24
 8004d06:	4694      	mov	ip, r2
 8004d08:	44bc      	add	ip, r7
 8004d0a:	4463      	add	r3, ip
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e006      	b.n	8004d20 <UART_SetConfig+0x250>
 8004d12:	231b      	movs	r3, #27
 8004d14:	2218      	movs	r2, #24
 8004d16:	4694      	mov	ip, r2
 8004d18:	44bc      	add	ip, r7
 8004d1a:	4463      	add	r3, ip
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <UART_SetConfig+0x300>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d000      	beq.n	8004d2c <UART_SetConfig+0x25c>
 8004d2a:	e09e      	b.n	8004e6a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d2c:	231b      	movs	r3, #27
 8004d2e:	2218      	movs	r2, #24
 8004d30:	4694      	mov	ip, r2
 8004d32:	44bc      	add	ip, r7
 8004d34:	4463      	add	r3, ip
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d01d      	beq.n	8004d78 <UART_SetConfig+0x2a8>
 8004d3c:	dc20      	bgt.n	8004d80 <UART_SetConfig+0x2b0>
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d015      	beq.n	8004d6e <UART_SetConfig+0x29e>
 8004d42:	dc1d      	bgt.n	8004d80 <UART_SetConfig+0x2b0>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <UART_SetConfig+0x27e>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d005      	beq.n	8004d58 <UART_SetConfig+0x288>
 8004d4c:	e018      	b.n	8004d80 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4e:	f7fe fb8b 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004d52:	0003      	movs	r3, r0
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d56:	e01d      	b.n	8004d94 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <UART_SetConfig+0x30c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d002      	beq.n	8004d68 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <UART_SetConfig+0x31c>)
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d66:	e015      	b.n	8004d94 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <UART_SetConfig+0x320>)
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d6c:	e012      	b.n	8004d94 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fe facb 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8004d72:	0003      	movs	r3, r0
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d76:	e00d      	b.n	8004d94 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d7e:	e009      	b.n	8004d94 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d84:	231a      	movs	r3, #26
 8004d86:	2218      	movs	r2, #24
 8004d88:	4694      	mov	ip, r2
 8004d8a:	44bc      	add	ip, r7
 8004d8c:	4463      	add	r3, ip
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
        break;
 8004d92:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d100      	bne.n	8004d9c <UART_SetConfig+0x2cc>
 8004d9a:	e13c      	b.n	8005016 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	0013      	movs	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	189b      	adds	r3, r3, r2
 8004da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d305      	bcc.n	8004db8 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d91d      	bls.n	8004df4 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004db8:	231a      	movs	r3, #26
 8004dba:	2218      	movs	r2, #24
 8004dbc:	4694      	mov	ip, r2
 8004dbe:	44bc      	add	ip, r7
 8004dc0:	4463      	add	r3, ip
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e126      	b.n	8005016 <UART_SetConfig+0x546>
 8004dc8:	efff69f3 	.word	0xefff69f3
 8004dcc:	ffffcfff 	.word	0xffffcfff
 8004dd0:	40004800 	.word	0x40004800
 8004dd4:	fffff4ff 	.word	0xfffff4ff
 8004dd8:	40013800 	.word	0x40013800
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40004400 	.word	0x40004400
 8004de4:	40004c00 	.word	0x40004c00
 8004de8:	40005000 	.word	0x40005000
 8004dec:	003d0900 	.word	0x003d0900
 8004df0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	6939      	ldr	r1, [r7, #16]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	000b      	movs	r3, r1
 8004e02:	0e1b      	lsrs	r3, r3, #24
 8004e04:	0010      	movs	r0, r2
 8004e06:	0205      	lsls	r5, r0, #8
 8004e08:	431d      	orrs	r5, r3
 8004e0a:	000b      	movs	r3, r1
 8004e0c:	021c      	lsls	r4, r3, #8
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68b8      	ldr	r0, [r7, #8]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	1900      	adds	r0, r0, r4
 8004e20:	4169      	adcs	r1, r5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f7fb fae0 	bl	80003f4 <__aeabi_uldivmod>
 8004e34:	0002      	movs	r2, r0
 8004e36:	000b      	movs	r3, r1
 8004e38:	0013      	movs	r3, r2
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3e:	23c0      	movs	r3, #192	; 0xc0
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d309      	bcc.n	8004e5a <UART_SetConfig+0x38a>
 8004e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	035b      	lsls	r3, r3, #13
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d204      	bcs.n	8004e5a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e0dd      	b.n	8005016 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004e5a:	231a      	movs	r3, #26
 8004e5c:	2218      	movs	r2, #24
 8004e5e:	4694      	mov	ip, r2
 8004e60:	44bc      	add	ip, r7
 8004e62:	4463      	add	r3, ip
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e0d5      	b.n	8005016 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d000      	beq.n	8004e78 <UART_SetConfig+0x3a8>
 8004e76:	e074      	b.n	8004f62 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8004e78:	231b      	movs	r3, #27
 8004e7a:	2218      	movs	r2, #24
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	44bc      	add	ip, r7
 8004e80:	4463      	add	r3, ip
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d822      	bhi.n	8004ece <UART_SetConfig+0x3fe>
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	4b6b      	ldr	r3, [pc, #428]	; (8005038 <UART_SetConfig+0x568>)
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e92:	f7fe fae9 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004e96:	0003      	movs	r3, r0
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e9a:	e022      	b.n	8004ee2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e9c:	f7fe fafa 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ea4:	e01d      	b.n	8004ee2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <UART_SetConfig+0x56c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	4013      	ands	r3, r2
 8004eae:	d002      	beq.n	8004eb6 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004eb0:	4b63      	ldr	r3, [pc, #396]	; (8005040 <UART_SetConfig+0x570>)
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004eb4:	e015      	b.n	8004ee2 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <UART_SetConfig+0x574>)
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eba:	e012      	b.n	8004ee2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebc:	f7fe fa24 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ec4:	e00d      	b.n	8004ee2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ecc:	e009      	b.n	8004ee2 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ed2:	231a      	movs	r3, #26
 8004ed4:	2218      	movs	r2, #24
 8004ed6:	4694      	mov	ip, r2
 8004ed8:	44bc      	add	ip, r7
 8004eda:	4463      	add	r3, ip
 8004edc:	2201      	movs	r2, #1
 8004ede:	701a      	strb	r2, [r3, #0]
        break;
 8004ee0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d100      	bne.n	8004eea <UART_SetConfig+0x41a>
 8004ee8:	e095      	b.n	8005016 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	005a      	lsls	r2, r3, #1
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	18d2      	adds	r2, r2, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	0019      	movs	r1, r3
 8004efc:	0010      	movs	r0, r2
 8004efe:	f7fb f903 	bl	8000108 <__udivsi3>
 8004f02:	0003      	movs	r3, r0
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	d921      	bls.n	8004f52 <UART_SetConfig+0x482>
 8004f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	025b      	lsls	r3, r3, #9
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d21c      	bcs.n	8004f52 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	200e      	movs	r0, #14
 8004f1e:	2418      	movs	r4, #24
 8004f20:	193b      	adds	r3, r7, r4
 8004f22:	181b      	adds	r3, r3, r0
 8004f24:	210f      	movs	r1, #15
 8004f26:	438a      	bics	r2, r1
 8004f28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2207      	movs	r2, #7
 8004f32:	4013      	ands	r3, r2
 8004f34:	b299      	uxth	r1, r3
 8004f36:	193b      	adds	r3, r7, r4
 8004f38:	181b      	adds	r3, r3, r0
 8004f3a:	193a      	adds	r2, r7, r4
 8004f3c:	1812      	adds	r2, r2, r0
 8004f3e:	8812      	ldrh	r2, [r2, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	193a      	adds	r2, r7, r4
 8004f4a:	1812      	adds	r2, r2, r0
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e061      	b.n	8005016 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004f52:	231a      	movs	r3, #26
 8004f54:	2218      	movs	r2, #24
 8004f56:	4694      	mov	ip, r2
 8004f58:	44bc      	add	ip, r7
 8004f5a:	4463      	add	r3, ip
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e059      	b.n	8005016 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f62:	231b      	movs	r3, #27
 8004f64:	2218      	movs	r2, #24
 8004f66:	4694      	mov	ip, r2
 8004f68:	44bc      	add	ip, r7
 8004f6a:	4463      	add	r3, ip
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d822      	bhi.n	8004fb8 <UART_SetConfig+0x4e8>
 8004f72:	009a      	lsls	r2, r3, #2
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <UART_SetConfig+0x578>)
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fa74 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004f80:	0003      	movs	r3, r0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f84:	e022      	b.n	8004fcc <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f86:	f7fe fa85 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8e:	e01d      	b.n	8004fcc <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <UART_SetConfig+0x56c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	4013      	ands	r3, r2
 8004f98:	d002      	beq.n	8004fa0 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f9a:	4b29      	ldr	r3, [pc, #164]	; (8005040 <UART_SetConfig+0x570>)
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f9e:	e015      	b.n	8004fcc <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <UART_SetConfig+0x574>)
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa4:	e012      	b.n	8004fcc <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe f9af 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8004faa:	0003      	movs	r3, r0
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fae:	e00d      	b.n	8004fcc <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fb6:	e009      	b.n	8004fcc <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fbc:	231a      	movs	r3, #26
 8004fbe:	2218      	movs	r2, #24
 8004fc0:	4694      	mov	ip, r2
 8004fc2:	44bc      	add	ip, r7
 8004fc4:	4463      	add	r3, ip
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
        break;
 8004fca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	085a      	lsrs	r2, r3, #1
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	18d2      	adds	r2, r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	0010      	movs	r0, r2
 8004fe4:	f7fb f890 	bl	8000108 <__udivsi3>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	2b0f      	cmp	r3, #15
 8004ff2:	d909      	bls.n	8005008 <UART_SetConfig+0x538>
 8004ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	025b      	lsls	r3, r3, #9
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d204      	bcs.n	8005008 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	e006      	b.n	8005016 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005008:	231a      	movs	r3, #26
 800500a:	2218      	movs	r2, #24
 800500c:	4694      	mov	ip, r2
 800500e:	44bc      	add	ip, r7
 8005010:	4463      	add	r3, ip
 8005012:	2201      	movs	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2200      	movs	r2, #0
 8005020:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005022:	231a      	movs	r3, #26
 8005024:	2218      	movs	r2, #24
 8005026:	4694      	mov	ip, r2
 8005028:	44bc      	add	ip, r7
 800502a:	4463      	add	r3, ip
 800502c:	781b      	ldrb	r3, [r3, #0]
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b00e      	add	sp, #56	; 0x38
 8005034:	bdb0      	pop	{r4, r5, r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	08005464 	.word	0x08005464
 800503c:	40021000 	.word	0x40021000
 8005040:	003d0900 	.word	0x003d0900
 8005044:	00f42400 	.word	0x00f42400
 8005048:	08005488 	.word	0x08005488

0800504c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2201      	movs	r2, #1
 800505a:	4013      	ands	r3, r2
 800505c:	d00b      	beq.n	8005076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a4a      	ldr	r2, [pc, #296]	; (8005190 <UART_AdvFeatureConfig+0x144>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d00b      	beq.n	8005098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a43      	ldr	r2, [pc, #268]	; (8005194 <UART_AdvFeatureConfig+0x148>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2204      	movs	r2, #4
 800509e:	4013      	ands	r3, r2
 80050a0:	d00b      	beq.n	80050ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <UART_AdvFeatureConfig+0x14c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2208      	movs	r2, #8
 80050c0:	4013      	ands	r3, r2
 80050c2:	d00b      	beq.n	80050dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a34      	ldr	r2, [pc, #208]	; (800519c <UART_AdvFeatureConfig+0x150>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2210      	movs	r2, #16
 80050e2:	4013      	ands	r3, r2
 80050e4:	d00b      	beq.n	80050fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <UART_AdvFeatureConfig+0x154>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2220      	movs	r2, #32
 8005104:	4013      	ands	r3, r2
 8005106:	d00b      	beq.n	8005120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <UART_AdvFeatureConfig+0x158>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2240      	movs	r2, #64	; 0x40
 8005126:	4013      	ands	r3, r2
 8005128:	d01d      	beq.n	8005166 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <UART_AdvFeatureConfig+0x15c>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	035b      	lsls	r3, r3, #13
 800514a:	429a      	cmp	r2, r3
 800514c:	d10b      	bne.n	8005166 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <UART_AdvFeatureConfig+0x160>)
 8005156:	4013      	ands	r3, r2
 8005158:	0019      	movs	r1, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	4013      	ands	r3, r2
 800516e:	d00b      	beq.n	8005188 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <UART_AdvFeatureConfig+0x164>)
 8005178:	4013      	ands	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	b002      	add	sp, #8
 800518e:	bd80      	pop	{r7, pc}
 8005190:	fffdffff 	.word	0xfffdffff
 8005194:	fffeffff 	.word	0xfffeffff
 8005198:	fffbffff 	.word	0xfffbffff
 800519c:	ffff7fff 	.word	0xffff7fff
 80051a0:	ffffefff 	.word	0xffffefff
 80051a4:	ffffdfff 	.word	0xffffdfff
 80051a8:	ffefffff 	.word	0xffefffff
 80051ac:	ff9fffff 	.word	0xff9fffff
 80051b0:	fff7ffff 	.word	0xfff7ffff

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	2100      	movs	r1, #0
 80051c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fd f830 	bl	8002228 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2208      	movs	r2, #8
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d10c      	bne.n	80051f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2280      	movs	r2, #128	; 0x80
 80051de:	0391      	lsls	r1, r2, #14
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <UART_CheckIdleState+0x8c>)
 80051e4:	9200      	str	r2, [sp, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f000 f82c 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 80051ec:	1e03      	subs	r3, r0, #0
 80051ee:	d001      	beq.n	80051f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e021      	b.n	8005238 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2204      	movs	r2, #4
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d10c      	bne.n	800521c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	03d1      	lsls	r1, r2, #15
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <UART_CheckIdleState+0x8c>)
 800520c:	9200      	str	r2, [sp, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	f000 f818 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d001      	beq.n	800521c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00d      	b.n	8005238 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2274      	movs	r2, #116	; 0x74
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b004      	add	sp, #16
 800523e:	bd80      	pop	{r7, pc}
 8005240:	01ffffff 	.word	0x01ffffff

08005244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b094      	sub	sp, #80	; 0x50
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	e0a3      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005258:	3301      	adds	r3, #1
 800525a:	d100      	bne.n	800525e <UART_WaitOnFlagUntilTimeout+0x1a>
 800525c:	e09f      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fc ffe3 	bl	8002228 <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <UART_WaitOnFlagUntilTimeout+0x30>
 800526e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005270:	2b00      	cmp	r3, #0
 8005272:	d13d      	bne.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005274:	f3ef 8310 	mrs	r3, PRIMASK
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800527c:	647b      	str	r3, [r7, #68]	; 0x44
 800527e:	2301      	movs	r3, #1
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	494c      	ldr	r1, [pc, #304]	; (80053c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005296:	400a      	ands	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a6:	f3ef 8310 	mrs	r3, PRIMASK
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	643b      	str	r3, [r7, #64]	; 0x40
 80052b0:	2301      	movs	r3, #1
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2101      	movs	r1, #1
 80052c8:	438a      	bics	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d2:	f383 8810 	msr	PRIMASK, r3
}
 80052d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2274      	movs	r2, #116	; 0x74
 80052e8:	2100      	movs	r1, #0
 80052ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e067      	b.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2204      	movs	r2, #4
 80052f8:	4013      	ands	r3, r2
 80052fa:	d050      	beq.n	800539e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	401a      	ands	r2, r3
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	429a      	cmp	r2, r3
 800530e:	d146      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2280      	movs	r2, #128	; 0x80
 8005316:	0112      	lsls	r2, r2, #4
 8005318:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531a:	f3ef 8310 	mrs	r3, PRIMASK
 800531e:	613b      	str	r3, [r7, #16]
  return(result);
 8005320:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	2301      	movs	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4923      	ldr	r1, [pc, #140]	; (80053c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800533c:	400a      	ands	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005342:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534c:	f3ef 8310 	mrs	r3, PRIMASK
 8005350:	61fb      	str	r3, [r7, #28]
  return(result);
 8005352:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
 8005356:	2301      	movs	r3, #1
 8005358:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f383 8810 	msr	PRIMASK, r3
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2101      	movs	r1, #1
 800536e:	438a      	bics	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	f383 8810 	msr	PRIMASK, r3
}
 800537c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	2120      	movs	r1, #32
 8005390:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2274      	movs	r2, #116	; 0x74
 8005396:	2100      	movs	r1, #0
 8005398:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e010      	b.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	425a      	negs	r2, r3
 80053ae:	4153      	adcs	r3, r2
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	001a      	movs	r2, r3
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d100      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x17a>
 80053bc:	e74b      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b014      	add	sp, #80	; 0x50
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	fffffe5f 	.word	0xfffffe5f

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	2600      	movs	r6, #0
 80053d0:	4d0c      	ldr	r5, [pc, #48]	; (8005404 <__libc_init_array+0x38>)
 80053d2:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	42a6      	cmp	r6, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	2600      	movs	r6, #0
 80053de:	f000 f821 	bl	8005424 <_init>
 80053e2:	4d0a      	ldr	r5, [pc, #40]	; (800540c <__libc_init_array+0x40>)
 80053e4:	4c0a      	ldr	r4, [pc, #40]	; (8005410 <__libc_init_array+0x44>)
 80053e6:	1b64      	subs	r4, r4, r5
 80053e8:	10a4      	asrs	r4, r4, #2
 80053ea:	42a6      	cmp	r6, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	00b3      	lsls	r3, r6, #2
 80053f2:	58eb      	ldr	r3, [r5, r3]
 80053f4:	4798      	blx	r3
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	00b3      	lsls	r3, r6, #2
 80053fc:	58eb      	ldr	r3, [r5, r3]
 80053fe:	4798      	blx	r3
 8005400:	3601      	adds	r6, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	080054b4 	.word	0x080054b4
 8005408:	080054b4 	.word	0x080054b4
 800540c:	080054b4 	.word	0x080054b4
 8005410:	080054b8 	.word	0x080054b8

08005414 <memset>:
 8005414:	0003      	movs	r3, r0
 8005416:	1882      	adds	r2, r0, r2
 8005418:	4293      	cmp	r3, r2
 800541a:	d100      	bne.n	800541e <memset+0xa>
 800541c:	4770      	bx	lr
 800541e:	7019      	strb	r1, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	e7f9      	b.n	8005418 <memset+0x4>

08005424 <_init>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr

08005430 <_fini>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr
